{
  "sqlite_utils": {
    "kind": "module",
    "name": "sqlite_utils",
    "labels": [],
    "members": [
      {
        "kind": "alias",
        "name": "Database",
        "target_path": "sqlite_utils.db.Database",
        "lineno": 1,
        "endlineno": 1
      },
      {
        "kind": "alias",
        "name": "suggest_column_types",
        "target_path": "sqlite_utils.utils.suggest_column_types",
        "lineno": 2,
        "endlineno": 2
      },
      {
        "kind": "attribute",
        "name": "__all__",
        "lineno": 4,
        "endlineno": 4,
        "labels": [
          "module-attribute"
        ],
        "members": [],
        "value": "['Database', 'suggest_column_types']"
      },
      {
        "kind": "module",
        "name": "utils",
        "labels": [],
        "members": [
          {
            "kind": "alias",
            "name": "base64",
            "target_path": "base64",
            "lineno": 1,
            "endlineno": 1
          },
          {
            "kind": "alias",
            "name": "contextlib",
            "target_path": "contextlib",
            "lineno": 2,
            "endlineno": 2
          },
          {
            "kind": "alias",
            "name": "csv",
            "target_path": "csv",
            "lineno": 3,
            "endlineno": 3
          },
          {
            "kind": "alias",
            "name": "enum",
            "target_path": "enum",
            "lineno": 4,
            "endlineno": 4
          },
          {
            "kind": "alias",
            "name": "hashlib",
            "target_path": "hashlib",
            "lineno": 5,
            "endlineno": 5
          },
          {
            "kind": "alias",
            "name": "io",
            "target_path": "io",
            "lineno": 6,
            "endlineno": 6
          },
          {
            "kind": "alias",
            "name": "itertools",
            "target_path": "itertools",
            "lineno": 7,
            "endlineno": 7
          },
          {
            "kind": "alias",
            "name": "json",
            "target_path": "json",
            "lineno": 8,
            "endlineno": 8
          },
          {
            "kind": "alias",
            "name": "os",
            "target_path": "os",
            "lineno": 9,
            "endlineno": 9
          },
          {
            "kind": "alias",
            "name": "sys",
            "target_path": "sys",
            "lineno": 10,
            "endlineno": 10
          },
          {
            "kind": "alias",
            "name": "Dict",
            "target_path": "typing.Dict",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "cast",
            "target_path": "typing.cast",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "BinaryIO",
            "target_path": "typing.BinaryIO",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "Iterable",
            "target_path": "typing.Iterable",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "Optional",
            "target_path": "typing.Optional",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "Tuple",
            "target_path": "typing.Tuple",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "Type",
            "target_path": "typing.Type",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "click",
            "target_path": "click",
            "lineno": 14,
            "endlineno": 14
          },
          {
            "kind": "alias",
            "name": "sqlite3",
            "target_path": "sqlite3",
            "lineno": 23,
            "endlineno": 23
          },
          {
            "kind": "alias",
            "name": "pysqlite3",
            "target_path": "pysqlite3.dbapi2",
            "lineno": 18,
            "endlineno": 18
          },
          {
            "kind": "attribute",
            "name": "OperationalError",
            "lineno": 20,
            "endlineno": 20,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "pysqlite3.dbapi2.OperationalError"
          },
          {
            "kind": "attribute",
            "name": "SPATIALITE_PATHS",
            "lineno": 28,
            "endlineno": 31,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "('/usr/lib/x86_64-linux-gnu/mod_spatialite.so', '/usr/local/lib/mod_spatialite.dylib')"
          },
          {
            "kind": "attribute",
            "name": "ORIGINAL_CSV_FIELD_SIZE_LIMIT",
            "lineno": 34,
            "endlineno": 34,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "csv.field_size_limit()"
          },
          {
            "kind": "function",
            "name": "maximize_csv_field_size_limit",
            "lineno": 37,
            "endlineno": 49,
            "docstring": {
              "value": "Increase the CSV field size limit to the maximum possible.",
              "lineno": 38,
              "endlineno": 40
            },
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [],
            "returns": null
          },
          {
            "kind": "function",
            "name": "find_spatialite",
            "lineno": 52,
            "endlineno": 77,
            "docstring": {
              "value": "The ``find_spatialite()`` function searches for the `SpatiaLite <https://www.gaia-gis.it/fossil/libspatialite/index>`__\nSQLite extension in some common places. It returns a string path to the location, or ``None`` if SpatiaLite was not found.\n\nYou can use it in code like this:\n\n.. code-block:: python\n\n    from sqlite_utils import Database\n    from sqlite_utils.utils import find_spatialite\n\n    db = Database(\"mydb.db\")\n    spatialite = find_spatialite()\n    if spatialite:\n        db.conn.enable_load_extension(True)\n        db.conn.load_extension(spatialite)\n\n    # or use with db.init_spatialite like this\n    db.init_spatialite(find_spatialite())",
              "lineno": 53,
              "endlineno": 73
            },
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [],
            "returns": [
              {
                "source": "Optional",
                "full": "typing.Optional"
              },
              "[",
              {
                "source": "str",
                "full": "str"
              },
              "]"
            ]
          },
          {
            "kind": "function",
            "name": "suggest_column_types",
            "lineno": 80,
            "endlineno": 85,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "records",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "types_for_column_types",
            "lineno": 88,
            "endlineno": 112,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "all_column_types",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "column_affinity",
            "lineno": 115,
            "endlineno": 131,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "column_type",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "decode_base64_values",
            "lineno": 134,
            "endlineno": 145,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "doc",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "class",
            "name": "UpdateWrapper",
            "lineno": 148,
            "endlineno": 156,
            "labels": [],
            "members": [
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 149,
                "endlineno": 151,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "wrapped",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "update",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "_wrapped",
                "lineno": 150,
                "endlineno": 150,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "wrapped"
              },
              {
                "kind": "attribute",
                "name": "_update",
                "lineno": 151,
                "endlineno": 151,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "update"
              },
              {
                "kind": "function",
                "name": "__iter__",
                "lineno": 153,
                "endlineno": 156,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              }
            ],
            "bases": [],
            "decorators": []
          },
          {
            "kind": "function",
            "name": "file_progress",
            "lineno": 159,
            "endlineno": 175,
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "contextlib.contextmanager",
                "lineno": 159,
                "endlineno": 159
              }
            ],
            "parameters": [
              {
                "name": "file",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "silent",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "**kwargs",
                "annotation": null,
                "kind": "variadic keyword",
                "default": "{}"
              }
            ],
            "returns": null
          },
          {
            "kind": "class",
            "name": "Format",
            "lineno": 178,
            "endlineno": 182,
            "labels": [],
            "members": [
              {
                "kind": "attribute",
                "name": "CSV",
                "lineno": 179,
                "endlineno": 179,
                "labels": [
                  "class-attribute"
                ],
                "members": [],
                "value": "1"
              },
              {
                "kind": "attribute",
                "name": "TSV",
                "lineno": 180,
                "endlineno": 180,
                "labels": [
                  "class-attribute"
                ],
                "members": [],
                "value": "2"
              },
              {
                "kind": "attribute",
                "name": "JSON",
                "lineno": 181,
                "endlineno": 181,
                "labels": [
                  "class-attribute"
                ],
                "members": [],
                "value": "3"
              },
              {
                "kind": "attribute",
                "name": "NL",
                "lineno": 182,
                "endlineno": 182,
                "labels": [
                  "class-attribute"
                ],
                "members": [],
                "value": "4"
              }
            ],
            "bases": [
              [
                {
                  "source": "enum",
                  "full": "enum"
                },
                ".",
                {
                  "source": "Enum",
                  "full": "enum.Enum"
                }
              ]
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "RowsFromFileError",
            "lineno": 185,
            "endlineno": 186,
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "RowsFromFileBadJSON",
            "lineno": 189,
            "endlineno": 190,
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "RowsFromFileError",
                "full": "sqlite_utils.utils.RowsFromFileError"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "RowError",
            "lineno": 193,
            "endlineno": 194,
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "function",
            "name": "_extra_key_strategy",
            "lineno": 197,
            "endlineno": 219,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "reader",
                "annotation": [
                  {
                    "source": "Iterable",
                    "full": "typing.Iterable"
                  },
                  "[",
                  {
                    "source": "dict",
                    "full": "dict"
                  },
                  "]"
                ],
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore_extras",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "bool",
                    "full": "bool"
                  },
                  "]"
                ],
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "extras_key",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ],
                "kind": "positional or keyword",
                "default": "None"
              }
            ],
            "returns": [
              {
                "source": "Iterable",
                "full": "typing.Iterable"
              },
              "[",
              {
                "source": "dict",
                "full": "dict"
              },
              "]"
            ]
          },
          {
            "kind": "function",
            "name": "rows_from_file",
            "lineno": 222,
            "endlineno": 315,
            "docstring": {
              "value": "Load a sequence of dictionaries from a file-like object containing one of four different formats.\n\n.. code-block:: python\n\n    from sqlite_utils.utils import rows_from_file\n    import io\n\n    rows, format = rows_from_file(io.StringIO(\"id,name\\n1,Cleo\")))\n    print(list(rows), format)\n    # Outputs [{'id': '1', 'name': 'Cleo'}] Format.CSV\n\nThis defaults to attempting to automatically detect the format of the data, or you can pass in an\nexplicit format using the format= option.\n\nReturns a tuple of ``(rows_generator, format_used)`` where ``rows_generator`` can be iterated over\nto return dictionaries, while ``format_used`` is a value from the ``sqlite_utils.utils.Format`` enum:\n\n.. code-block:: python\n\n    class Format(enum.Enum):\n        CSV = 1\n        TSV = 2\n        JSON = 3\n        NL = 4\n\nIf a CSV or TSV file includes rows with more fields than are declared in the header a\n``sqlite_utils.utils.RowError`` exception will be raised when you loop over the generator.\n\nYou can instead ignore the extra data by passing ``ignore_extras=True``.\n\nOr pass ``extras_key=\"rest\"`` to put those additional values in a list in a key called ``rest``.\n\n:param fp: a file-like object containing binary data\n:param format: the format to use - omit this to detect the format\n:param dialect: the CSV dialect to use - omit this to detect the dialect\n:param encoding: the character encoding to use when reading CSV/TSV data\n:param ignore_extras: ignore any extra fields on rows\n:param extras_key: put any extra fields in a list with this key",
              "lineno": 230,
              "endlineno": 269
            },
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "fp",
                "annotation": {
                  "source": "BinaryIO",
                  "full": "typing.BinaryIO"
                },
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "format",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "Format",
                    "full": "sqlite_utils.utils.Format"
                  },
                  "]"
                ],
                "kind": "positional or keyword",
                "default": "None"
              },
              {
                "name": "dialect",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  [
                    {
                      "source": "Type",
                      "full": "typing.Type"
                    },
                    "[",
                    [
                      {
                        "source": "csv",
                        "full": "csv"
                      },
                      ".",
                      {
                        "source": "Dialect",
                        "full": "csv.Dialect"
                      }
                    ],
                    "]"
                  ],
                  "]"
                ],
                "kind": "positional or keyword",
                "default": "None"
              },
              {
                "name": "encoding",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ],
                "kind": "positional or keyword",
                "default": "None"
              },
              {
                "name": "ignore_extras",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "bool",
                    "full": "bool"
                  },
                  "]"
                ],
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "extras_key",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ],
                "kind": "positional or keyword",
                "default": "None"
              }
            ],
            "returns": [
              {
                "source": "Tuple",
                "full": "typing.Tuple"
              },
              "[",
              [
                [
                  {
                    "source": "Iterable",
                    "full": "typing.Iterable"
                  },
                  "[",
                  {
                    "source": "dict",
                    "full": "dict"
                  },
                  "]"
                ],
                ", ",
                {
                  "source": "Format",
                  "full": "sqlite_utils.utils.Format"
                }
              ],
              "]"
            ]
          },
          {
            "kind": "class",
            "name": "TypeTracker",
            "lineno": 318,
            "endlineno": 331,
            "labels": [],
            "members": [
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 319,
                "endlineno": 320,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "trackers",
                "lineno": 320,
                "endlineno": 320,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "{}"
              },
              {
                "kind": "function",
                "name": "wrap",
                "lineno": 322,
                "endlineno": 327,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "iterator",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "types",
                "lineno": 329,
                "endlineno": 331,
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 329,
                    "endlineno": 329
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              }
            ],
            "bases": [],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "ValueTracker",
            "lineno": 334,
            "endlineno": 380,
            "labels": [],
            "members": [
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 335,
                "endlineno": 336,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "couldbe",
                "lineno": 336,
                "endlineno": 336,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "{key: getattr(self, 'test_' + key) for key in self.get_tests()}"
              },
              {
                "kind": "function",
                "name": "get_tests",
                "lineno": 338,
                "endlineno": 344,
                "labels": [
                  "classmethod"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "classmethod",
                    "lineno": 338,
                    "endlineno": 338
                  }
                ],
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "test_integer",
                "lineno": 346,
                "endlineno": 351,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "value",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "test_float",
                "lineno": 353,
                "endlineno": 358,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "value",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "__repr__",
                "lineno": 360,
                "endlineno": 361,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "guessed_type",
                "lineno": 363,
                "endlineno": 370,
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 363,
                    "endlineno": 363
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "evaluate",
                "lineno": 372,
                "endlineno": 380,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "value",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              }
            ],
            "bases": [],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "NullProgressBar",
            "lineno": 383,
            "endlineno": 391,
            "labels": [],
            "members": [
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 384,
                "endlineno": 385,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "*args",
                    "annotation": null,
                    "kind": "variadic positional",
                    "default": "()"
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "args",
                "lineno": 385,
                "endlineno": 385,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "args"
              },
              {
                "kind": "function",
                "name": "__iter__",
                "lineno": 387,
                "endlineno": 388,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "update",
                "lineno": 390,
                "endlineno": 391,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "value",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              }
            ],
            "bases": [],
            "decorators": []
          },
          {
            "kind": "function",
            "name": "progressbar",
            "lineno": 394,
            "endlineno": 401,
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "contextlib.contextmanager",
                "lineno": 394,
                "endlineno": 394
              }
            ],
            "parameters": [
              {
                "name": "*args",
                "annotation": null,
                "kind": "variadic positional",
                "default": "()"
              },
              {
                "name": "**kwargs",
                "annotation": null,
                "kind": "variadic keyword",
                "default": "{}"
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_compile_code",
            "lineno": 404,
            "endlineno": 438,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "code",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "imports",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "variable",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "'value'"
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "chunks",
            "lineno": 441,
            "endlineno": 444,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "sequence",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "size",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "hash_record",
            "lineno": 447,
            "endlineno": 475,
            "docstring": {
              "value": "``record`` should be a Python dictionary. Returns a sha1 hash of the\nkeys and values in that record.\n\nIf ``keys=`` is provided, uses just those keys to generate the hash.\n\nExample usage::\n\n    from sqlite_utils.utils import hash_record\n\n    hashed = hash_record({\"name\": \"Cleo\", \"twitter\": \"CleoPaws\"})\n    # Or with the keys= option:\n    hashed = hash_record(\n        {\"name\": \"Cleo\", \"twitter\": \"CleoPaws\", \"age\": 7},\n        keys=(\"name\", \"twitter\")\n    )\n\n:param record: Record to generate a hash for\n:param keys: Subset of keys to use for that hash",
              "lineno": 448,
              "endlineno": 467
            },
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "record",
                "annotation": {
                  "source": "Dict",
                  "full": "typing.Dict"
                },
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "keys",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  [
                    {
                      "source": "Iterable",
                      "full": "typing.Iterable"
                    },
                    "[",
                    {
                      "source": "str",
                      "full": "str"
                    },
                    "]"
                  ],
                  "]"
                ],
                "kind": "positional or keyword",
                "default": "None"
              }
            ],
            "returns": null
          }
        ],
        "filepath": "/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/sqlite_utils/utils.py"
      },
      {
        "kind": "module",
        "name": "__main__",
        "labels": [],
        "members": [
          {
            "kind": "alias",
            "name": "cli",
            "target_path": "sqlite_utils.cli.cli",
            "lineno": 1,
            "endlineno": 1
          }
        ],
        "filepath": "/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/sqlite_utils/__main__.py"
      },
      {
        "kind": "module",
        "name": "cli",
        "labels": [],
        "members": [
          {
            "kind": "alias",
            "name": "base64",
            "target_path": "base64",
            "lineno": 1,
            "endlineno": 1
          },
          {
            "kind": "alias",
            "name": "click",
            "target_path": "click",
            "lineno": 2,
            "endlineno": 2
          },
          {
            "kind": "alias",
            "name": "DefaultGroup",
            "target_path": "click_default_group.DefaultGroup",
            "lineno": 3,
            "endlineno": 3
          },
          {
            "kind": "alias",
            "name": "datetime",
            "target_path": "datetime.datetime",
            "lineno": 4,
            "endlineno": 4
          },
          {
            "kind": "alias",
            "name": "hashlib",
            "target_path": "hashlib",
            "lineno": 5,
            "endlineno": 5
          },
          {
            "kind": "alias",
            "name": "pathlib",
            "target_path": "pathlib",
            "lineno": 6,
            "endlineno": 6
          },
          {
            "kind": "alias",
            "name": "sqlite_utils",
            "target_path": "sqlite_utils",
            "lineno": 7,
            "endlineno": 7
          },
          {
            "kind": "alias",
            "name": "AlterError",
            "target_path": "sqlite_utils.db.AlterError",
            "lineno": 8,
            "endlineno": 8
          },
          {
            "kind": "alias",
            "name": "BadMultiValues",
            "target_path": "sqlite_utils.db.BadMultiValues",
            "lineno": 8,
            "endlineno": 8
          },
          {
            "kind": "alias",
            "name": "DescIndex",
            "target_path": "sqlite_utils.db.DescIndex",
            "lineno": 8,
            "endlineno": 8
          },
          {
            "kind": "alias",
            "name": "maximize_csv_field_size_limit",
            "target_path": "sqlite_utils.utils.maximize_csv_field_size_limit",
            "lineno": 9,
            "endlineno": 9
          },
          {
            "kind": "alias",
            "name": "recipes",
            "target_path": "sqlite_utils.recipes",
            "lineno": 10,
            "endlineno": 10
          },
          {
            "kind": "alias",
            "name": "textwrap",
            "target_path": "textwrap",
            "lineno": 11,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "inspect",
            "target_path": "inspect",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "io",
            "target_path": "io",
            "lineno": 13,
            "endlineno": 13
          },
          {
            "kind": "alias",
            "name": "itertools",
            "target_path": "itertools",
            "lineno": 14,
            "endlineno": 14
          },
          {
            "kind": "alias",
            "name": "json",
            "target_path": "json",
            "lineno": 15,
            "endlineno": 15
          },
          {
            "kind": "alias",
            "name": "os",
            "target_path": "os",
            "lineno": 16,
            "endlineno": 16
          },
          {
            "kind": "alias",
            "name": "sys",
            "target_path": "sys",
            "lineno": 17,
            "endlineno": 17
          },
          {
            "kind": "alias",
            "name": "csv_std",
            "target_path": "csv",
            "lineno": 18,
            "endlineno": 18
          },
          {
            "kind": "alias",
            "name": "tabulate",
            "target_path": "tabulate",
            "lineno": 19,
            "endlineno": 19
          },
          {
            "kind": "alias",
            "name": "_compile_code",
            "target_path": "sqlite_utils.utils._compile_code",
            "lineno": 20,
            "endlineno": 31
          },
          {
            "kind": "alias",
            "name": "chunks",
            "target_path": "sqlite_utils.utils.chunks",
            "lineno": 20,
            "endlineno": 31
          },
          {
            "kind": "alias",
            "name": "file_progress",
            "target_path": "sqlite_utils.utils.file_progress",
            "lineno": 20,
            "endlineno": 31
          },
          {
            "kind": "alias",
            "name": "find_spatialite",
            "target_path": "sqlite_utils.utils.find_spatialite",
            "lineno": 20,
            "endlineno": 31
          },
          {
            "kind": "alias",
            "name": "sqlite3",
            "target_path": "sqlite_utils.utils.sqlite3",
            "lineno": 20,
            "endlineno": 31
          },
          {
            "kind": "alias",
            "name": "decode_base64_values",
            "target_path": "sqlite_utils.utils.decode_base64_values",
            "lineno": 20,
            "endlineno": 31
          },
          {
            "kind": "alias",
            "name": "progressbar",
            "target_path": "sqlite_utils.utils.progressbar",
            "lineno": 20,
            "endlineno": 31
          },
          {
            "kind": "alias",
            "name": "rows_from_file",
            "target_path": "sqlite_utils.utils.rows_from_file",
            "lineno": 20,
            "endlineno": 31
          },
          {
            "kind": "alias",
            "name": "Format",
            "target_path": "sqlite_utils.utils.Format",
            "lineno": 20,
            "endlineno": 31
          },
          {
            "kind": "alias",
            "name": "TypeTracker",
            "target_path": "sqlite_utils.utils.TypeTracker",
            "lineno": 20,
            "endlineno": 31
          },
          {
            "kind": "attribute",
            "name": "CONTEXT_SETTINGS",
            "lineno": 34,
            "endlineno": 34,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "dict(help_option_names=['-h', '--help'])"
          },
          {
            "kind": "attribute",
            "name": "VALID_COLUMN_TYPES",
            "lineno": 36,
            "endlineno": 36,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "('INTEGER', 'TEXT', 'FLOAT', 'BLOB')"
          },
          {
            "kind": "attribute",
            "name": "UNICODE_ERROR",
            "lineno": 38,
            "endlineno": 48,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "\"\\n{}\\n\\nThe input you provided uses a character encoding other than utf-8.\\n\\nYou can fix this by passing the --encoding= option with the encoding of the file.\\n\\nIf you do not know the encoding, running 'file filename.csv' may tell you.\\n\\nIt's often worth trying: --encoding=latin-1\\n\".strip()"
          },
          {
            "kind": "function",
            "name": "output_options",
            "lineno": 53,
            "endlineno": 89,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "fn",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "load_extension_option",
            "lineno": 92,
            "endlineno": 97,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "fn",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "cli",
            "lineno": 100,
            "endlineno": 109,
            "docstring": {
              "value": "Commands for interacting with a SQLite database",
              "lineno": 108,
              "endlineno": 108
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "click.group(cls=DefaultGroup, default='query', default_if_no_args=True, context_settings=CONTEXT_SETTINGS)",
                "lineno": 100,
                "endlineno": 105
              },
              {
                "value": "click.version_option()",
                "lineno": 106,
                "endlineno": 106
              }
            ],
            "parameters": [],
            "returns": null
          },
          {
            "kind": "function",
            "name": "tables",
            "lineno": 112,
            "endlineno": 205,
            "docstring": {
              "value": "List the tables in the database\n\nExample:\n\n\b\n    sqlite-utils tables trees.db",
              "lineno": 159,
              "endlineno": 165
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 112,
                "endlineno": 112
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 113,
                "endlineno": 117
              },
              {
                "value": "click.option('--fts4', help='Just show FTS4 enabled tables', default=False, is_flag=True)",
                "lineno": 118,
                "endlineno": 120
              },
              {
                "value": "click.option('--fts5', help='Just show FTS5 enabled tables', default=False, is_flag=True)",
                "lineno": 121,
                "endlineno": 123
              },
              {
                "value": "click.option('--counts', help='Include row counts per table', default=False, is_flag=True)",
                "lineno": 124,
                "endlineno": 126
              },
              {
                "value": "output_options",
                "lineno": 127,
                "endlineno": 127
              },
              {
                "value": "click.option('--columns', help='Include list of columns for each table', is_flag=True, default=False)",
                "lineno": 128,
                "endlineno": 133
              },
              {
                "value": "click.option('--schema', help='Include schema for each table', is_flag=True, default=False)",
                "lineno": 134,
                "endlineno": 139
              },
              {
                "value": "load_extension_option",
                "lineno": 140,
                "endlineno": 140
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fts4",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fts5",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "counts",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "columns",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "schema",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "views",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "views",
            "lineno": 208,
            "endlineno": 270,
            "docstring": {
              "value": "List the views in the database\n\nExample:\n\n\b\n    sqlite-utils views trees.db",
              "lineno": 246,
              "endlineno": 252
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 208,
                "endlineno": 208
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 209,
                "endlineno": 213
              },
              {
                "value": "click.option('--counts', help='Include row counts per view', default=False, is_flag=True)",
                "lineno": 214,
                "endlineno": 216
              },
              {
                "value": "output_options",
                "lineno": 217,
                "endlineno": 217
              },
              {
                "value": "click.option('--columns', help='Include list of columns for each view', is_flag=True, default=False)",
                "lineno": 218,
                "endlineno": 223
              },
              {
                "value": "click.option('--schema', help='Include schema for each view', is_flag=True, default=False)",
                "lineno": 224,
                "endlineno": 229
              },
              {
                "value": "load_extension_option",
                "lineno": 230,
                "endlineno": 230
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "counts",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "columns",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "schema",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "optimize",
            "lineno": 273,
            "endlineno": 298,
            "docstring": {
              "value": "Optimize all full-text search tables and then run VACUUM - should shrink the database file\n\nExample:\n\n\b\n    sqlite-utils optimize chickens.db",
              "lineno": 283,
              "endlineno": 289
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 273,
                "endlineno": 273
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 274,
                "endlineno": 278
              },
              {
                "value": "click.argument('tables', nargs=-1)",
                "lineno": 279,
                "endlineno": 279
              },
              {
                "value": "click.option('--no-vacuum', help=\"Don't run VACUUM\", default=False, is_flag=True)",
                "lineno": 280,
                "endlineno": 280
              },
              {
                "value": "load_extension_option",
                "lineno": 281,
                "endlineno": 281
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tables",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_vacuum",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "rebuild_fts",
            "lineno": 301,
            "endlineno": 323,
            "docstring": {
              "value": "Rebuild all or specific full-text search tables\n\nExample:\n\n\b\n    sqlite-utils rebuild-fts chickens.db chickens",
              "lineno": 310,
              "endlineno": 316
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='rebuild-fts')",
                "lineno": 301,
                "endlineno": 301
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 302,
                "endlineno": 306
              },
              {
                "value": "click.argument('tables', nargs=-1)",
                "lineno": 307,
                "endlineno": 307
              },
              {
                "value": "load_extension_option",
                "lineno": 308,
                "endlineno": 308
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tables",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "analyze",
            "lineno": 326,
            "endlineno": 349,
            "docstring": {
              "value": "Run ANALYZE against the whole database, or against specific named indexes and tables\n\nExample:\n\n\b\n    sqlite-utils analyze chickens.db",
              "lineno": 334,
              "endlineno": 340
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 326,
                "endlineno": 326
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 327,
                "endlineno": 331
              },
              {
                "value": "click.argument('names', nargs=-1)",
                "lineno": 332,
                "endlineno": 332
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "names",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "vacuum",
            "lineno": 352,
            "endlineno": 366,
            "docstring": {
              "value": "Run VACUUM against the database\n\nExample:\n\n\b\n    sqlite-utils vacuum chickens.db",
              "lineno": 359,
              "endlineno": 365
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 352,
                "endlineno": 352
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 353,
                "endlineno": 357
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "dump",
            "lineno": 369,
            "endlineno": 387,
            "docstring": {
              "value": "Output a SQL dump of the schema and full contents of the database\n\nExample:\n\n\b\n    sqlite-utils dump chickens.db",
              "lineno": 377,
              "endlineno": 383
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 369,
                "endlineno": 369
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 370,
                "endlineno": 374
              },
              {
                "value": "load_extension_option",
                "lineno": 375,
                "endlineno": 375
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "add_column",
            "lineno": 390,
            "endlineno": 435,
            "docstring": {
              "value": "Add a column to the specified table\n\nExample:\n\n\b\n    sqlite-utils add-column chickens.db chickens weight float",
              "lineno": 424,
              "endlineno": 430
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='add-column')",
                "lineno": 390,
                "endlineno": 390
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 391,
                "endlineno": 395
              },
              {
                "value": "click.argument('table')",
                "lineno": 396,
                "endlineno": 396
              },
              {
                "value": "click.argument('col_name')",
                "lineno": 397,
                "endlineno": 397
              },
              {
                "value": "click.argument('col_type', type=click.Choice(['integer', 'float', 'blob', 'text', 'INTEGER', 'FLOAT', 'BLOB', 'TEXT']), required=False)",
                "lineno": 398,
                "endlineno": 404
              },
              {
                "value": "click.option('--fk', type=str, required=False, help='Table to reference as a foreign key')",
                "lineno": 405,
                "endlineno": 407
              },
              {
                "value": "click.option('--fk-col', type=str, required=False, help='Referenced column on that foreign key table - if omitted will automatically use the primary key')",
                "lineno": 408,
                "endlineno": 413
              },
              {
                "value": "click.option('--not-null-default', type=str, required=False, help=\"Add NOT NULL DEFAULT 'TEXT' constraint\")",
                "lineno": 414,
                "endlineno": 419
              },
              {
                "value": "load_extension_option",
                "lineno": 420,
                "endlineno": 420
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "col_name",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "col_type",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fk",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fk_col",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "not_null_default",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "add_foreign_key",
            "lineno": 438,
            "endlineno": 471,
            "docstring": {
              "value": "Add a new foreign key constraint to an existing table\n\nExample:\n\n    sqlite-utils add-foreign-key my.db books author_id authors id\n\nWARNING: Could corrupt your database! Back up your database file first.",
              "lineno": 457,
              "endlineno": 465
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='add-foreign-key')",
                "lineno": 438,
                "endlineno": 438
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 439,
                "endlineno": 443
              },
              {
                "value": "click.argument('table')",
                "lineno": 444,
                "endlineno": 444
              },
              {
                "value": "click.argument('column')",
                "lineno": 445,
                "endlineno": 445
              },
              {
                "value": "click.argument('other_table', required=False)",
                "lineno": 446,
                "endlineno": 446
              },
              {
                "value": "click.argument('other_column', required=False)",
                "lineno": 447,
                "endlineno": 447
              },
              {
                "value": "click.option('--ignore', is_flag=True, help='If foreign key already exists, do nothing')",
                "lineno": 448,
                "endlineno": 452
              },
              {
                "value": "load_extension_option",
                "lineno": 453,
                "endlineno": 453
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "other_table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "other_column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "add_foreign_keys",
            "lineno": 474,
            "endlineno": 505,
            "docstring": {
              "value": "Add multiple new foreign key constraints to a database\n\nExample:\n\n\b\n    sqlite-utils add-foreign-keys my.db \\\n        books author_id authors id \\\n        authors country_id countries id",
              "lineno": 483,
              "endlineno": 492
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='add-foreign-keys')",
                "lineno": 474,
                "endlineno": 474
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 475,
                "endlineno": 479
              },
              {
                "value": "click.argument('foreign_key', nargs=-1)",
                "lineno": 480,
                "endlineno": 480
              },
              {
                "value": "load_extension_option",
                "lineno": 481,
                "endlineno": 481
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "foreign_key",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "index_foreign_keys",
            "lineno": 508,
            "endlineno": 526,
            "docstring": {
              "value": "Ensure every foreign key column has an index on it\n\nExample:\n\n\b\n    sqlite-utils index-foreign-keys chickens.db",
              "lineno": 516,
              "endlineno": 523
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='index-foreign-keys')",
                "lineno": 508,
                "endlineno": 508
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 509,
                "endlineno": 513
              },
              {
                "value": "load_extension_option",
                "lineno": 514,
                "endlineno": 514
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "create_index",
            "lineno": 529,
            "endlineno": 581,
            "docstring": {
              "value": "Add an index to the specified table for the specified columns\n\nExample:\n\n\b\n    sqlite-utils create-index chickens.db chickens name\n\nTo create an index in descending order:\n\n\b\n    sqlite-utils create-index chickens.db chickens -- -name",
              "lineno": 554,
              "endlineno": 566
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='create-index')",
                "lineno": 529,
                "endlineno": 529
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 530,
                "endlineno": 534
              },
              {
                "value": "click.argument('table')",
                "lineno": 535,
                "endlineno": 535
              },
              {
                "value": "click.argument('column', nargs=-1, required=True)",
                "lineno": 536,
                "endlineno": 536
              },
              {
                "value": "click.option('--name', help='Explicit name for the new index')",
                "lineno": 537,
                "endlineno": 537
              },
              {
                "value": "click.option('--unique', help='Make this a unique index', default=False, is_flag=True)",
                "lineno": 538,
                "endlineno": 538
              },
              {
                "value": "click.option('--if-not-exists', help='Ignore if index already exists', default=False, is_flag=True)",
                "lineno": 539,
                "endlineno": 544
              },
              {
                "value": "click.option('--analyze', help='Run ANALYZE after creating the index', is_flag=True)",
                "lineno": 545,
                "endlineno": 549
              },
              {
                "value": "load_extension_option",
                "lineno": 550,
                "endlineno": 550
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "name",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "unique",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "if_not_exists",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "analyze",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "enable_fts",
            "lineno": 584,
            "endlineno": 626,
            "docstring": {
              "value": "Enable full-text search for specific table and columns\"\n\nExample:\n\n\b\n    sqlite-utils enable-fts chickens.db chickens name",
              "lineno": 605,
              "endlineno": 611
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='enable-fts')",
                "lineno": 584,
                "endlineno": 584
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 585,
                "endlineno": 589
              },
              {
                "value": "click.argument('table')",
                "lineno": 590,
                "endlineno": 590
              },
              {
                "value": "click.argument('column', nargs=-1, required=True)",
                "lineno": 591,
                "endlineno": 591
              },
              {
                "value": "click.option('--fts4', help='Use FTS4', default=False, is_flag=True)",
                "lineno": 592,
                "endlineno": 592
              },
              {
                "value": "click.option('--fts5', help='Use FTS5', default=False, is_flag=True)",
                "lineno": 593,
                "endlineno": 593
              },
              {
                "value": "click.option('--tokenize', help='Tokenizer to use, e.g. porter')",
                "lineno": 594,
                "endlineno": 594
              },
              {
                "value": "click.option('--create-triggers', help='Create triggers to update the FTS tables when the parent table changes.', default=False, is_flag=True)",
                "lineno": 595,
                "endlineno": 600
              },
              {
                "value": "load_extension_option",
                "lineno": 601,
                "endlineno": 601
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fts4",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fts5",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tokenize",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "create_triggers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "populate_fts",
            "lineno": 629,
            "endlineno": 648,
            "docstring": {
              "value": "Re-populate full-text search for specific table and columns\n\nExample:\n\n\b\n    sqlite-utils populate-fts chickens.db chickens name",
              "lineno": 639,
              "endlineno": 645
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='populate-fts')",
                "lineno": 629,
                "endlineno": 629
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 630,
                "endlineno": 634
              },
              {
                "value": "click.argument('table')",
                "lineno": 635,
                "endlineno": 635
              },
              {
                "value": "click.argument('column', nargs=-1, required=True)",
                "lineno": 636,
                "endlineno": 636
              },
              {
                "value": "load_extension_option",
                "lineno": 637,
                "endlineno": 637
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "disable_fts",
            "lineno": 651,
            "endlineno": 669,
            "docstring": {
              "value": "Disable full-text search for specific table\n\nExample:\n\n\b\n    sqlite-utils disable-fts chickens.db chickens",
              "lineno": 660,
              "endlineno": 666
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='disable-fts')",
                "lineno": 651,
                "endlineno": 651
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 652,
                "endlineno": 656
              },
              {
                "value": "click.argument('table')",
                "lineno": 657,
                "endlineno": 657
              },
              {
                "value": "load_extension_option",
                "lineno": 658,
                "endlineno": 658
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "enable_wal",
            "lineno": 672,
            "endlineno": 691,
            "docstring": {
              "value": "Enable WAL for database files\n\nExample:\n\n\b\n    sqlite-utils enable-wal chickens.db",
              "lineno": 681,
              "endlineno": 687
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='enable-wal')",
                "lineno": 672,
                "endlineno": 672
              },
              {
                "value": "click.argument('path', nargs=-1, type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 673,
                "endlineno": 678
              },
              {
                "value": "load_extension_option",
                "lineno": 679,
                "endlineno": 679
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "disable_wal",
            "lineno": 694,
            "endlineno": 713,
            "docstring": {
              "value": "Disable WAL for database files\n\nExample:\n\n\b\n    sqlite-utils disable-wal chickens.db",
              "lineno": 703,
              "endlineno": 709
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='disable-wal')",
                "lineno": 694,
                "endlineno": 694
              },
              {
                "value": "click.argument('path', nargs=-1, type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 695,
                "endlineno": 700
              },
              {
                "value": "load_extension_option",
                "lineno": 701,
                "endlineno": 701
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "enable_counts",
            "lineno": 716,
            "endlineno": 742,
            "docstring": {
              "value": "Configure triggers to update a _counts table with row counts\n\nExample:\n\n\b\n    sqlite-utils enable-counts chickens.db",
              "lineno": 725,
              "endlineno": 731
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='enable-counts')",
                "lineno": 716,
                "endlineno": 716
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 717,
                "endlineno": 721
              },
              {
                "value": "click.argument('tables', nargs=-1)",
                "lineno": 722,
                "endlineno": 722
              },
              {
                "value": "load_extension_option",
                "lineno": 723,
                "endlineno": 723
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tables",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "reset_counts",
            "lineno": 745,
            "endlineno": 762,
            "docstring": {
              "value": "Reset calculated counts in the _counts table\n\nExample:\n\n\b\n    sqlite-utils reset-counts chickens.db",
              "lineno": 753,
              "endlineno": 759
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='reset-counts')",
                "lineno": 745,
                "endlineno": 745
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 746,
                "endlineno": 750
              },
              {
                "value": "load_extension_option",
                "lineno": 751,
                "endlineno": 751
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "attribute",
            "name": "_import_options",
            "lineno": 765,
            "endlineno": 800,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "(click.option('--flatten', is_flag=True, help='Flatten nested JSON objects, so {\"a\": {\"b\": 1}} becomes {\"a_b\": 1}'), click.option('--nl', is_flag=True, help='Expect newline-delimited JSON'), click.option('-c', '--csv', is_flag=True, help='Expect CSV input'), click.option('--tsv', is_flag=True, help='Expect TSV input'), click.option('--lines', is_flag=True, help=\"Treat each line as a single value called 'line'\"), click.option('--text', is_flag=True, help=\"Treat input as a single value called 'text'\"), click.option('--convert', help='Python code to convert each item'), click.option('--import', 'imports', type=str, multiple=True, help='Python modules to import'), click.option('--delimiter', help='Delimiter to use for CSV files'), click.option('--quotechar', help='Quote character to use for CSV/TSV'), click.option('--sniff', is_flag=True, help='Detect delimiter and quote character'), click.option('--no-headers', is_flag=True, help='CSV file has no header row'), click.option('--encoding', help='Character encoding for input, defaults to utf-8'))"
          },
          {
            "kind": "function",
            "name": "import_options",
            "lineno": 803,
            "endlineno": 806,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "fn",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "insert_upsert_options",
            "lineno": 809,
            "endlineno": 867,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "require_pk",
                "annotation": null,
                "kind": "keyword-only",
                "default": "False"
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "insert_upsert_implementation",
            "lineno": 870,
            "endlineno": 1045,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "file",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "pk",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "flatten",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "lines",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "text",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "convert",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "imports",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "delimiter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "quotechar",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sniff",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "encoding",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "batch_size",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "alter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "upsert",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "replace",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "truncate",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "not_null",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "None"
              },
              {
                "name": "default",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "None"
              },
              {
                "name": "detect_types",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "None"
              },
              {
                "name": "analyze",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "None"
              },
              {
                "name": "silent",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "bulk_sql",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "None"
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_flatten",
            "lineno": 1048,
            "endlineno": 1054,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "d",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_find_variables",
            "lineno": 1057,
            "endlineno": 1066,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "tb",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "vars",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "insert",
            "lineno": 1069,
            "endlineno": 1193,
            "docstring": {
              "value": "Insert records from FILE into a table, creating the table if it\ndoes not already exist.\n\nExample:\n\n    echo '{\"name\": \"Lila\"}' | sqlite-utils insert data.db chickens -\n\nBy default the input is expected to be a JSON object or array of objects.\n\n\b\n- Use --nl for newline-delimited JSON objects\n- Use --csv or --tsv for comma-separated or tab-separated input\n- Use --lines to write each incoming line to a column called \"line\"\n- Use --text to write the entire input to a column called \"text\"\n\nYou can also use --convert to pass a fragment of Python code that will\nbe used to convert each input.\n\nYour Python code will be passed a \"row\" variable representing the\nimported row, and can return a modified row.\n\nThis example uses just the name, latitude and longitude columns from\na CSV file, converting name to upper case and latitude and longitude\nto floating point numbers:\n\n\b\n    sqlite-utils insert plants.db plants plants.csv --csv --convert '\n      return {\n        \"name\": row[\"name\"].upper(),\n        \"latitude\": float(row[\"latitude\"]),\n        \"longitude\": float(row[\"longitude\"]),\n      }'\n\nIf you are using --lines your code will be passed a \"line\" variable,\nand for --text a \"text\" variable.\n\nWhen using --text your function can return an iterator of rows to\ninsert. This example inserts one record per word in the input:\n\n\b\n    echo 'A bunch of words' | sqlite-utils insert words.db words - \\\n      --text --convert '({\"word\": w} for w in text.split())'",
              "lineno": 1116,
              "endlineno": 1159
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 1069,
                "endlineno": 1069
              },
              {
                "value": "insert_upsert_options()",
                "lineno": 1070,
                "endlineno": 1070
              },
              {
                "value": "click.option('--ignore', is_flag=True, default=False, help='Ignore records if pk already exists')",
                "lineno": 1071,
                "endlineno": 1073
              },
              {
                "value": "click.option('--replace', is_flag=True, default=False, help='Replace records if pk already exists')",
                "lineno": 1074,
                "endlineno": 1079
              },
              {
                "value": "click.option('--truncate', is_flag=True, default=False, help='Truncate table before inserting records, if table already exists')",
                "lineno": 1080,
                "endlineno": 1085
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "file",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "pk",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "flatten",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "lines",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "text",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "convert",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "imports",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "delimiter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "quotechar",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sniff",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "encoding",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "batch_size",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "alter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "detect_types",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "analyze",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "silent",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "replace",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "truncate",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "not_null",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "default",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "upsert",
            "lineno": 1196,
            "endlineno": 1268,
            "docstring": {
              "value": "Upsert records based on their primary key. Works like 'insert' but if\nan incoming record has a primary key that matches an existing record\nthe existing record will be updated.\n\nExample:\n\n\b\n    echo '[\n        {\"id\": 1, \"name\": \"Lila\"},\n        {\"id\": 2, \"name\": \"Suna\"}\n    ]' | sqlite-utils upsert data.db chickens - --pk id",
              "lineno": 1225,
              "endlineno": 1237
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 1196,
                "endlineno": 1196
              },
              {
                "value": "insert_upsert_options(require_pk=True)",
                "lineno": 1197,
                "endlineno": 1197
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "file",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "pk",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "flatten",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "lines",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "text",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "convert",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "imports",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "batch_size",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "delimiter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "quotechar",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sniff",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "encoding",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "alter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "not_null",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "default",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "detect_types",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "analyze",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "silent",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "bulk",
            "lineno": 1271,
            "endlineno": 1345,
            "docstring": {
              "value": "Execute parameterized SQL against the provided list of documents.\n\nExample:\n\n\b\n    echo '[\n        {\"id\": 1, \"name\": \"Lila2\"},\n        {\"id\": 2, \"name\": \"Suna2\"}\n    ]' | sqlite-utils bulk data.db '\n        update chickens set name = :name where id = :id\n    ' -",
              "lineno": 1302,
              "endlineno": 1314
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 1271,
                "endlineno": 1271
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1272,
                "endlineno": 1276
              },
              {
                "value": "click.argument('sql')",
                "lineno": 1277,
                "endlineno": 1277
              },
              {
                "value": "click.argument('file', type=click.File('rb'), required=True)",
                "lineno": 1278,
                "endlineno": 1278
              },
              {
                "value": "click.option('--batch-size', type=int, default=100, help='Commit every X records')",
                "lineno": 1279,
                "endlineno": 1279
              },
              {
                "value": "import_options",
                "lineno": 1280,
                "endlineno": 1280
              },
              {
                "value": "load_extension_option",
                "lineno": 1281,
                "endlineno": 1281
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sql",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "file",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "batch_size",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "flatten",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "lines",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "text",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "convert",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "imports",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "delimiter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "quotechar",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sniff",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "encoding",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "create_database",
            "lineno": 1348,
            "endlineno": 1381,
            "docstring": {
              "value": "Create a new empty database file\n\nExample:\n\n\b\n    sqlite-utils create-database trees.db",
              "lineno": 1362,
              "endlineno": 1368
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='create-database')",
                "lineno": 1348,
                "endlineno": 1348
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1349,
                "endlineno": 1353
              },
              {
                "value": "click.option('--enable-wal', is_flag=True, help='Enable WAL mode on the created database')",
                "lineno": 1354,
                "endlineno": 1356
              },
              {
                "value": "click.option('--init-spatialite', is_flag=True, help='Enable SpatiaLite on the created database')",
                "lineno": 1357,
                "endlineno": 1359
              },
              {
                "value": "load_extension_option",
                "lineno": 1360,
                "endlineno": 1360
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "enable_wal",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "init_spatialite",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "create_table",
            "lineno": 1384,
            "endlineno": 1465,
            "docstring": {
              "value": "Add a table with the specified columns. Columns should be specified using\nname, type pairs, for example:\n\n\b\n    sqlite-utils create-table my.db people \\\n        id integer \\\n        name text \\\n        height float \\\n        photo blob --pk id",
              "lineno": 1424,
              "endlineno": 1434
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='create-table')",
                "lineno": 1384,
                "endlineno": 1384
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1385,
                "endlineno": 1389
              },
              {
                "value": "click.argument('table')",
                "lineno": 1390,
                "endlineno": 1390
              },
              {
                "value": "click.argument('columns', nargs=-1, required=True)",
                "lineno": 1391,
                "endlineno": 1391
              },
              {
                "value": "click.option('--pk', help='Column to use as primary key')",
                "lineno": 1392,
                "endlineno": 1392
              },
              {
                "value": "click.option('--not-null', multiple=True, help='Columns that should be created as NOT NULL')",
                "lineno": 1393,
                "endlineno": 1397
              },
              {
                "value": "click.option('--default', multiple=True, type=(str, str), help='Default value that should be set for a column')",
                "lineno": 1398,
                "endlineno": 1403
              },
              {
                "value": "click.option('--fk', multiple=True, type=(str, str, str), help='Column, other table, other column to set as a foreign key')",
                "lineno": 1404,
                "endlineno": 1409
              },
              {
                "value": "click.option('--ignore', is_flag=True, help='If table already exists, do nothing')",
                "lineno": 1410,
                "endlineno": 1414
              },
              {
                "value": "click.option('--replace', is_flag=True, help='If table already exists, replace it')",
                "lineno": 1415,
                "endlineno": 1419
              },
              {
                "value": "load_extension_option",
                "lineno": 1420,
                "endlineno": 1420
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "columns",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "pk",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "not_null",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "default",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fk",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "replace",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "drop_table",
            "lineno": 1468,
            "endlineno": 1490,
            "docstring": {
              "value": "Drop the specified table\n\nExample:\n\n\b\n    sqlite-utils drop-table chickens.db chickens",
              "lineno": 1478,
              "endlineno": 1484
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='drop-table')",
                "lineno": 1468,
                "endlineno": 1468
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1469,
                "endlineno": 1473
              },
              {
                "value": "click.argument('table')",
                "lineno": 1474,
                "endlineno": 1474
              },
              {
                "value": "click.option('--ignore', is_flag=True)",
                "lineno": 1475,
                "endlineno": 1475
              },
              {
                "value": "load_extension_option",
                "lineno": 1476,
                "endlineno": 1476
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "create_view",
            "lineno": 1493,
            "endlineno": 1535,
            "docstring": {
              "value": "Create a view for the provided SELECT query\n\nExample:\n\n\b\n    sqlite-utils create-view chickens.db heavy_chickens \\\n      'select * from chickens where weight > 3'",
              "lineno": 1513,
              "endlineno": 1520
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='create-view')",
                "lineno": 1493,
                "endlineno": 1493
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1494,
                "endlineno": 1498
              },
              {
                "value": "click.argument('view')",
                "lineno": 1499,
                "endlineno": 1499
              },
              {
                "value": "click.argument('select')",
                "lineno": 1500,
                "endlineno": 1500
              },
              {
                "value": "click.option('--ignore', is_flag=True, help='If view already exists, do nothing')",
                "lineno": 1501,
                "endlineno": 1505
              },
              {
                "value": "click.option('--replace', is_flag=True, help='If view already exists, replace it')",
                "lineno": 1506,
                "endlineno": 1510
              },
              {
                "value": "load_extension_option",
                "lineno": 1511,
                "endlineno": 1511
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "view",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "select",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "replace",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "drop_view",
            "lineno": 1538,
            "endlineno": 1560,
            "docstring": {
              "value": "Drop the specified view\n\nExample:\n\n\b\n    sqlite-utils drop-view chickens.db heavy_chickens",
              "lineno": 1548,
              "endlineno": 1554
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='drop-view')",
                "lineno": 1538,
                "endlineno": 1538
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1539,
                "endlineno": 1543
              },
              {
                "value": "click.argument('view')",
                "lineno": 1544,
                "endlineno": 1544
              },
              {
                "value": "click.option('--ignore', is_flag=True)",
                "lineno": 1545,
                "endlineno": 1545
              },
              {
                "value": "load_extension_option",
                "lineno": 1546,
                "endlineno": 1546
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "view",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "query",
            "lineno": 1563,
            "endlineno": 1619,
            "docstring": {
              "value": "Execute SQL query and return the results as JSON\n\nExample:\n\n\b\n    sqlite-utils data.db \\\n        \"select * from chickens where age > :age\" \\\n        -p age 1",
              "lineno": 1602,
              "endlineno": 1610
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 1563,
                "endlineno": 1563
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1564,
                "endlineno": 1568
              },
              {
                "value": "click.argument('sql')",
                "lineno": 1569,
                "endlineno": 1569
              },
              {
                "value": "click.option('--attach', type=(str, click.Path(file_okay=True, dir_okay=False, allow_dash=False)), multiple=True, help='Additional databases to attach - specify alias and filepath')",
                "lineno": 1570,
                "endlineno": 1575
              },
              {
                "value": "output_options",
                "lineno": 1576,
                "endlineno": 1576
              },
              {
                "value": "click.option('-r', '--raw', is_flag=True, help='Raw output, first column of first row')",
                "lineno": 1577,
                "endlineno": 1577
              },
              {
                "value": "click.option('-p', '--param', multiple=True, type=(str, str), help='Named :parameters for SQL query')",
                "lineno": 1578,
                "endlineno": 1584
              },
              {
                "value": "load_extension_option",
                "lineno": 1585,
                "endlineno": 1585
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sql",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "attach",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "raw",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "param",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "memory",
            "lineno": 1622,
            "endlineno": 1791,
            "docstring": {
              "value": "Execute SQL query against an in-memory database, optionally populated by imported data\n\nTo import data from CSV, TSV or JSON files pass them on the command-line:\n\n\b\n    sqlite-utils memory one.csv two.json \\\n        \"select * from one join two on one.two_id = two.id\"\n\nFor data piped into the tool from standard input, use \"-\" or \"stdin\":\n\n\b\n    cat animals.csv | sqlite-utils memory - \\\n        \"select * from stdin where species = 'dog'\"\n\nThe format of the data will be automatically detected. You can specify the format\nexplicitly using :json, :csv, :tsv or :nl (for newline-delimited JSON) - for example:\n\n\b\n    cat animals.csv | sqlite-utils memory stdin:csv places.dat:nl \\\n        \"select * from stdin where place_id in (select id from places)\"\n\nUse --schema to view the SQL schema of any imported files:\n\n\b\n    sqlite-utils memory animals.csv --schema",
              "lineno": 1696,
              "endlineno": 1721
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 1622,
                "endlineno": 1622
              },
              {
                "value": "click.argument('paths', type=click.Path(file_okay=True, dir_okay=False, allow_dash=True), required=False, nargs=-1)",
                "lineno": 1623,
                "endlineno": 1628
              },
              {
                "value": "click.argument('sql')",
                "lineno": 1629,
                "endlineno": 1629
              },
              {
                "value": "click.option('--attach', type=(str, click.Path(file_okay=True, dir_okay=False, allow_dash=False)), multiple=True, help='Additional databases to attach - specify alias and filepath')",
                "lineno": 1630,
                "endlineno": 1635
              },
              {
                "value": "click.option('--flatten', is_flag=True, help='Flatten nested JSON objects, so {\"foo\": {\"bar\": 1}} becomes {\"foo_bar\": 1}')",
                "lineno": 1636,
                "endlineno": 1640
              },
              {
                "value": "output_options",
                "lineno": 1641,
                "endlineno": 1641
              },
              {
                "value": "click.option('-r', '--raw', is_flag=True, help='Raw output, first column of first row')",
                "lineno": 1642,
                "endlineno": 1642
              },
              {
                "value": "click.option('-p', '--param', multiple=True, type=(str, str), help='Named :parameters for SQL query')",
                "lineno": 1643,
                "endlineno": 1649
              },
              {
                "value": "click.option('--encoding', help='Character encoding for CSV input, defaults to utf-8')",
                "lineno": 1650,
                "endlineno": 1653
              },
              {
                "value": "click.option('-n', '--no-detect-types', is_flag=True, help='Treat all CSV/TSV columns as TEXT')",
                "lineno": 1654,
                "endlineno": 1659
              },
              {
                "value": "click.option('--schema', is_flag=True, help='Show SQL schema for in-memory database')",
                "lineno": 1660,
                "endlineno": 1660
              },
              {
                "value": "click.option('--dump', is_flag=True, help='Dump SQL for in-memory database')",
                "lineno": 1661,
                "endlineno": 1661
              },
              {
                "value": "click.option('--save', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), help='Save in-memory database to this file')",
                "lineno": 1662,
                "endlineno": 1666
              },
              {
                "value": "click.option('--analyze', is_flag=True, help='Analyze resulting tables and output results')",
                "lineno": 1667,
                "endlineno": 1671
              },
              {
                "value": "load_extension_option",
                "lineno": 1672,
                "endlineno": 1672
              }
            ],
            "parameters": [
              {
                "name": "paths",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sql",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "attach",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "flatten",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "raw",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "param",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "encoding",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_detect_types",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "schema",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "dump",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "save",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "analyze",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_execute_query",
            "lineno": 1794,
            "endlineno": 1828,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "db",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sql",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "param",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "raw",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "search",
            "lineno": 1831,
            "endlineno": 1925,
            "docstring": {
              "value": "Execute a full-text search against this table\n\nExample:\n\n    sqlite-utils search data.db chickens lila",
              "lineno": 1873,
              "endlineno": 1878
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 1831,
                "endlineno": 1831
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1832,
                "endlineno": 1836
              },
              {
                "value": "click.argument('dbtable')",
                "lineno": 1837,
                "endlineno": 1837
              },
              {
                "value": "click.argument('q')",
                "lineno": 1838,
                "endlineno": 1838
              },
              {
                "value": "click.option('-o', '--order', type=str, help=\"Order by ('column' or 'column desc')\")",
                "lineno": 1839,
                "endlineno": 1839
              },
              {
                "value": "click.option('-c', '--column', type=str, multiple=True, help='Columns to return')",
                "lineno": 1840,
                "endlineno": 1840
              },
              {
                "value": "click.option('--limit', type=int, help='Number of rows to return - defaults to everything')",
                "lineno": 1841,
                "endlineno": 1845
              },
              {
                "value": "click.option('--sql', 'show_sql', is_flag=True, help='Show SQL query that would be run')",
                "lineno": 1846,
                "endlineno": 1848
              },
              {
                "value": "click.option('--quote', is_flag=True, help='Apply FTS quoting rules to search term')",
                "lineno": 1849,
                "endlineno": 1849
              },
              {
                "value": "output_options",
                "lineno": 1850,
                "endlineno": 1850
              },
              {
                "value": "load_extension_option",
                "lineno": 1851,
                "endlineno": 1851
              },
              {
                "value": "click.pass_context",
                "lineno": 1852,
                "endlineno": 1852
              }
            ],
            "parameters": [
              {
                "name": "ctx",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "dbtable",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "q",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "order",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "show_sql",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "quote",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "limit",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "rows",
            "lineno": 1928,
            "endlineno": 2007,
            "docstring": {
              "value": "Output all rows in the specified table\n\nExample:\n\n\b\n    sqlite-utils rows trees.db Trees",
              "lineno": 1976,
              "endlineno": 1982
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 1928,
                "endlineno": 1928
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1929,
                "endlineno": 1933
              },
              {
                "value": "click.argument('dbtable')",
                "lineno": 1934,
                "endlineno": 1934
              },
              {
                "value": "click.option('-c', '--column', type=str, multiple=True, help='Columns to return')",
                "lineno": 1935,
                "endlineno": 1935
              },
              {
                "value": "click.option('--where', help='Optional where clause')",
                "lineno": 1936,
                "endlineno": 1936
              },
              {
                "value": "click.option('-p', '--param', multiple=True, type=(str, str), help='Named :parameters for where clause')",
                "lineno": 1937,
                "endlineno": 1943
              },
              {
                "value": "click.option('--limit', type=int, help='Number of rows to return - defaults to everything')",
                "lineno": 1944,
                "endlineno": 1948
              },
              {
                "value": "click.option('--offset', type=int, help='SQL offset to use')",
                "lineno": 1949,
                "endlineno": 1953
              },
              {
                "value": "output_options",
                "lineno": 1954,
                "endlineno": 1954
              },
              {
                "value": "load_extension_option",
                "lineno": 1955,
                "endlineno": 1955
              },
              {
                "value": "click.pass_context",
                "lineno": 1956,
                "endlineno": 1956
              }
            ],
            "parameters": [
              {
                "name": "ctx",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "dbtable",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "where",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "param",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "limit",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "offset",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "triggers",
            "lineno": 2010,
            "endlineno": 2060,
            "docstring": {
              "value": "Show triggers configured in this database\n\nExample:\n\n\b\n    sqlite-utils triggers trees.db",
              "lineno": 2034,
              "endlineno": 2040
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 2010,
                "endlineno": 2010
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2011,
                "endlineno": 2015
              },
              {
                "value": "click.argument('tables', nargs=-1)",
                "lineno": 2016,
                "endlineno": 2016
              },
              {
                "value": "output_options",
                "lineno": 2017,
                "endlineno": 2017
              },
              {
                "value": "load_extension_option",
                "lineno": 2018,
                "endlineno": 2018
              },
              {
                "value": "click.pass_context",
                "lineno": 2019,
                "endlineno": 2019
              }
            ],
            "parameters": [
              {
                "name": "ctx",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tables",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "indexes",
            "lineno": 2063,
            "endlineno": 2127,
            "docstring": {
              "value": "Show indexes for the whole database or specific tables\n\nExample:\n\n\b\n    sqlite-utils indexes trees.db Trees",
              "lineno": 2089,
              "endlineno": 2095
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 2063,
                "endlineno": 2063
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2064,
                "endlineno": 2068
              },
              {
                "value": "click.argument('tables', nargs=-1)",
                "lineno": 2069,
                "endlineno": 2069
              },
              {
                "value": "click.option('--aux', is_flag=True, help='Include auxiliary columns')",
                "lineno": 2070,
                "endlineno": 2070
              },
              {
                "value": "output_options",
                "lineno": 2071,
                "endlineno": 2071
              },
              {
                "value": "load_extension_option",
                "lineno": 2072,
                "endlineno": 2072
              },
              {
                "value": "click.pass_context",
                "lineno": 2073,
                "endlineno": 2073
              }
            ],
            "parameters": [
              {
                "name": "ctx",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tables",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "aux",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "schema",
            "lineno": 2130,
            "endlineno": 2156,
            "docstring": {
              "value": "Show full schema for this database or for specified tables\n\nExample:\n\n\b\n    sqlite-utils schema trees.db",
              "lineno": 2143,
              "endlineno": 2149
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 2130,
                "endlineno": 2130
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2131,
                "endlineno": 2135
              },
              {
                "value": "click.argument('tables', nargs=-1, required=False)",
                "lineno": 2136,
                "endlineno": 2136
              },
              {
                "value": "load_extension_option",
                "lineno": 2137,
                "endlineno": 2137
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tables",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "transform",
            "lineno": 2159,
            "endlineno": 2274,
            "docstring": {
              "value": "Transform a table beyond the capabilities of ALTER TABLE\n\nExample:\n\n\b\n    sqlite-utils transform mydb.db mytable \\\n        --drop column1 \\\n        --rename column2 column_renamed",
              "lineno": 2222,
              "endlineno": 2230
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 2159,
                "endlineno": 2159
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2160,
                "endlineno": 2164
              },
              {
                "value": "click.argument('table')",
                "lineno": 2165,
                "endlineno": 2165
              },
              {
                "value": "click.option('--type', type=(str, click.Choice(['INTEGER', 'TEXT', 'FLOAT', 'BLOB'], case_sensitive=False)), multiple=True, help='Change column type to INTEGER, TEXT, FLOAT or BLOB')",
                "lineno": 2166,
                "endlineno": 2174
              },
              {
                "value": "click.option('--drop', type=str, multiple=True, help='Drop this column')",
                "lineno": 2175,
                "endlineno": 2175
              },
              {
                "value": "click.option('--rename', type=(str, str), multiple=True, help='Rename this column to X')",
                "lineno": 2176,
                "endlineno": 2178
              },
              {
                "value": "click.option('-o', '--column-order', type=str, multiple=True, help='Reorder columns')",
                "lineno": 2179,
                "endlineno": 2179
              },
              {
                "value": "click.option('--not-null', type=str, multiple=True, help='Set this column to NOT NULL')",
                "lineno": 2180,
                "endlineno": 2180
              },
              {
                "value": "click.option('--not-null-false', type=str, multiple=True, help='Remove NOT NULL from this column')",
                "lineno": 2181,
                "endlineno": 2183
              },
              {
                "value": "click.option('--pk', type=str, multiple=True, help='Make this column the primary key')",
                "lineno": 2184,
                "endlineno": 2184
              },
              {
                "value": "click.option('--pk-none', is_flag=True, help='Remove primary key (convert to rowid table)')",
                "lineno": 2185,
                "endlineno": 2187
              },
              {
                "value": "click.option('--default', type=(str, str), multiple=True, help='Set default value for this column')",
                "lineno": 2188,
                "endlineno": 2193
              },
              {
                "value": "click.option('--default-none', type=str, multiple=True, help='Remove default from this column')",
                "lineno": 2194,
                "endlineno": 2196
              },
              {
                "value": "click.option('--drop-foreign-key', type=str, multiple=True, help='Drop foreign key constraint for this column')",
                "lineno": 2197,
                "endlineno": 2202
              },
              {
                "value": "click.option('--sql', is_flag=True, help='Output SQL without executing it')",
                "lineno": 2203,
                "endlineno": 2203
              },
              {
                "value": "load_extension_option",
                "lineno": 2204,
                "endlineno": 2204
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "type",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "drop",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "rename",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column_order",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "not_null",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "not_null_false",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "pk",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "pk_none",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "default",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "default_none",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "drop_foreign_key",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sql",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "extract",
            "lineno": 2277,
            "endlineno": 2320,
            "docstring": {
              "value": "Extract one or more columns into a separate table\n\nExample:\n\n\b\n    sqlite-utils extract trees.db Street_Trees species",
              "lineno": 2305,
              "endlineno": 2311
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 2277,
                "endlineno": 2277
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2278,
                "endlineno": 2282
              },
              {
                "value": "click.argument('table')",
                "lineno": 2283,
                "endlineno": 2283
              },
              {
                "value": "click.argument('columns', nargs=-1, required=True)",
                "lineno": 2284,
                "endlineno": 2284
              },
              {
                "value": "click.option('--table', 'other_table', help='Name of the other table to extract columns to')",
                "lineno": 2285,
                "endlineno": 2287
              },
              {
                "value": "click.option('--fk-column', help='Name of the foreign key column to add to the table')",
                "lineno": 2288,
                "endlineno": 2288
              },
              {
                "value": "click.option('--rename', type=(str, str), multiple=True, help='Rename this column in extracted table')",
                "lineno": 2289,
                "endlineno": 2294
              },
              {
                "value": "load_extension_option",
                "lineno": 2295,
                "endlineno": 2295
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "columns",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "other_table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fk_column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "rename",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "insert_files",
            "lineno": 2323,
            "endlineno": 2468,
            "docstring": {
              "value": "Insert one or more files using BLOB columns in the specified table\n\nExample:\n\n\b\n    sqlite-utils insert-files pics.db images *.gif \\\n        -c name:name \\\n        -c content:content \\\n        -c content_hash:sha256 \\\n        -c created:ctime_iso \\\n        -c modified:mtime_iso \\\n        -c size:size \\\n        --pk name",
              "lineno": 2370,
              "endlineno": 2384
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='insert-files')",
                "lineno": 2323,
                "endlineno": 2323
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2324,
                "endlineno": 2328
              },
              {
                "value": "click.argument('table')",
                "lineno": 2329,
                "endlineno": 2329
              },
              {
                "value": "click.argument('file_or_dir', nargs=-1, required=True, type=click.Path(file_okay=True, dir_okay=True, allow_dash=True))",
                "lineno": 2330,
                "endlineno": 2335
              },
              {
                "value": "click.option('-c', '--column', type=str, multiple=True, help='Column definitions for the table')",
                "lineno": 2336,
                "endlineno": 2342
              },
              {
                "value": "click.option('--pk', type=str, help='Column to use as primary key')",
                "lineno": 2343,
                "endlineno": 2343
              },
              {
                "value": "click.option('--alter', is_flag=True, help='Alter table to add missing columns')",
                "lineno": 2344,
                "endlineno": 2344
              },
              {
                "value": "click.option('--replace', is_flag=True, help='Replace files with matching primary key')",
                "lineno": 2345,
                "endlineno": 2345
              },
              {
                "value": "click.option('--upsert', is_flag=True, help='Upsert files with matching primary key')",
                "lineno": 2346,
                "endlineno": 2346
              },
              {
                "value": "click.option('--name', type=str, help='File name to use')",
                "lineno": 2347,
                "endlineno": 2347
              },
              {
                "value": "click.option('--text', is_flag=True, help='Store file content as TEXT, not BLOB')",
                "lineno": 2348,
                "endlineno": 2348
              },
              {
                "value": "click.option('--encoding', help='Character encoding for input, defaults to utf-8')",
                "lineno": 2349,
                "endlineno": 2352
              },
              {
                "value": "click.option('-s', '--silent', is_flag=True, help=\"Don't show a progress bar\")",
                "lineno": 2353,
                "endlineno": 2353
              },
              {
                "value": "load_extension_option",
                "lineno": 2354,
                "endlineno": 2354
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "file_or_dir",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "pk",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "alter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "replace",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "upsert",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "name",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "text",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "encoding",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "silent",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "analyze_tables",
            "lineno": 2471,
            "endlineno": 2504,
            "docstring": {
              "value": "Analyze the columns in one or more tables\n\nExample:\n\n\b\n    sqlite-utils analyze-tables data.db trees",
              "lineno": 2495,
              "endlineno": 2501
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='analyze-tables')",
                "lineno": 2471,
                "endlineno": 2471
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False, exists=True), required=True)",
                "lineno": 2472,
                "endlineno": 2476
              },
              {
                "value": "click.argument('tables', nargs=-1)",
                "lineno": 2477,
                "endlineno": 2477
              },
              {
                "value": "click.option('-c', '--column', 'columns', type=str, multiple=True, help='Specific columns to analyze')",
                "lineno": 2478,
                "endlineno": 2485
              },
              {
                "value": "click.option('--save', is_flag=True, help='Save results to _analyze_tables table')",
                "lineno": 2486,
                "endlineno": 2486
              },
              {
                "value": "load_extension_option",
                "lineno": 2487,
                "endlineno": 2487
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tables",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "columns",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "save",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_analyze",
            "lineno": 2507,
            "endlineno": 2556,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "db",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tables",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "columns",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "save",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_generate_convert_help",
            "lineno": 2559,
            "endlineno": 2598,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [],
            "returns": null
          },
          {
            "kind": "function",
            "name": "convert",
            "lineno": 2601,
            "endlineno": 2714,
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(help=_generate_convert_help())",
                "lineno": 2601,
                "endlineno": 2601
              },
              {
                "value": "click.argument('db_path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2602,
                "endlineno": 2606
              },
              {
                "value": "click.argument('table', type=str)",
                "lineno": 2607,
                "endlineno": 2607
              },
              {
                "value": "click.argument('columns', type=str, nargs=-1, required=True)",
                "lineno": 2608,
                "endlineno": 2608
              },
              {
                "value": "click.argument('code', type=str)",
                "lineno": 2609,
                "endlineno": 2609
              },
              {
                "value": "click.option('--import', 'imports', type=str, multiple=True, help='Python modules to import')",
                "lineno": 2610,
                "endlineno": 2612
              },
              {
                "value": "click.option('--dry-run', is_flag=True, help='Show results of running this against first 10 rows')",
                "lineno": 2613,
                "endlineno": 2615
              },
              {
                "value": "click.option('--multi', is_flag=True, help='Populate columns for keys in returned dictionary')",
                "lineno": 2616,
                "endlineno": 2618
              },
              {
                "value": "click.option('--where', help='Optional where clause')",
                "lineno": 2619,
                "endlineno": 2619
              },
              {
                "value": "click.option('-p', '--param', multiple=True, type=(str, str), help='Named :parameters for where clause')",
                "lineno": 2620,
                "endlineno": 2626
              },
              {
                "value": "click.option('--output', help='Optional separate column to populate with the output')",
                "lineno": 2627,
                "endlineno": 2627
              },
              {
                "value": "click.option('--output-type', help='Column type to use for the output column', default='text', type=click.Choice(['integer', 'float', 'blob', 'text']))",
                "lineno": 2628,
                "endlineno": 2633
              },
              {
                "value": "click.option('--drop', is_flag=True, help='Drop original column afterwards')",
                "lineno": 2634,
                "endlineno": 2634
              },
              {
                "value": "click.option('-s', '--silent', is_flag=True, help=\"Don't show a progress bar\")",
                "lineno": 2635,
                "endlineno": 2635
              }
            ],
            "parameters": [
              {
                "name": "db_path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "columns",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "code",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "imports",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "dry_run",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "multi",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "where",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "param",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "output",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "output_type",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "drop",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "silent",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "add_geometry_column",
            "lineno": 2717,
            "endlineno": 2790,
            "docstring": {
              "value": "Add a SpatiaLite geometry column to an existing table. Requires SpatiaLite extension.\n\n\n\nBy default, this command will try to load the SpatiaLite extension from usual paths.\nTo load it from a specific path, use --load-extension.",
              "lineno": 2772,
              "endlineno": 2775
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command('add-geometry-column')",
                "lineno": 2717,
                "endlineno": 2717
              },
              {
                "value": "click.argument('db_path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2718,
                "endlineno": 2722
              },
              {
                "value": "click.argument('table', type=str)",
                "lineno": 2723,
                "endlineno": 2723
              },
              {
                "value": "click.argument('column_name', type=str)",
                "lineno": 2724,
                "endlineno": 2724
              },
              {
                "value": "click.option('-t', '--type', 'geometry_type', type=click.Choice(['POINT', 'LINESTRING', 'POLYGON', 'MULTIPOINT', 'MULTILINESTRING', 'MULTIPOLYGON', 'GEOMETRYCOLLECTION', 'GEOMETRY'], case_sensitive=False), default='GEOMETRY', help='Specify a geometry type for this column.', show_default=True)",
                "lineno": 2725,
                "endlineno": 2745
              },
              {
                "value": "click.option('--srid', type=int, default=4326, show_default=True, help='Spatial Reference ID. See https://spatialreference.org for details on specific projections.')",
                "lineno": 2746,
                "endlineno": 2752
              },
              {
                "value": "click.option('--dimensions', 'coord_dimension', type=str, default='XY', help='Coordinate dimensions. Use XYZ for three-dimensional geometries.')",
                "lineno": 2753,
                "endlineno": 2759
              },
              {
                "value": "click.option('--not-null', 'not_null', is_flag=True, help='Add a NOT NULL constraint.')",
                "lineno": 2760,
                "endlineno": 2760
              },
              {
                "value": "load_extension_option",
                "lineno": 2761,
                "endlineno": 2761
              }
            ],
            "parameters": [
              {
                "name": "db_path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column_name",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "geometry_type",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "srid",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "coord_dimension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "not_null",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "create_spatial_index",
            "lineno": 2793,
            "endlineno": 2824,
            "docstring": {
              "value": "Create a spatial index on a SpatiaLite geometry column.\nThe table and geometry column must already exist before trying to add a spatial index.\n\n\n\nBy default, this command will try to load the SpatiaLite extension from usual paths.\nTo load it from a specific path, use --load-extension.",
              "lineno": 2803,
              "endlineno": 2807
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command('create-spatial-index')",
                "lineno": 2793,
                "endlineno": 2793
              },
              {
                "value": "click.argument('db_path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2794,
                "endlineno": 2798
              },
              {
                "value": "click.argument('table', type=str)",
                "lineno": 2799,
                "endlineno": 2799
              },
              {
                "value": "click.argument('column_name', type=str)",
                "lineno": 2800,
                "endlineno": 2800
              },
              {
                "value": "load_extension_option",
                "lineno": 2801,
                "endlineno": 2801
              }
            ],
            "parameters": [
              {
                "name": "db_path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column_name",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_render_common",
            "lineno": 2827,
            "endlineno": 2833,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "title",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "values",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "class",
            "name": "UnicodeDecodeErrorForPath",
            "lineno": 2836,
            "endlineno": 2839,
            "labels": [],
            "members": [
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 2837,
                "endlineno": 2839,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "exception",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "path",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "exception",
                "lineno": 2838,
                "endlineno": 2838,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "exception"
              },
              {
                "kind": "attribute",
                "name": "path",
                "lineno": 2839,
                "endlineno": 2839,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "path"
              }
            ],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "attribute",
            "name": "FILE_COLUMNS",
            "lineno": 2842,
            "endlineno": 2859,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "{'name': lambda p: p.name, 'path': lambda p: str(p), 'fullpath': lambda p: str(p.resolve()), 'sha256': lambda p: hashlib.sha256(p.resolve().read_bytes()).hexdigest(), 'md5': lambda p: hashlib.md5(p.resolve().read_bytes()).hexdigest(), 'mode': lambda p: p.stat().st_mode, 'content': lambda p: p.resolve().read_bytes(), 'mtime': lambda p: p.stat().st_mtime, 'ctime': lambda p: p.stat().st_ctime, 'mtime_int': lambda p: int(p.stat().st_mtime), 'ctime_int': lambda p: int(p.stat().st_ctime), 'mtime_iso': lambda p: datetime.utcfromtimestamp(p.stat().st_mtime).isoformat(), 'ctime_iso': lambda p: datetime.utcfromtimestamp(p.stat().st_ctime).isoformat(), 'size': lambda p: p.stat().st_size, 'stem': lambda p: p.stem, 'suffix': lambda p: p.suffix}"
          },
          {
            "kind": "function",
            "name": "output_rows",
            "lineno": 2862,
            "endlineno": 2887,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "iterator",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "maybe_json",
            "lineno": 2890,
            "endlineno": 2899,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "value",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "json_binary",
            "lineno": 2902,
            "endlineno": 2906,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "value",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "verify_is_dict",
            "lineno": 2909,
            "endlineno": 2914,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "doc",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_load_extensions",
            "lineno": 2917,
            "endlineno": 2923,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "db",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          }
        ],
        "filepath": "/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/sqlite_utils/cli.py"
      },
      {
        "kind": "module",
        "name": "recipes",
        "labels": [],
        "members": [
          {
            "kind": "alias",
            "name": "parser",
            "target_path": "dateutil.parser",
            "lineno": 1,
            "endlineno": 1
          },
          {
            "kind": "alias",
            "name": "json",
            "target_path": "json",
            "lineno": 2,
            "endlineno": 2
          },
          {
            "kind": "attribute",
            "name": "IGNORE",
            "lineno": 4,
            "endlineno": 4,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "object()"
          },
          {
            "kind": "attribute",
            "name": "SET_NULL",
            "lineno": 5,
            "endlineno": 5,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "object()"
          },
          {
            "kind": "function",
            "name": "parsedate",
            "lineno": 8,
            "endlineno": 29,
            "docstring": {
              "value": "Parse a date and convert it to ISO date format: yyyy-mm-dd\n\b\n- dayfirst=True: treat xx as the day in xx/yy/zz\n- yearfirst=True: treat xx as the year in xx/yy/zz\n- errors=r.IGNORE to ignore values that cannot be parsed\n- errors=r.SET_NULL to set values that cannot be parsed to null",
              "lineno": 9,
              "endlineno": 16
            },
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "value",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "dayfirst",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "yearfirst",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "errors",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "None"
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "parsedatetime",
            "lineno": 32,
            "endlineno": 49,
            "docstring": {
              "value": "Parse a datetime and convert it to ISO datetime format: yyyy-mm-ddTHH:MM:SS\n\b\n- dayfirst=True: treat xx as the day in xx/yy/zz\n- yearfirst=True: treat xx as the year in xx/yy/zz\n- errors=r.IGNORE to ignore values that cannot be parsed\n- errors=r.SET_NULL to set values that cannot be parsed to null",
              "lineno": 33,
              "endlineno": 40
            },
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "value",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "dayfirst",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "yearfirst",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "errors",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "None"
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "jsonsplit",
            "lineno": 52,
            "endlineno": 56,
            "docstring": {
              "value": "Convert a string like a,b,c into a JSON array [\"a\", \"b\", \"c\"]",
              "lineno": 53,
              "endlineno": 55
            },
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "value",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "delimiter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "','"
              },
              {
                "name": "type",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "str"
              }
            ],
            "returns": null
          }
        ],
        "filepath": "/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/sqlite_utils/recipes.py"
      },
      {
        "kind": "module",
        "name": "db",
        "labels": [],
        "members": [
          {
            "kind": "alias",
            "name": "chunks",
            "target_path": "sqlite_utils.utils.chunks",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "hash_record",
            "target_path": "sqlite_utils.utils.hash_record",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "sqlite3",
            "target_path": "sqlite_utils.utils.sqlite3",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "OperationalError",
            "target_path": "sqlite_utils.utils.OperationalError",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "suggest_column_types",
            "target_path": "sqlite_utils.utils.suggest_column_types",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "types_for_column_types",
            "target_path": "sqlite_utils.utils.types_for_column_types",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "column_affinity",
            "target_path": "sqlite_utils.utils.column_affinity",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "progressbar",
            "target_path": "sqlite_utils.utils.progressbar",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "find_spatialite",
            "target_path": "sqlite_utils.utils.find_spatialite",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "namedtuple",
            "target_path": "collections.namedtuple",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "Mapping",
            "target_path": "collections.abc.Mapping",
            "lineno": 13,
            "endlineno": 13
          },
          {
            "kind": "alias",
            "name": "contextlib",
            "target_path": "contextlib",
            "lineno": 14,
            "endlineno": 14
          },
          {
            "kind": "alias",
            "name": "datetime",
            "target_path": "datetime",
            "lineno": 15,
            "endlineno": 15
          },
          {
            "kind": "alias",
            "name": "decimal",
            "target_path": "decimal",
            "lineno": 16,
            "endlineno": 16
          },
          {
            "kind": "alias",
            "name": "inspect",
            "target_path": "inspect",
            "lineno": 17,
            "endlineno": 17
          },
          {
            "kind": "alias",
            "name": "itertools",
            "target_path": "itertools",
            "lineno": 18,
            "endlineno": 18
          },
          {
            "kind": "alias",
            "name": "json",
            "target_path": "json",
            "lineno": 19,
            "endlineno": 19
          },
          {
            "kind": "alias",
            "name": "os",
            "target_path": "os",
            "lineno": 20,
            "endlineno": 20
          },
          {
            "kind": "alias",
            "name": "pathlib",
            "target_path": "pathlib",
            "lineno": 21,
            "endlineno": 21
          },
          {
            "kind": "alias",
            "name": "re",
            "target_path": "re",
            "lineno": 22,
            "endlineno": 22
          },
          {
            "kind": "alias",
            "name": "secrets",
            "target_path": "secrets",
            "lineno": 23,
            "endlineno": 23
          },
          {
            "kind": "alias",
            "name": "rank_bm25",
            "target_path": "sqlite_fts4.rank_bm25",
            "lineno": 24,
            "endlineno": 24
          },
          {
            "kind": "alias",
            "name": "textwrap",
            "target_path": "textwrap",
            "lineno": 25,
            "endlineno": 25
          },
          {
            "kind": "alias",
            "name": "cast",
            "target_path": "typing.cast",
            "lineno": 26,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "Any",
            "target_path": "typing.Any",
            "lineno": 26,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "Callable",
            "target_path": "typing.Callable",
            "lineno": 26,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "Dict",
            "target_path": "typing.Dict",
            "lineno": 26,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "Generator",
            "target_path": "typing.Generator",
            "lineno": 26,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "Iterable",
            "target_path": "typing.Iterable",
            "lineno": 26,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "Union",
            "target_path": "typing.Union",
            "lineno": 26,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "Optional",
            "target_path": "typing.Optional",
            "lineno": 26,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "List",
            "target_path": "typing.List",
            "lineno": 26,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "Set",
            "target_path": "typing.Set",
            "lineno": 26,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "Tuple",
            "target_path": "typing.Tuple",
            "lineno": 26,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "uuid",
            "target_path": "uuid",
            "lineno": 39,
            "endlineno": 39
          },
          {
            "kind": "attribute",
            "name": "SQLITE_MAX_VARS",
            "lineno": 41,
            "endlineno": 41,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "999"
          },
          {
            "kind": "attribute",
            "name": "_quote_fts_re",
            "lineno": 43,
            "endlineno": 43,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "re.compile('\\\\s+|(\".*?\")')"
          },
          {
            "kind": "attribute",
            "name": "_virtual_table_using_re",
            "lineno": 45,
            "endlineno": 63,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "re.compile('\\n^ # Start of string\\n\\\\s*CREATE\\\\s+VIRTUAL\\\\s+TABLE\\\\s+ # CREATE VIRTUAL TABLE\\n(\\n    \\'(?P<squoted_table>[^\\']*(?:\\'\\'[^\\']*)*)\\' | # single quoted name\\n    \"(?P<dquoted_table>[^\"]*(?:\"\"[^\"]*)*)\" | # double quoted name\\n    `(?P<backtick_table>[^`]+)`            | # `backtick` quoted name\\n    \\\\[(?P<squarequoted_table>[^\\\\]]+)\\\\]     | # [...] quoted name\\n    (?P<identifier>                          # SQLite non-quoted identifier\\n        [A-Za-z_\\\\u0080-\\\\uffff]  # \\\\u0080-\\\\uffff = \"any character larger than u007f\"\\n        [A-Za-z_\\\\u0080-\\\\uffff0-9\\\\$]* # zero-or-more alphanemuric or $\\n    )\\n)\\n\\\\s+(IF\\\\s+NOT\\\\s+EXISTS\\\\s+)?      # IF NOT EXISTS (optional)\\nUSING\\\\s+(?P<using>\\\\w+)          # for example USING FTS5\\n', re.VERBOSE | re.IGNORECASE)"
          },
          {
            "kind": "alias",
            "name": "pd",
            "target_path": "pandas",
            "lineno": 66,
            "endlineno": 66
          },
          {
            "kind": "alias",
            "name": "np",
            "target_path": "numpy",
            "lineno": 71,
            "endlineno": 71
          },
          {
            "kind": "attribute",
            "name": "Column",
            "lineno": 75,
            "endlineno": 77,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "namedtuple('Column', ('cid', 'name', 'type', 'notnull', 'default_value', 'is_pk'))"
          },
          {
            "kind": "attribute",
            "name": "ColumnDetails",
            "lineno": 100,
            "endlineno": 112,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "namedtuple('ColumnDetails', ('table', 'column', 'total_rows', 'num_null', 'num_blank', 'num_distinct', 'most_common', 'least_common'))"
          },
          {
            "kind": "attribute",
            "name": "ForeignKey",
            "lineno": 141,
            "endlineno": 143,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "namedtuple('ForeignKey', ('table', 'column', 'other_table', 'other_column'))"
          },
          {
            "kind": "attribute",
            "name": "Index",
            "lineno": 144,
            "endlineno": 144,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "namedtuple('Index', ('seq', 'name', 'unique', 'origin', 'partial', 'columns'))"
          },
          {
            "kind": "attribute",
            "name": "XIndex",
            "lineno": 145,
            "endlineno": 145,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "namedtuple('XIndex', ('name', 'columns'))"
          },
          {
            "kind": "attribute",
            "name": "XIndexColumn",
            "lineno": 146,
            "endlineno": 148,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "namedtuple('XIndexColumn', ('seqno', 'cid', 'name', 'desc', 'coll', 'key'))"
          },
          {
            "kind": "attribute",
            "name": "Trigger",
            "lineno": 149,
            "endlineno": 149,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "namedtuple('Trigger', ('name', 'table', 'sql'))"
          },
          {
            "kind": "attribute",
            "name": "ForeignKeysType",
            "lineno": 152,
            "endlineno": 158,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "Union[Iterable[str], Iterable[ForeignKey], Iterable[Tuple[str, str]], Iterable[Tuple[str, str, str]], Iterable[Tuple[str, str, str, str]]]"
          },
          {
            "kind": "class",
            "name": "Default",
            "lineno": 161,
            "endlineno": 162,
            "labels": [],
            "members": [],
            "bases": [],
            "decorators": []
          },
          {
            "kind": "attribute",
            "name": "DEFAULT",
            "lineno": 165,
            "endlineno": 165,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "Default()"
          },
          {
            "kind": "attribute",
            "name": "COLUMN_TYPE_MAPPING",
            "lineno": 167,
            "endlineno": 193,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "{float: 'FLOAT', int: 'INTEGER', bool: 'INTEGER', str: 'TEXT', dict: 'TEXT', tuple: 'TEXT', list: 'TEXT', bytes.__class__: 'BLOB', bytes: 'BLOB', memoryview: 'BLOB', datetime.datetime: 'TEXT', datetime.date: 'TEXT', datetime.time: 'TEXT', decimal.Decimal: 'FLOAT', None.__class__: 'TEXT', uuid.UUID: 'TEXT', 'TEXT': 'TEXT', 'INTEGER': 'INTEGER', 'FLOAT': 'FLOAT', 'BLOB': 'BLOB', 'text': 'TEXT', 'integer': 'INTEGER', 'float': 'FLOAT', 'blob': 'BLOB'}"
          },
          {
            "kind": "class",
            "name": "AlterError",
            "lineno": 217,
            "endlineno": 219,
            "docstring": {
              "value": "Error altering table",
              "lineno": 218,
              "endlineno": 218
            },
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "NoObviousTable",
            "lineno": 222,
            "endlineno": 224,
            "docstring": {
              "value": "Could not tell which table this operation refers to",
              "lineno": 223,
              "endlineno": 223
            },
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "BadPrimaryKey",
            "lineno": 227,
            "endlineno": 229,
            "docstring": {
              "value": "Table does not have a single obvious primary key",
              "lineno": 228,
              "endlineno": 228
            },
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "NotFoundError",
            "lineno": 232,
            "endlineno": 234,
            "docstring": {
              "value": "Record not found",
              "lineno": 233,
              "endlineno": 233
            },
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "PrimaryKeyRequired",
            "lineno": 237,
            "endlineno": 239,
            "docstring": {
              "value": "Primary key needs to be specified",
              "lineno": 238,
              "endlineno": 238
            },
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "InvalidColumns",
            "lineno": 242,
            "endlineno": 244,
            "docstring": {
              "value": "Specified columns do not exist",
              "lineno": 243,
              "endlineno": 243
            },
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "DescIndex",
            "lineno": 247,
            "endlineno": 248,
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "str",
                "full": "str"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "BadMultiValues",
            "lineno": 251,
            "endlineno": 255,
            "docstring": {
              "value": "With multi=True code must return a Python dictionary",
              "lineno": 252,
              "endlineno": 252
            },
            "labels": [],
            "members": [
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 254,
                "endlineno": 255,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "values",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "values",
                "lineno": 255,
                "endlineno": 255,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "values"
              }
            ],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "attribute",
            "name": "_COUNTS_TABLE_CREATE_SQL",
            "lineno": 258,
            "endlineno": 263,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "'\\nCREATE TABLE IF NOT EXISTS [{}](\\n   [table] TEXT PRIMARY KEY,\\n   count INTEGER DEFAULT 0\\n);\\n'.strip()"
          },
          {
            "kind": "class",
            "name": "Database",
            "lineno": 266,
            "endlineno": 1094,
            "docstring": {
              "value": "Wrapper for a SQLite database connection that adds a variety of useful utility methods.\n\nTo create an instance::\n\n    # create data.db file, or open existing:\n    db = Database(\"data.db\")\n    # Create an in-memory database:\n    dB = Database(memory=True)\n\n:param filename_or_conn: String path to a file, or a ``pathlib.Path`` object, or a\n  ``sqlite3`` connection\n:param memory: set to ``True`` to create an in-memory database\n:param memory_name: creates a named in-memory database that can be shared across multiple connections\n:param recreate: set to ``True`` to delete and recreate a file database (**dangerous**)\n:param recursive_triggers: defaults to ``True``, which sets ``PRAGMA recursive_triggers=on;`` -\n  set to ``False`` to avoid setting this pragma\n:param tracer: set a tracer function (``print`` works for this) which will be called with\n  ``sql, parameters`` every time a SQL query is executed\n:param use_counts_table: set to ``True`` to use a cached counts table, if available. See\n  :ref:`python_api_cached_table_counts`",
              "lineno": 267,
              "endlineno": 288
            },
            "labels": [],
            "members": [
              {
                "kind": "attribute",
                "name": "_counts_table_name",
                "lineno": 290,
                "endlineno": 290,
                "labels": [
                  "class-attribute"
                ],
                "members": [],
                "value": "'_counts'"
              },
              {
                "kind": "attribute",
                "name": "use_counts_table",
                "lineno": 326,
                "endlineno": 326,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "use_counts_table"
              },
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 293,
                "endlineno": 326,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "filename_or_conn",
                    "annotation": [
                      {
                        "source": "Union",
                        "full": "typing.Union"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        [
                          {
                            "source": "pathlib",
                            "full": "pathlib"
                          },
                          ".",
                          {
                            "source": "Path",
                            "full": "pathlib.Path"
                          }
                        ],
                        ", ",
                        [
                          {
                            "source": "sqlite3",
                            "full": "sqlite_utils.utils.sqlite3"
                          },
                          ".",
                          {
                            "source": "Connection",
                            "full": "sqlite_utils.utils.sqlite3.Connection"
                          }
                        ]
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "memory",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "memory_name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "recreate",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "recursive_triggers",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "True"
                  },
                  {
                    "name": "tracer",
                    "annotation": {
                      "source": "Callable",
                      "full": "typing.Callable"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "use_counts_table",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "conn",
                "lineno": 308,
                "endlineno": 312,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "sqlite3.connect(uri, uri=True, check_same_thread=False)"
              },
              {
                "kind": "attribute",
                "name": "_tracer",
                "lineno": 322,
                "endlineno": 322,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "tracer"
              },
              {
                "kind": "attribute",
                "name": "_registered_functions",
                "lineno": 325,
                "endlineno": 325,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "set()",
                "annotation": {
                  "source": "set",
                  "full": "set"
                }
              },
              {
                "kind": "function",
                "name": "tracer",
                "lineno": 328,
                "endlineno": 350,
                "docstring": {
                  "value": "Context manager to temporarily set a tracer function - all executed SQL queries will\nbe passed to this.\n\nThe tracer function should accept two arguments: ``sql`` and ``parameters``\n\nExample usage::\n\n    with db.tracer(print):\n        db[\"creatures\"].insert({\"name\": \"Cleo\"})\n\nSee :ref:`python_api_tracing`.\n\n:param tracer: Callable accepting ``sql`` and ``parameters`` arguments",
                  "lineno": 330,
                  "endlineno": 344
                },
                "labels": [],
                "members": [],
                "decorators": [
                  {
                    "value": "contextlib.contextmanager",
                    "lineno": 328,
                    "endlineno": 328
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "tracer",
                    "annotation": {
                      "source": "Callable",
                      "full": "typing.Callable"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "__getitem__",
                "lineno": 352,
                "endlineno": 359,
                "docstring": {
                  "value": "``db[table_name]`` returns a :class:`.Table` object for the table with the specified name.\nIf the table does not exist yet it will be created the first time data is inserted into it.\n\n:param table_name: The name of the table",
                  "lineno": 353,
                  "endlineno": 358
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "table_name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Union",
                    "full": "typing.Union"
                  },
                  "[",
                  [
                    "'Table'",
                    ", ",
                    "'View'"
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "__repr__",
                "lineno": 361,
                "endlineno": 362,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "register_function",
                "lineno": 364,
                "endlineno": 413,
                "docstring": {
                  "value": "``fn`` will be made available as a function within SQL, with the same name and number\nof arguments. Can be used as a decorator::\n\n    @db.register\n    def upper(value):\n        return str(value).upper()\n\nThe decorator can take arguments::\n\n    @db.register(deterministic=True, replace=True)\n    def upper(value):\n        return str(value).upper()\n\nSee :ref:`python_api_register_function`.\n\n:param fn: Function to register\n:param deterministic: set ``True`` for functions that always returns the same output for a given input\n:param replace: set ``True`` to replace an existing function with the same name - otherwise throw an error",
                  "lineno": 367,
                  "endlineno": 386
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "fn",
                    "annotation": {
                      "source": "Callable",
                      "full": "typing.Callable"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "deterministic",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "replace",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "register_fts4_bm25",
                "lineno": 415,
                "endlineno": 417,
                "docstring": {
                  "value": "Register the ``rank_bm25(match_info)`` function used for calculating relevance with SQLite FTS4.",
                  "lineno": 416,
                  "endlineno": 416
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "attach",
                "lineno": 419,
                "endlineno": 433,
                "docstring": {
                  "value": "Attach another SQLite database file to this connection with the specified alias, equivalent to::\n\n    ATTACH DATABASE 'filepath.db' AS alias\n\n:param alias: Alias name to use\n:param filepath: Path to SQLite database file on disk",
                  "lineno": 420,
                  "endlineno": 427
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "alias",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "filepath",
                    "annotation": [
                      {
                        "source": "Union",
                        "full": "typing.Union"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        [
                          {
                            "source": "pathlib",
                            "full": "pathlib"
                          },
                          ".",
                          {
                            "source": "Path",
                            "full": "pathlib.Path"
                          }
                        ]
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "query",
                "lineno": 435,
                "endlineno": 448,
                "docstring": {
                  "value": "Execute ``sql`` and return an iterable of dictionaries representing each row.\n\n:param sql: SQL query to execute\n:param params: Parameters to use in that query - an iterable for ``where id = ?``\n  parameters, or a dictionary for ``where id = :id``",
                  "lineno": 438,
                  "endlineno": 444
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "sql",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "params",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": [
                  {
                    "source": "Generator",
                    "full": "typing.Generator"
                  },
                  "[",
                  [
                    {
                      "source": "dict",
                      "full": "dict"
                    },
                    ", ",
                    "None",
                    ", ",
                    "None"
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "execute",
                "lineno": 450,
                "endlineno": 465,
                "docstring": {
                  "value": "Execute SQL query and return a ``sqlite3.Cursor``.\n\n:param sql: SQL query to execute\n:param parameters: Parameters to use in that query - an iterable for ``where id = ?``\n  parameters, or a dictionary for ``where id = :id``",
                  "lineno": 453,
                  "endlineno": 459
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "sql",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "parameters",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": [
                  {
                    "source": "sqlite3",
                    "full": "sqlite_utils.utils.sqlite3"
                  },
                  ".",
                  {
                    "source": "Cursor",
                    "full": "sqlite_utils.utils.sqlite3.Cursor"
                  }
                ]
              },
              {
                "kind": "function",
                "name": "executescript",
                "lineno": 467,
                "endlineno": 475,
                "docstring": {
                  "value": "Execute multiple SQL statements separated by ; and return the ``sqlite3.Cursor``.\n\n:param sql: SQL to execute",
                  "lineno": 468,
                  "endlineno": 472
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "sql",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "sqlite3",
                    "full": "sqlite_utils.utils.sqlite3"
                  },
                  ".",
                  {
                    "source": "Cursor",
                    "full": "sqlite_utils.utils.sqlite3.Cursor"
                  }
                ]
              },
              {
                "kind": "function",
                "name": "table",
                "lineno": 477,
                "endlineno": 484,
                "docstring": {
                  "value": "Return a table object, optionally configured with default options.\n\n:param table_name: Name of the table",
                  "lineno": 478,
                  "endlineno": 482
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "table_name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "**kwargs",
                    "annotation": null,
                    "kind": "variadic keyword",
                    "default": "{}"
                  }
                ],
                "returns": [
                  {
                    "source": "Union",
                    "full": "typing.Union"
                  },
                  "[",
                  [
                    "'Table'",
                    ", ",
                    "'View'"
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "quote",
                "lineno": 486,
                "endlineno": 499,
                "docstring": {
                  "value": "Apply SQLite string quoting to a value, including wrappping it in single quotes.\n\n:param value: String to quote",
                  "lineno": 487,
                  "endlineno": 491
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "value",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "quote_fts",
                "lineno": 501,
                "endlineno": 521,
                "docstring": {
                  "value": "Escape special characters in a SQLite full-text search query.\n\nThis works by surrounding each token within the query with double\nquotes, in order to avoid words like ``NOT`` and ``OR`` having\nspecial meaning as defined by the FTS query syntax here:\n\nhttps://www.sqlite.org/fts5.html#full_text_query_syntax\n\nIf the query has unbalanced ``\"`` characters, adds one at end.\n\n:param query: String to escape",
                  "lineno": 502,
                  "endlineno": 514
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "query",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "table_names",
                "lineno": 523,
                "endlineno": 536,
                "docstring": {
                  "value": "List of string table names in this database.\n\n:param fts4: Only return tables that are part of FTS4 indexes\n:param fts5: Only return tables that are part of FTS5 indexes",
                  "lineno": 524,
                  "endlineno": 529
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "fts4",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "fts5",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "view_names",
                "lineno": 538,
                "endlineno": 545,
                "docstring": {
                  "value": "List of string view names in this database.",
                  "lineno": 539,
                  "endlineno": 539
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "tables",
                "lineno": 547,
                "endlineno": 550,
                "docstring": {
                  "value": "List of Table objects in this database.",
                  "lineno": 549,
                  "endlineno": 549
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 547,
                    "endlineno": 547
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  "'Table'",
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "views",
                "lineno": 552,
                "endlineno": 555,
                "docstring": {
                  "value": "List of View objects in this database.",
                  "lineno": 554,
                  "endlineno": 554
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 552,
                    "endlineno": 552
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  "'View'",
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "triggers",
                "lineno": 557,
                "endlineno": 565,
                "docstring": {
                  "value": "List of ``(name, table_name, sql)`` tuples representing triggers in this database.",
                  "lineno": 559,
                  "endlineno": 559
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 557,
                    "endlineno": 557
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "Trigger",
                    "full": "sqlite_utils.db.Trigger"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "triggers_dict",
                "lineno": 567,
                "endlineno": 570,
                "docstring": {
                  "value": "A ``{trigger_name: sql}`` dictionary of triggers in this database.",
                  "lineno": 569,
                  "endlineno": 569
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 567,
                    "endlineno": 567
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Dict",
                    "full": "typing.Dict"
                  },
                  "[",
                  [
                    {
                      "source": "str",
                      "full": "str"
                    },
                    ", ",
                    {
                      "source": "str",
                      "full": "str"
                    }
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "schema",
                "lineno": 572,
                "endlineno": 583,
                "docstring": {
                  "value": "SQL schema for this database.",
                  "lineno": 574,
                  "endlineno": 574
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 572,
                    "endlineno": 572
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "supports_strict",
                "lineno": 585,
                "endlineno": 597,
                "docstring": {
                  "value": "Does this database support STRICT mode?",
                  "lineno": 587,
                  "endlineno": 587
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 585,
                    "endlineno": 585
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              },
              {
                "kind": "function",
                "name": "sqlite_version",
                "lineno": 599,
                "endlineno": 603,
                "docstring": {
                  "value": "Version of SQLite, as a tuple of integers for example ``(3, 36, 0)``.",
                  "lineno": 601,
                  "endlineno": 601
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 599,
                    "endlineno": 599
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Tuple",
                    "full": "typing.Tuple"
                  },
                  "[",
                  [
                    {
                      "source": "int",
                      "full": "int"
                    },
                    ", ",
                    "..."
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "journal_mode",
                "lineno": 605,
                "endlineno": 612,
                "docstring": {
                  "value": "Current ``journal_mode`` of this database.\n\nhttps://www.sqlite.org/pragma.html#pragma_journal_mode",
                  "lineno": 607,
                  "endlineno": 611
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 605,
                    "endlineno": 605
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "enable_wal",
                "lineno": 614,
                "endlineno": 619,
                "docstring": {
                  "value": "Sets ``journal_mode`` to ``'wal'`` to enable Write-Ahead Log mode.",
                  "lineno": 615,
                  "endlineno": 617
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "disable_wal",
                "lineno": 621,
                "endlineno": 624,
                "docstring": {
                  "value": "Sets ``journal_mode`` back to ``'delete'`` to disable Write-Ahead Log mode.",
                  "lineno": 622,
                  "endlineno": 622
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "_ensure_counts_table",
                "lineno": 626,
                "endlineno": 628,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "enable_counts",
                "lineno": 630,
                "endlineno": 642,
                "docstring": {
                  "value": "Enable trigger-based count caching for every table in the database, see\n:ref:`python_api_cached_table_counts`.",
                  "lineno": 631,
                  "endlineno": 634
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "cached_counts",
                "lineno": 644,
                "endlineno": 657,
                "docstring": {
                  "value": "Return ``{table_name: count}`` dictionary of cached counts for specified tables, or\nall tables if ``tables`` not provided.\n\n:param tables: Subset list of tables to return counts for.",
                  "lineno": 645,
                  "endlineno": 650
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "tables",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": [
                  {
                    "source": "Dict",
                    "full": "typing.Dict"
                  },
                  "[",
                  [
                    {
                      "source": "str",
                      "full": "str"
                    },
                    ", ",
                    {
                      "source": "int",
                      "full": "int"
                    }
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "reset_counts",
                "lineno": 659,
                "endlineno": 669,
                "docstring": {
                  "value": "Re-calculate cached counts for tables.",
                  "lineno": 660,
                  "endlineno": 660
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "execute_returning_dicts",
                "lineno": 671,
                "endlineno": 674,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "sql",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "params",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "dict",
                    "full": "dict"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "resolve_foreign_keys",
                "lineno": 676,
                "endlineno": 720,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": {
                      "source": "ForeignKeysType",
                      "full": "sqlite_utils.db.ForeignKeysType"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "ForeignKey",
                    "full": "sqlite_utils.db.ForeignKey"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "create_table_sql",
                "lineno": 722,
                "endlineno": 851,
                "docstring": {
                  "value": "Returns the SQL ``CREATE TABLE`` statement for creating the specified table.\n\n:param name: Name of table\n:param columns: Dictionary mapping column names to their types, for example ``{\"name\": str, \"age\": int}``\n:param pk: String name of column to use as a primary key, or a tuple of strings for a compound primary key covering multiple columns\n:param foreign_keys: List of foreign key definitions for this table\n:param column_order: List specifying which columns should come first\n:param not_null: List of columns that should be created as ``NOT NULL``\n:param defaults: Dictionary specifying default values for columns\n:param hash_id: Name of column to be used as a primary key containing a hash of the other columns\n:param hash_id_columns: List of columns to be used when calculating the hash ID for a row\n:param extracts: List or dictionary of columns to be extracted during inserts, see :ref:`python_api_extracts`\n:param if_not_exists: Use ``CREATE TABLE IF NOT EXISTS``",
                  "lineno": 736,
                  "endlineno": 750
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Dict",
                        "full": "typing.Dict"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        {
                          "source": "Any",
                          "full": "typing.Any"
                        }
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "ForeignKeysType",
                        "full": "sqlite_utils.db.ForeignKeysType"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "column_order",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "List",
                          "full": "typing.List"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "not_null",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "defaults",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "hash_id",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "extracts",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "str",
                                "full": "str"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          [
                            {
                              "source": "List",
                              "full": "typing.List"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ]
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "if_not_exists",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "create_table",
                "lineno": 853,
                "endlineno": 908,
                "docstring": {
                  "value": "Create a table with the specified name and the specified ``{column_name: type}`` columns.\n\nSee :ref:`python_api_explicit_create`.\n\n:param name: Name of table\n:param columns: Dictionary mapping column names to their types, for example ``{\"name\": str, \"age\": int}``\n:param pk: String name of column to use as a primary key, or a tuple of strings for a compound primary key covering multiple columns\n:param foreign_keys: List of foreign key definitions for this table\n:param column_order: List specifying which columns should come first\n:param not_null: List of columns that should be created as ``NOT NULL``\n:param defaults: Dictionary specifying default values for columns\n:param hash_id: Name of column to be used as a primary key containing a hash of the other columns\n:param hash_id_columns: List of columns to be used when calculating the hash ID for a row\n:param extracts: List or dictionary of columns to be extracted during inserts, see :ref:`python_api_extracts`\n:param if_not_exists: Use ``CREATE TABLE IF NOT EXISTS``",
                  "lineno": 867,
                  "endlineno": 883
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Dict",
                        "full": "typing.Dict"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        {
                          "source": "Any",
                          "full": "typing.Any"
                        }
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "ForeignKeysType",
                        "full": "sqlite_utils.db.ForeignKeysType"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "column_order",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "List",
                          "full": "typing.List"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "not_null",
                    "annotation": [
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "defaults",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "hash_id",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "extracts",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "str",
                                "full": "str"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          [
                            {
                              "source": "List",
                              "full": "typing.List"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ]
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "if_not_exists",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": "'Table'"
              },
              {
                "kind": "function",
                "name": "create_view",
                "lineno": 910,
                "endlineno": 936,
                "docstring": {
                  "value": "Create a new SQL view with the specified name - ``sql`` should start with ``SELECT ...``.\n\n:param name: Name of the view\n:param sql: SQL ``SELECT`` query to use for this view.\n:param ignore: Set to ``True`` to do nothing if a view with this name already exists\n:param replace: Set to ``True`` to replace the view if one with this name already exists",
                  "lineno": 913,
                  "endlineno": 920
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "sql",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "ignore",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "replace",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "m2m_table_candidates",
                "lineno": 938,
                "endlineno": 954,
                "docstring": {
                  "value": "Given two table names returns the name of tables that could define a\nmany-to-many relationship between those two tables, based on having\nforeign keys to both of the provided tables.\n\n:param table: Table name\n:param other_table: Other table name",
                  "lineno": 939,
                  "endlineno": 946
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "table",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "other_table",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "add_foreign_keys",
                "lineno": 956,
                "endlineno": 1027,
                "docstring": {
                  "value": "See :ref:`python_api_add_foreign_keys`.\n\n:param foreign_keys: A list of  ``(table, column, other_table, other_column)``\n  tuples",
                  "lineno": 957,
                  "endlineno": 962
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": [
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "[",
                      [
                        {
                          "source": "Tuple",
                          "full": "typing.Tuple"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "str",
                            "full": "str"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "index_foreign_keys",
                "lineno": 1029,
                "endlineno": 1038,
                "docstring": {
                  "value": "Create indexes for every foreign key column on every table in the database.",
                  "lineno": 1030,
                  "endlineno": 1030
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "vacuum",
                "lineno": 1040,
                "endlineno": 1042,
                "docstring": {
                  "value": "Run a SQLite ``VACUUM`` against the database.",
                  "lineno": 1041,
                  "endlineno": 1041
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "analyze",
                "lineno": 1044,
                "endlineno": 1053,
                "docstring": {
                  "value": "Run ``ANALYZE`` against the entire database or a named table or index.\n\n:param name: Run ``ANALYZE`` against this specific named table or index",
                  "lineno": 1045,
                  "endlineno": 1049
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "name",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "init_spatialite",
                "lineno": 1055,
                "endlineno": 1094,
                "docstring": {
                  "value": "The ``init_spatialite`` method will load and initialize the SpatiaLite extension.\nThe ``path`` argument should be an absolute path to the compiled extension, which\ncan be found using ``find_spatialite``.\n\nReturns ``True`` if SpatiaLite was successfully initialized.\n\n.. code-block:: python\n\n    from sqlite_utils.db import Database\n    from sqlite_utils.utils import find_spatialite\n\n    db = Database(\"mydb.db\")\n    db.init_spatialite(find_spatialite())\n\nIf you've installed SpatiaLite somewhere unexpected (for testing an alternate version, for example)\nyou can pass in an absolute path:\n\n.. code-block:: python\n\n    from sqlite_utils.db import Database\n    from sqlite_utils.utils import find_spatialite\n\n    db = Database(\"mydb.db\")\n    db.init_spatialite(\"./local/mod_spatialite.dylib\")\n\n:param path: Path to SpatiaLite module on disk",
                  "lineno": 1056,
                  "endlineno": 1083
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "path",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              }
            ],
            "bases": [],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "Queryable",
            "lineno": 1097,
            "endlineno": 1231,
            "labels": [],
            "members": [
              {
                "kind": "function",
                "name": "exists",
                "lineno": 1098,
                "endlineno": 1100,
                "docstring": {
                  "value": "Does this table or view exist yet?",
                  "lineno": 1099,
                  "endlineno": 1099
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              },
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 1102,
                "endlineno": 1104,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "db",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "name",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "db",
                "lineno": 1103,
                "endlineno": 1103,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "db"
              },
              {
                "kind": "attribute",
                "name": "name",
                "lineno": 1104,
                "endlineno": 1104,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "name"
              },
              {
                "kind": "function",
                "name": "count_where",
                "lineno": 1106,
                "endlineno": 1121,
                "docstring": {
                  "value": "Executes ``SELECT count(*) FROM table WHERE ...`` and returns a count.\n\n:param where: SQL where fragment to use, for example ``id > ?``\n:param where_args: Parameters to use with that fragment - an iterable for ``id > ?``\n  parameters, or a dictionary for ``id > :id``",
                  "lineno": 1111,
                  "endlineno": 1117
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "where",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where_args",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": {
                  "source": "int",
                  "full": "int"
                }
              },
              {
                "kind": "function",
                "name": "execute_count",
                "lineno": 1123,
                "endlineno": 1125,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "count",
                "lineno": 1127,
                "endlineno": 1130,
                "docstring": {
                  "value": "A count of the rows in this table or view.",
                  "lineno": 1129,
                  "endlineno": 1129
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1127,
                    "endlineno": 1127
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "int",
                  "full": "int"
                }
              },
              {
                "kind": "function",
                "name": "rows",
                "lineno": 1132,
                "endlineno": 1135,
                "docstring": {
                  "value": "Iterate over every dictionaries for each row in this table or view.",
                  "lineno": 1134,
                  "endlineno": 1134
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1132,
                    "endlineno": 1132
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Generator",
                    "full": "typing.Generator"
                  },
                  "[",
                  [
                    {
                      "source": "dict",
                      "full": "dict"
                    },
                    ", ",
                    "None",
                    ", ",
                    "None"
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "rows_where",
                "lineno": 1137,
                "endlineno": 1173,
                "docstring": {
                  "value": "Iterate over every row in this table or view that matches the specified where clause.\n\nReturns each row as a dictionary. See :ref:`python_api_rows` for more details.\n\n:param where: SQL where fragment to use, for example ``id > ?``\n:param where_args: Parameters to use with that fragment - an iterable for ``id > ?``\n  parameters, or a dictionary for ``id > :id``\n:param order_by: Column or fragment of SQL to order by\n:param select: Comma-separated list of columns to select - defaults to ``*``\n:param limit: Integer number of rows to limit to\n:param offset: Integer for SQL offset",
                  "lineno": 1146,
                  "endlineno": 1158
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "where",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where_args",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "order_by",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "select",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "'*'"
                  },
                  {
                    "name": "limit",
                    "annotation": {
                      "source": "int",
                      "full": "int"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "offset",
                    "annotation": {
                      "source": "int",
                      "full": "int"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": [
                  {
                    "source": "Generator",
                    "full": "typing.Generator"
                  },
                  "[",
                  [
                    {
                      "source": "dict",
                      "full": "dict"
                    },
                    ", ",
                    "None",
                    ", ",
                    "None"
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "pks_and_rows_where",
                "lineno": 1175,
                "endlineno": 1211,
                "docstring": {
                  "value": "Like ``.rows_where()`` but returns ``(pk, row)`` pairs - ``pk`` can be a single value or tuple.\n\n:param where: SQL where fragment to use, for example ``id > ?``\n:param where_args: Parameters to use with that fragment - an iterable for ``id > ?``\n  parameters, or a dictionary for ``id > :id``\n:param order_by: Column or fragment of SQL to order by\n:param select: Comma-separated list of columns to select - defaults to ``*``\n:param limit: Integer number of rows to limit to\n:param offset: Integer for SQL offset",
                  "lineno": 1183,
                  "endlineno": 1193
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "where",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where_args",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "order_by",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "limit",
                    "annotation": {
                      "source": "int",
                      "full": "int"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "offset",
                    "annotation": {
                      "source": "int",
                      "full": "int"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": [
                  {
                    "source": "Generator",
                    "full": "typing.Generator"
                  },
                  "[",
                  [
                    [
                      {
                        "source": "Tuple",
                        "full": "typing.Tuple"
                      },
                      "[",
                      [
                        {
                          "source": "Any",
                          "full": "typing.Any"
                        },
                        ", ",
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        }
                      ],
                      "]"
                    ],
                    ", ",
                    "None",
                    ", ",
                    "None"
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "columns",
                "lineno": 1213,
                "endlineno": 1219,
                "docstring": {
                  "value": "List of :ref:`Columns <reference_db_other_column>` representing the columns in this table or view.",
                  "lineno": 1215,
                  "endlineno": 1215
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1213,
                    "endlineno": 1213
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  "'Column'",
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "columns_dict",
                "lineno": 1221,
                "endlineno": 1224,
                "docstring": {
                  "value": "``{column_name: python-type}`` dictionary representing columns in this table or view.",
                  "lineno": 1223,
                  "endlineno": 1223
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1221,
                    "endlineno": 1221
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Dict",
                    "full": "typing.Dict"
                  },
                  "[",
                  [
                    {
                      "source": "str",
                      "full": "str"
                    },
                    ", ",
                    {
                      "source": "Any",
                      "full": "typing.Any"
                    }
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "schema",
                "lineno": 1226,
                "endlineno": 1231,
                "docstring": {
                  "value": "SQL schema for this table or view.",
                  "lineno": 1228,
                  "endlineno": 1228
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1226,
                    "endlineno": 1226
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              }
            ],
            "bases": [],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "Table",
            "lineno": 1234,
            "endlineno": 3407,
            "docstring": {
              "value": "Tables should usually be initialized using the ``db.table(table_name)`` or ``db[table_name]`` methods.",
              "lineno": 1235,
              "endlineno": 1235
            },
            "labels": [],
            "members": [
              {
                "kind": "attribute",
                "name": "last_rowid",
                "lineno": 1237,
                "endlineno": 1237,
                "labels": [
                  "class-attribute"
                ],
                "members": [],
                "value": "None",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "int",
                    "full": "int"
                  },
                  "]"
                ]
              },
              {
                "kind": "attribute",
                "name": "last_pk",
                "lineno": 1239,
                "endlineno": 1239,
                "labels": [
                  "class-attribute"
                ],
                "members": [],
                "value": "None",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "Any",
                    "full": "typing.Any"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 1241,
                "endlineno": 1276,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "db",
                    "annotation": {
                      "source": "Database",
                      "full": "sqlite_utils.db.Database"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "ForeignKeysType",
                        "full": "sqlite_utils.db.ForeignKeysType"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "column_order",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "List",
                          "full": "typing.List"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "not_null",
                    "annotation": [
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "defaults",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "batch_size",
                    "annotation": {
                      "source": "int",
                      "full": "int"
                    },
                    "kind": "positional or keyword",
                    "default": "100"
                  },
                  {
                    "name": "hash_id",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "alter",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "ignore",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "replace",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "extracts",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "str",
                                "full": "str"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          [
                            {
                              "source": "List",
                              "full": "typing.List"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ]
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "conversions",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "dict",
                        "full": "dict"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "_defaults",
                "lineno": 1261,
                "endlineno": 1276,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "dict(pk=pk, foreign_keys=foreign_keys, column_order=column_order, not_null=not_null, defaults=defaults, batch_size=batch_size, hash_id=hash_id, hash_id_columns=hash_id_columns, alter=alter, ignore=ignore, replace=replace, extracts=extracts, conversions=conversions or {}, columns=columns)"
              },
              {
                "kind": "function",
                "name": "__repr__",
                "lineno": 1278,
                "endlineno": 1284,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "count",
                "lineno": 1286,
                "endlineno": 1293,
                "docstring": {
                  "value": "Count of the rows in this table - optionally from the table count cache, if configured.",
                  "lineno": 1288,
                  "endlineno": 1288
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1286,
                    "endlineno": 1286
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "int",
                  "full": "int"
                }
              },
              {
                "kind": "function",
                "name": "exists",
                "lineno": 1295,
                "endlineno": 1296,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              },
              {
                "kind": "function",
                "name": "pks",
                "lineno": 1298,
                "endlineno": 1304,
                "docstring": {
                  "value": "Primary key columns for this table.",
                  "lineno": 1300,
                  "endlineno": 1300
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1298,
                    "endlineno": 1298
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "use_rowid",
                "lineno": 1306,
                "endlineno": 1309,
                "docstring": {
                  "value": "Does this table use ``rowid`` for its primary key (no other primary keys are specified)?",
                  "lineno": 1308,
                  "endlineno": 1308
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1306,
                    "endlineno": 1306
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              },
              {
                "kind": "function",
                "name": "get",
                "lineno": 1311,
                "endlineno": 1337,
                "docstring": {
                  "value": "Return row (as dictionary) for the specified primary key.\n\nRaises ``sqlite_utils.db.NotFoundError`` if a matching row cannot be found.\n\n:param pk_values: A single value, or a tuple of values for tables that have a compound primary key",
                  "lineno": 1312,
                  "endlineno": 1318
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk_values",
                    "annotation": [
                      {
                        "source": "Union",
                        "full": "typing.Union"
                      },
                      "[",
                      [
                        {
                          "source": "list",
                          "full": "list"
                        },
                        ", ",
                        {
                          "source": "tuple",
                          "full": "tuple"
                        },
                        ", ",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        {
                          "source": "int",
                          "full": "int"
                        }
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "dict",
                  "full": "dict"
                }
              },
              {
                "kind": "function",
                "name": "foreign_keys",
                "lineno": 1339,
                "endlineno": 1356,
                "docstring": {
                  "value": "List of foreign keys defined on this table.",
                  "lineno": 1341,
                  "endlineno": 1341
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1339,
                    "endlineno": 1339
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  "'ForeignKey'",
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "virtual_table_using",
                "lineno": 1358,
                "endlineno": 1364,
                "docstring": {
                  "value": "Type of virtual table, or ``None`` if this is not a virtual table.",
                  "lineno": 1360,
                  "endlineno": 1360
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1358,
                    "endlineno": 1358
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "indexes",
                "lineno": 1366,
                "endlineno": 1388,
                "docstring": {
                  "value": "List of indexes defined on this table.",
                  "lineno": 1368,
                  "endlineno": 1368
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1366,
                    "endlineno": 1366
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "Index",
                    "full": "sqlite_utils.db.Index"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "xindexes",
                "lineno": 1390,
                "endlineno": 1407,
                "docstring": {
                  "value": "List of indexes defined on this table using the more detailed ``XIndex`` format.",
                  "lineno": 1392,
                  "endlineno": 1392
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1390,
                    "endlineno": 1390
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "XIndex",
                    "full": "sqlite_utils.db.XIndex"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "triggers",
                "lineno": 1409,
                "endlineno": 1419,
                "docstring": {
                  "value": "List of triggers defined on this table.",
                  "lineno": 1411,
                  "endlineno": 1411
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1409,
                    "endlineno": 1409
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "Trigger",
                    "full": "sqlite_utils.db.Trigger"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "triggers_dict",
                "lineno": 1421,
                "endlineno": 1424,
                "docstring": {
                  "value": "``{trigger_name: sql}`` dictionary of triggers defined on this table.",
                  "lineno": 1423,
                  "endlineno": 1423
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1421,
                    "endlineno": 1421
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Dict",
                    "full": "typing.Dict"
                  },
                  "[",
                  [
                    {
                      "source": "str",
                      "full": "str"
                    },
                    ", ",
                    {
                      "source": "str",
                      "full": "str"
                    }
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "strict",
                "lineno": 1426,
                "endlineno": 1431,
                "docstring": {
                  "value": "Is this a STRICT table?",
                  "lineno": 1428,
                  "endlineno": 1428
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1426,
                    "endlineno": 1426
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              },
              {
                "kind": "function",
                "name": "create",
                "lineno": 1433,
                "endlineno": 1477,
                "docstring": {
                  "value": "Create a table with the specified columns.\n\nSee :ref:`python_api_explicit_create` for full details.\n\n:param columns: Dictionary mapping column names to their types, for example ``{\"name\": str, \"age\": int}``\n:param pk: String name of column to use as a primary key, or a tuple of strings for a compound primary key covering multiple columns\n:param foreign_keys: List of foreign key definitions for this table\n:param column_order: List specifying which columns should come first\n:param not_null: List of columns that should be created as ``NOT NULL``\n:param defaults: Dictionary specifying default values for columns\n:param hash_id: Name of column to be used as a primary key containing a hash of the other columns\n:param hash_id_columns: List of columns to be used when calculating the hash ID for a row\n:param extracts: List or dictionary of columns to be extracted during inserts, see :ref:`python_api_extracts`\n:param if_not_exists: Use ``CREATE TABLE IF NOT EXISTS``",
                  "lineno": 1446,
                  "endlineno": 1461
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Dict",
                        "full": "typing.Dict"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        {
                          "source": "Any",
                          "full": "typing.Any"
                        }
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "ForeignKeysType",
                        "full": "sqlite_utils.db.ForeignKeysType"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "column_order",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "List",
                          "full": "typing.List"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "not_null",
                    "annotation": [
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "defaults",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "hash_id",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "extracts",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "str",
                                "full": "str"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          [
                            {
                              "source": "List",
                              "full": "typing.List"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ]
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "if_not_exists",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": "'Table'"
              },
              {
                "kind": "function",
                "name": "transform",
                "lineno": 1479,
                "endlineno": 1533,
                "docstring": {
                  "value": "Apply an advanced alter table, including operations that are not supported by\n``ALTER TABLE`` in SQLite itself.\n\nSee :ref:`python_api_transform` for full details.\n\n:param types: Columns that should have their type changed, for example ``{\"weight\": float}``\n:param rename: Columns to rename, for example ``{\"headline\": \"title\"}``\n:param drop: Columns to drop\n:param pk: New primary key for the table\n:param not_null: Columns to set as ``NOT NULL``\n:param defaults: Default values for columns\n:param drop_foreign_keys: Names of columns that should have their foreign key constraints removed\n:param column_order: List of strings specifying a full or partial column order\n  to use when creating the table.",
                  "lineno": 1491,
                  "endlineno": 1506
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "types",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "dict",
                        "full": "dict"
                      },
                      "]"
                    ],
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "rename",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "dict",
                        "full": "dict"
                      },
                      "]"
                    ],
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "drop",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "]"
                    ],
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "pk",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      },
                      "]"
                    ],
                    "kind": "keyword-only",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "not_null",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Set",
                          "full": "typing.Set"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "defaults",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "drop_foreign_keys",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "]"
                    ],
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "column_order",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "List",
                          "full": "typing.List"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "keyword-only",
                    "default": "None"
                  }
                ],
                "returns": "'Table'"
              },
              {
                "kind": "function",
                "name": "transform_sql",
                "lineno": 1535,
                "endlineno": 1664,
                "docstring": {
                  "value": "Return a list of SQL statements that should be executed in order to apply this transformation.\n\n:param types: Columns that should have their type changed, for example ``{\"weight\": float}``\n:param rename: Columns to rename, for example ``{\"headline\": \"title\"}``\n:param drop: Columns to drop\n:param pk: New primary key for the table\n:param not_null: Columns to set as ``NOT NULL``\n:param defaults: Default values for columns\n:param drop_foreign_keys: Names of columns that should have their foreign key constraints removed\n:param column_order: List of strings specifying a full or partial column order\n  to use when creating the table.",
                  "lineno": 1548,
                  "endlineno": 1560
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "types",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "rename",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "drop",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "pk",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "not_null",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "defaults",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "drop_foreign_keys",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "column_order",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "tmp_suffix",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "None"
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "extract",
                "lineno": 1666,
                "endlineno": 1772,
                "docstring": {
                  "value": "Extract specified columns into a separate table.\n\nSee :ref:`python_api_extract` for details.\n\n:param columns: Single column or list of columns that should be extracted\n:param table: Name of table in which the new records should be created\n:param fk_column: Name of the foreign key column to populate in the original table\n:param rename: Dictionary of columns that should be renamed when populating the new table",
                  "lineno": 1673,
                  "endlineno": 1682
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Union",
                        "full": "typing.Union"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          "[",
                          {
                            "source": "str",
                            "full": "str"
                          },
                          "]"
                        ]
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "table",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "fk_column",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "rename",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "str",
                            "full": "str"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": "'Table'"
              },
              {
                "kind": "function",
                "name": "create_index",
                "lineno": 1774,
                "endlineno": 1851,
                "docstring": {
                  "value": "Create an index on this table.\n\n:param columns: A single columns or list of columns to index. These can be strings or,\n  to create an index using the column in descending order, ``db.DescIndex(column_name)`` objects.\n:param index_name: The name to use for the new index. Defaults to the column names joined on ``_``.\n:param unique: Should the index be marked as unique, forcing unique values?\n:param if_not_exists: Only create the index if one with that name does not already exist.\n:param find_unique_name: If ``index_name`` is not provided and the automatically derived name\n  already exists, keep incrementing a suffix number to find an available name.\n:param analyze: Run ``ANALYZE`` against this index after creating it.\n\nSee :ref:`python_api_create_index`.",
                  "lineno": 1783,
                  "endlineno": 1796
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "DescIndex",
                            "full": "sqlite_utils.db.DescIndex"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "index_name",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "unique",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "if_not_exists",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "find_unique_name",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "analyze",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "add_column",
                "lineno": 1853,
                "endlineno": 1902,
                "docstring": {
                  "value": "Add a column to this table. See :ref:`python_api_add_column`.\n\n:param col_name: Name of the new column\n:param col_type: Column type - a Python type such as ``str`` or a SQLite type string such as ``\"BLOB\"``\n:param fk: Name of a table that this column should be a foreign key reference to\n:param fk_col: Column in the foreign key table that this should reference\n:param not_null_default: Set this column to ``not null`` and give it this default value",
                  "lineno": 1861,
                  "endlineno": 1869
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "col_name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "col_type",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "fk",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "fk_col",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "not_null_default",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "drop",
                "lineno": 1904,
                "endlineno": 1914,
                "docstring": {
                  "value": "Drop this table.\n\n:param ignore: Set to ``True`` to ignore the error if the table does not exist",
                  "lineno": 1905,
                  "endlineno": 1909
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "ignore",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "guess_foreign_table",
                "lineno": 1916,
                "endlineno": 1946,
                "docstring": {
                  "value": "For a given column, suggest another table that might be referenced by this\ncolumn should it be used as a foreign key.\n\nFor example, a column called ``tag_id`` or ``tag`` or ``tags`` might suggest\na ``tag`` table, if one exists.\n\nIf no candidates can be found, raises a ``NoObviousTable`` exception.\n\n:param column: Name of column",
                  "lineno": 1917,
                  "endlineno": 1927
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "column",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "guess_foreign_column",
                "lineno": 1948,
                "endlineno": 1955,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "other_table",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "add_foreign_key",
                "lineno": 1957,
                "endlineno": 2005,
                "docstring": {
                  "value": "Alter the schema to mark the specified column as a foreign key to another table.\n\n:param column: The column to mark as a foreign key.\n:param other_table: The table it refers to - if omitted, will be guessed based on the column name.\n:param other_column: The column on the other table it - if omitted, will be guessed.\n:param ignore: Set this to ``True`` to ignore an existing foreign key - otherwise a ``AlterError`` will be raised.",
                  "lineno": 1964,
                  "endlineno": 1971
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "column",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "other_table",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "other_column",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "ignore",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "enable_counts",
                "lineno": 2007,
                "endlineno": 2054,
                "docstring": {
                  "value": "Set up triggers to update a cache of the count of rows in this table.\n\nSee :ref:`python_api_cached_table_counts` for details.",
                  "lineno": 2008,
                  "endlineno": 2012
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "has_counts_triggers",
                "lineno": 2056,
                "endlineno": 2065,
                "docstring": {
                  "value": "Does this table have triggers setup to update cached counts?",
                  "lineno": 2058,
                  "endlineno": 2058
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 2056,
                    "endlineno": 2056
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              },
              {
                "kind": "function",
                "name": "enable_fts",
                "lineno": 2067,
                "endlineno": 2151,
                "docstring": {
                  "value": "Enable SQLite full-text search against the specified columns.\n\nSee :ref:`python_api_fts` for more details.\n\n:param columns: List of column names to include in the search index.\n:param fts_version: FTS version to use - defaults to ``FTS5`` but you may want ``FTS4`` for older SQLite versions.\n:param create_triggers: Should triggers be created to keep the search index up-to-date? Defaults to ``False``.\n:param tokenize: Custom SQLite tokenizer to use, for example ``\"porter\"`` to enable Porter stemming.\n:param replace: Should any existing FTS index for this table be replaced by the new one?",
                  "lineno": 2075,
                  "endlineno": 2085
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "fts_version",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "'FTS5'"
                  },
                  {
                    "name": "create_triggers",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "tokenize",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "replace",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "populate_fts",
                "lineno": 2153,
                "endlineno": 2173,
                "docstring": {
                  "value": "Update the associated SQLite full-text search index with the latest data from the\ntable for the specified columns.\n\n:param columns: Columns to populate the data for",
                  "lineno": 2154,
                  "endlineno": 2159
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": "'Table'"
              },
              {
                "kind": "function",
                "name": "disable_fts",
                "lineno": 2175,
                "endlineno": 2198,
                "docstring": {
                  "value": "Remove any full-text search index and related triggers configured for this table.",
                  "lineno": 2176,
                  "endlineno": 2176
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": "'Table'"
              },
              {
                "kind": "function",
                "name": "rebuild_fts",
                "lineno": 2200,
                "endlineno": 2211,
                "docstring": {
                  "value": "Run the ``rebuild`` operation against the associated full-text search index table.",
                  "lineno": 2201,
                  "endlineno": 2201
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "detect_fts",
                "lineno": 2213,
                "endlineno": 2238,
                "docstring": {
                  "value": "Detect if table has a corresponding FTS virtual table and return it",
                  "lineno": 2214,
                  "endlineno": 2214
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "optimize",
                "lineno": 2240,
                "endlineno": 2251,
                "docstring": {
                  "value": "Run the ``optimize`` operation against the associated full-text search index table.",
                  "lineno": 2241,
                  "endlineno": 2241
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": "'Table'"
              },
              {
                "kind": "function",
                "name": "search_sql",
                "lineno": 2253,
                "endlineno": 2325,
                "docstring": {
                  "value": "\"\nReturn SQL string that can be used to execute searches against this table.\n\n:param columns: Columns to search against\n:param order_by: Column or SQL expression to sort by\n:param limit: SQL limit\n:param offset: SQL offset\n:param where: Extra SQL fragment for the WHERE clause",
                  "lineno": 2261,
                  "endlineno": 2269
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "order_by",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "limit",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "int",
                        "full": "int"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "offset",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "int",
                        "full": "int"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "search",
                "lineno": 2327,
                "endlineno": 2373,
                "docstring": {
                  "value": "Execute a search against this table using SQLite full-text search, returning a sequence of\ndictionaries for each row.\n\n:param q: Terms to search for\n:param order_by: Defaults to order by rank, or specify a column here.\n:param columns: List of columns to return, defaults to all columns.\n:param limit: Optional integer limit for returned rows.\n:param offset: Optional integer SQL offset.\n:param where: Extra SQL fragment for the WHERE clause\n:param where_args: Arguments to use for :param placeholders in the extra WHERE clause\n:param quote: Apply quoting to disable any special characters in the search query\n\nSee :ref:`python_api_fts_search`.",
                  "lineno": 2338,
                  "endlineno": 2352
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "q",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "order_by",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "limit",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "int",
                        "full": "int"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "offset",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "int",
                        "full": "int"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where_args",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "quote",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": [
                  {
                    "source": "Generator",
                    "full": "typing.Generator"
                  },
                  "[",
                  [
                    {
                      "source": "dict",
                      "full": "dict"
                    },
                    ", ",
                    "None",
                    ", ",
                    "None"
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "value_or_default",
                "lineno": 2375,
                "endlineno": 2376,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "key",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "value",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "delete",
                "lineno": 2378,
                "endlineno": 2393,
                "docstring": {
                  "value": "Delete row matching the specified primary key.\n\n:param pk_values: A single value, or a tuple of values for tables that have a compound primary key",
                  "lineno": 2379,
                  "endlineno": 2383
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk_values",
                    "annotation": [
                      {
                        "source": "Union",
                        "full": "typing.Union"
                      },
                      "[",
                      [
                        {
                          "source": "list",
                          "full": "list"
                        },
                        ", ",
                        {
                          "source": "tuple",
                          "full": "tuple"
                        },
                        ", ",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        {
                          "source": "int",
                          "full": "int"
                        },
                        ", ",
                        {
                          "source": "float",
                          "full": "float"
                        }
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": "'Table'"
              },
              {
                "kind": "function",
                "name": "delete_where",
                "lineno": 2395,
                "endlineno": 2419,
                "docstring": {
                  "value": "Delete rows matching the specified where clause, or delete all rows in the table.\n\nSee :ref:`python_api_delete_where`.\n\n:param where: SQL where fragment to use, for example ``id > ?``\n:param where_args: Parameters to use with that fragment - an iterable for ``id > ?``\n  parameters, or a dictionary for ``id > :id``\n:param analyze: Set to ``True`` to run ``ANALYZE`` after the rows have been deleted.",
                  "lineno": 2401,
                  "endlineno": 2410
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "where",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where_args",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "analyze",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": "'Table'"
              },
              {
                "kind": "function",
                "name": "update",
                "lineno": 2421,
                "endlineno": 2475,
                "docstring": {
                  "value": "Execute a SQL ``UPDATE`` against the specified row.\n\nSee :ref:`python_api_update`.\n\n:param pk_values: The primary key of an individual record - can be a tuple if the\n  table has a compound primary key.\n:param updates: A dictionary mapping columns to their updated values.\n:param alter: Set to ``True`` to add any missing columns.\n:param conversions: Optional dictionary of SQL functions to apply during the update, for example\n  ``{\"mycolumn\": \"upper(?)\"}``.",
                  "lineno": 2428,
                  "endlineno": 2439
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk_values",
                    "annotation": [
                      {
                        "source": "Union",
                        "full": "typing.Union"
                      },
                      "[",
                      [
                        {
                          "source": "list",
                          "full": "list"
                        },
                        ", ",
                        {
                          "source": "tuple",
                          "full": "tuple"
                        },
                        ", ",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        {
                          "source": "int",
                          "full": "int"
                        },
                        ", ",
                        {
                          "source": "float",
                          "full": "float"
                        }
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "updates",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "dict",
                        "full": "dict"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "alter",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "conversions",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "dict",
                        "full": "dict"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": "'Table'"
              },
              {
                "kind": "function",
                "name": "convert",
                "lineno": 2477,
                "endlineno": 2551,
                "docstring": {
                  "value": "Apply conversion function ``fn`` to every value in the specified columns.\n\n:param columns: A single column or list of string column names to convert.\n:param fn: A callable that takes a single argument, ``value``, and returns it converted.\n:param output: Optional string column name to write the results to (defaults to the input column).\n:param output_type: If the output column needs to be created, this is the type that will be used\n  for the new column.\n:param drop: Should the original column be dropped once the conversion is complete?\n:param multi: If ``True`` the return value of ``fn(value)`` will be expected to be a\n  dictionary, and new columns will be created for each key of that dictionary.\n:param where: SQL fragment to use as a ``WHERE`` clause to limit the rows to which the conversion\n  is applied, for example ``age > ?`` or ``age > :age``.\n:param where_args: List of arguments (if using ``?``) or a dictionary (if using ``:age``).\n:param show_progress: Should a progress bar be displayed?\n\nSee :ref:`python_api_convert`.",
                  "lineno": 2489,
                  "endlineno": 2506
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Union",
                        "full": "typing.Union"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        [
                          {
                            "source": "List",
                            "full": "typing.List"
                          },
                          "[",
                          {
                            "source": "str",
                            "full": "str"
                          },
                          "]"
                        ]
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "fn",
                    "annotation": {
                      "source": "Callable",
                      "full": "typing.Callable"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "output",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "output_type",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "drop",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "multi",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "where",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where_args",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "show_progress",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "_convert_multi",
                "lineno": 2553,
                "endlineno": 2600,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "column",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "fn",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "drop",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "show_progress",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "where",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where_args",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "build_insert_queries_and_params",
                "lineno": 2602,
                "endlineno": 2704,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "extracts",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "chunk",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "all_columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "hash_id",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "upsert",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "conversions",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "num_records_processed",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "replace",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "ignore",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "insert_chunk",
                "lineno": 2706,
                "endlineno": 2795,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "alter",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "extracts",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "chunk",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "all_columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "hash_id",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "upsert",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "conversions",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "num_records_processed",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "replace",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "ignore",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "insert",
                "lineno": 2797,
                "endlineno": 2861,
                "docstring": {
                  "value": "Insert a single record into the table. The table will be created with a schema that matches\nthe inserted record if it does not already exist, see :ref:`python_api_creating_tables`.\n\n- ``record`` - required: a dictionary representing the record to be inserted.\n\nThe other parameters are optional, and mostly influence how the new table will be created if\nthat table does not exist yet.\n\nEach of them defaults to ``DEFAULT``, which indicates that the default setting for the current\n``Table`` object (specified in the table constructor) should be used.\n\n:param record: Dictionary record to be inserted\n:param pk: If creating the table, which column should be the primary key.\n:param foreign_keys: See :ref:`python_api_foreign_keys`.\n:param column_order: List of strings specifying a full or partial column order\n  to use when creating the table.\n:param not_null: Set of strings specifying columns that should be ``NOT NULL``.\n:param defaults: Dictionary specifying default values for specific columns.\n:param hash_id: Name of a column to create and use as a primary key, where the\n  value of thet primary key will be derived as a SHA1 hash of the other column values\n  in the record. ``hash_id=\"id\"`` is a common column name used for this.\n:param alter: Boolean, should any missing columns be added automatically?\n:param ignore: Boolean, if a record already exists with this primary key, ignore this insert.\n:param replace: Boolean, if a record already exists with this primary key, replace it with this new record.\n:param extracts: A list of columns to extract to other tables, or a dictionary that maps\n  ``{column_name: other_table_name}``. See :ref:`python_api_extracts`.\n:param conversions: Dictionary specifying SQL conversion functions to be applied to the data while it\n  is being inserted, for example ``{\"name\": \"upper(?)\"}``. See :ref:`python_api_conversions`.\n:param columns: Dictionary over-riding the detected types used for the columns, for example\n  ``{\"age\": int, \"weight\": float}``.",
                  "lineno": 2814,
                  "endlineno": 2845
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "record",
                    "annotation": [
                      {
                        "source": "Dict",
                        "full": "typing.Dict"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        {
                          "source": "Any",
                          "full": "typing.Any"
                        }
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "column_order",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "List",
                              "full": "typing.List"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ],
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "not_null",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Set",
                              "full": "typing.Set"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ],
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "defaults",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "Any",
                                "full": "typing.Any"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "hash_id",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Iterable",
                              "full": "typing.Iterable"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ],
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "alter",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "bool",
                            "full": "bool"
                          },
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "ignore",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "bool",
                            "full": "bool"
                          },
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "replace",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "bool",
                            "full": "bool"
                          },
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "extracts",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "str",
                                "full": "str"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          [
                            {
                              "source": "List",
                              "full": "typing.List"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ],
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "conversions",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "str",
                                "full": "str"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "Any",
                                "full": "typing.Any"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  }
                ],
                "returns": "'Table'"
              },
              {
                "kind": "function",
                "name": "insert_all",
                "lineno": 2863,
                "endlineno": 2992,
                "docstring": {
                  "value": "Like ``.insert()`` but takes a list of records and ensures that the table\nthat it creates (if table does not exist) has columns for ALL of that data.\n\nUse ``analyze=True`` to run ``ANALYZE`` after the insert has completed.",
                  "lineno": 2884,
                  "endlineno": 2889
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "records",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "column_order",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "not_null",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "defaults",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "batch_size",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "hash_id",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "alter",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "ignore",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "replace",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "truncate",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "extracts",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "conversions",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "upsert",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "analyze",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": "'Table'"
              },
              {
                "kind": "function",
                "name": "upsert",
                "lineno": 2994,
                "endlineno": 3028,
                "docstring": {
                  "value": "Like ``.insert()`` but performs an ``UPSERT``, where records are inserted if they do\nnot exist and updated if they DO exist, based on matching against their primary key.\n\nSee :ref:`python_api_upsert`.",
                  "lineno": 3009,
                  "endlineno": 3014
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "record",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "column_order",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "not_null",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "defaults",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "hash_id",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "alter",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "extracts",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "conversions",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  }
                ],
                "returns": "'Table'"
              },
              {
                "kind": "function",
                "name": "upsert_all",
                "lineno": 3030,
                "endlineno": 3066,
                "docstring": {
                  "value": "Like ``.upsert()`` but can be applied to a list of records.",
                  "lineno": 3047,
                  "endlineno": 3049
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "records",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "column_order",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "not_null",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "defaults",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "batch_size",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "hash_id",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "alter",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "extracts",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "conversions",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "analyze",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": "'Table'"
              },
              {
                "kind": "function",
                "name": "add_missing_columns",
                "lineno": 3068,
                "endlineno": 3074,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "records",
                    "annotation": [
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": "'Table'"
              },
              {
                "kind": "function",
                "name": "lookup",
                "lineno": 3076,
                "endlineno": 3155,
                "docstring": {
                  "value": "Create or populate a lookup table with the specified values.\n\n``db[\"Species\"].lookup({\"name\": \"Palm\"})`` will create a table called ``Species``\n(if one does not already exist) with two columns: ``id`` and ``name``. It will\nset up a unique constraint on the ``name`` column to guarantee it will not\ncontain duplicate rows.\n\nIt will then insert a new row with the ``name`` set to ``Palm`` and return the\nnew integer primary key value.\n\nAn optional second argument can be provided with more ``name: value`` pairs to\nbe included only if the record is being created for the first time. These will\nbe ignored on subsequent lookup calls for records that already exist.\n\nAll other keyword arguments are passed through to ``.insert()``.\n\nSee :ref:`python_api_lookup_tables` for more details.\n\n:param lookup_values: Dictionary specifying column names and values to use for the lookup\n:param extra_values: Additional column values to be used only if creating a new record",
                  "lineno": 3089,
                  "endlineno": 3110
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "lookup_values",
                    "annotation": [
                      {
                        "source": "Dict",
                        "full": "typing.Dict"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        {
                          "source": "Any",
                          "full": "typing.Any"
                        }
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "extra_values",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "pk",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "'id'"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "ForeignKeysType",
                        "full": "sqlite_utils.db.ForeignKeysType"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "column_order",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "List",
                          "full": "typing.List"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "not_null",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Set",
                          "full": "typing.Set"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "defaults",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "extracts",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "str",
                                "full": "str"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          [
                            {
                              "source": "List",
                              "full": "typing.List"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ]
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "conversions",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "str",
                            "full": "str"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "m2m",
                "lineno": 3157,
                "endlineno": 3243,
                "docstring": {
                  "value": "After inserting a record in a table, create one or more records in some other\ntable and then create many-to-many records linking the original record and the\nnewly created records together.\n\nFor example::\n\n    db[\"dogs\"].insert({\"id\": 1, \"name\": \"Cleo\"}, pk=\"id\").m2m(\n        \"humans\", {\"id\": 1, \"name\": \"Natalie\"}, pk=\"id\"\n    )\n\nSee :ref:`python_api_m2m` for details.\n\n:param other_table: The name of the table to insert the new records into.\n:param record_or_iterable: A single dictionary record to insert, or a list of records.\n:param pk: The primary key to use if creating ``other_table``.\n:param lookup: Same dictionary as for ``.lookup()``, to create a many-to-many lookup table.\n:param m2m_table: The string name to use for the many-to-many table, defaults to creating\n  this automatically based on the names of the two tables.\n:param alter: Set to ``True`` to add any missing columns on ``other_table`` if that table\n  already exists.",
                  "lineno": 3168,
                  "endlineno": 3189
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "other_table",
                    "annotation": [
                      {
                        "source": "Union",
                        "full": "typing.Union"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        "'Table'"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "record_or_iterable",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Iterable",
                              "full": "typing.Iterable"
                            },
                            "[",
                            [
                              {
                                "source": "Dict",
                                "full": "typing.Dict"
                              },
                              "[",
                              [
                                {
                                  "source": "str",
                                  "full": "str"
                                },
                                ", ",
                                {
                                  "source": "Any",
                                  "full": "typing.Any"
                                }
                              ],
                              "]"
                            ],
                            "]"
                          ],
                          ", ",
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "Any",
                                "full": "typing.Any"
                              }
                            ],
                            "]"
                          ]
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "pk",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          },
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "lookup",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "m2m_table",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "alter",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "analyze",
                "lineno": 3245,
                "endlineno": 3247,
                "docstring": {
                  "value": "Run ANALYZE against this table",
                  "lineno": 3246,
                  "endlineno": 3246
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "analyze_column",
                "lineno": 3249,
                "endlineno": 3323,
                "docstring": {
                  "value": "Return statistics about the specified column.\n\nSee :ref:`python_api_analyze_column`.\n\n:param column: Column to analyze\n:param common_limit: Show this many column values\n:param value_truncate: Truncate display of common values to this many characters\n:param total_rows: Optimization - pass the total number of rows in the table to save running a fresh ``count(*)`` query",
                  "lineno": 3252,
                  "endlineno": 3261
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "column",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "common_limit",
                    "annotation": {
                      "source": "int",
                      "full": "int"
                    },
                    "kind": "positional or keyword",
                    "default": "10"
                  },
                  {
                    "name": "value_truncate",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "total_rows",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": "'ColumnDetails'"
              },
              {
                "kind": "function",
                "name": "add_geometry_column",
                "lineno": 3325,
                "endlineno": 3374,
                "docstring": {
                  "value": "In SpatiaLite, a geometry column can only be added to an existing table.\nTo do so, use ``table.add_geometry_column``, passing in a geometry type.\n\nBy default, this will add a nullable column using\n`SRID 4326 <https://spatialreference.org/ref/epsg/wgs-84/>`__. This can\nbe customized using the ``column_name``, ``srid`` and ``not_null`` arguments.\n\nReturns ``True`` if the column was successfully added, ``False`` if not.\n\n.. code-block:: python\n\n    from sqlite_utils.db import Database\n    from sqlite_utils.utils import find_spatialite\n\n    db = Database(\"mydb.db\")\n    db.init_spatialite(find_spatialite())\n\n    # the table must exist before adding a geometry column\n    table = db[\"locations\"].create({\"name\": str})\n    table.add_geometry_column(\"geometry\", \"POINT\")\n\n:param column_name: Name of column to add\n:param geometry_type: Type of geometry column, for example ``\"GEOMETRY\"`` or ``\"POINT\" or ``\"POLYGON\"``\n:param srid: Integer SRID, defaults to 4326 for WGS84\n:param coord_dimension: Dimensions to use, defaults to ``\"XY\"`` - set to ``\"XYZ\"`` to work in three dimensions\n:param not_null: Should the column be ``NOT NULL``",
                  "lineno": 3333,
                  "endlineno": 3360
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "column_name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "geometry_type",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "srid",
                    "annotation": {
                      "source": "int",
                      "full": "int"
                    },
                    "kind": "positional or keyword",
                    "default": "4326"
                  },
                  {
                    "name": "coord_dimension",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "'XY'"
                  },
                  {
                    "name": "not_null",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              },
              {
                "kind": "function",
                "name": "create_spatial_index",
                "lineno": 3376,
                "endlineno": 3407,
                "docstring": {
                  "value": "A spatial index allows for significantly faster bounding box queries.\nTo create one, use ``create_spatial_index`` with the name of an existing geometry column.\n\nReturns ``True`` if the index was successfully created, ``False`` if not. Calling this\nfunction if an index already exists is a no-op.\n\n.. code-block:: python\n\n    # assuming SpatiaLite is loaded, create the table, add the column\n    table = db[\"locations\"].create({\"name\": str})\n    table.add_geometry_column(\"geometry\", \"POINT\")\n\n    # now we can index it\n    table.create_spatial_index(\"geometry\")\n\n    # the spatial index is a virtual table, which we can inspect\n    print(db[\"idx_locations_geometry\"].schema)\n    # outputs:\n    # CREATE VIRTUAL TABLE \"idx_locations_geometry\" USING rtree(pkid, xmin, xmax, ymin, ymax)\n\n:param column_name: Geometry column to create the spatial index against",
                  "lineno": 3377,
                  "endlineno": 3399
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "column_name",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              }
            ],
            "bases": [
              {
                "source": "Queryable",
                "full": "sqlite_utils.db.Queryable"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "View",
            "lineno": 3410,
            "endlineno": 3436,
            "labels": [],
            "members": [
              {
                "kind": "function",
                "name": "exists",
                "lineno": 3411,
                "endlineno": 3412,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "__repr__",
                "lineno": 3414,
                "endlineno": 3417,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "drop",
                "lineno": 3419,
                "endlineno": 3430,
                "docstring": {
                  "value": "Drop this view.\n\n:param ignore: Set to ``True`` to ignore the error if the view does not exist",
                  "lineno": 3420,
                  "endlineno": 3424
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "ignore",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "enable_fts",
                "lineno": 3432,
                "endlineno": 3436,
                "docstring": {
                  "value": "``enable_fts()`` is supported on tables but not on views.",
                  "lineno": 3433,
                  "endlineno": 3433
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "*args",
                    "annotation": null,
                    "kind": "variadic positional",
                    "default": "()"
                  },
                  {
                    "name": "**kwargs",
                    "annotation": null,
                    "kind": "variadic keyword",
                    "default": "{}"
                  }
                ],
                "returns": null
              }
            ],
            "bases": [
              {
                "source": "Queryable",
                "full": "sqlite_utils.db.Queryable"
              }
            ],
            "decorators": []
          },
          {
            "kind": "function",
            "name": "jsonify_if_needed",
            "lineno": 3439,
            "endlineno": 3449,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "value",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "resolve_extracts",
            "lineno": 3452,
            "endlineno": 3459,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "extracts",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  [
                    {
                      "source": "Union",
                      "full": "typing.Union"
                    },
                    "[",
                    [
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "str",
                            "full": "str"
                          }
                        ],
                        "]"
                      ],
                      ", ",
                      [
                        {
                          "source": "List",
                          "full": "typing.List"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      ", ",
                      [
                        {
                          "source": "Tuple",
                          "full": "typing.Tuple"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ]
                    ],
                    "]"
                  ],
                  "]"
                ],
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": {
              "source": "dict",
              "full": "dict"
            }
          },
          {
            "kind": "function",
            "name": "validate_column_names",
            "lineno": 3462,
            "endlineno": 3467,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "columns",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "fix_square_braces",
            "lineno": 3470,
            "endlineno": 3478,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "records",
                "annotation": [
                  {
                    "source": "Iterable",
                    "full": "typing.Iterable"
                  },
                  "[",
                  [
                    {
                      "source": "Dict",
                      "full": "typing.Dict"
                    },
                    "[",
                    [
                      {
                        "source": "str",
                        "full": "str"
                      },
                      ", ",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      }
                    ],
                    "]"
                  ],
                  "]"
                ],
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          }
        ],
        "filepath": "/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/sqlite_utils/db.py"
      }
    ],
    "filepath": "/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/sqlite_utils/__init__.py"
  }
}
