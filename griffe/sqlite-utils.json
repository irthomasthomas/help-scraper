{
  "sqlite_utils": {
    "kind": "module",
    "name": "sqlite_utils",
    "labels": [],
    "members": [
      {
        "kind": "alias",
        "name": "Database",
        "target_path": "sqlite_utils.db.Database",
        "lineno": 1,
        "endlineno": 1
      },
      {
        "kind": "alias",
        "name": "suggest_column_types",
        "target_path": "sqlite_utils.utils.suggest_column_types",
        "lineno": 2,
        "endlineno": 2
      },
      {
        "kind": "attribute",
        "name": "__all__",
        "lineno": 4,
        "endlineno": 4,
        "labels": [
          "module-attribute"
        ],
        "members": [],
        "value": "['Database', 'suggest_column_types']"
      },
      {
        "kind": "module",
        "name": "cli",
        "labels": [],
        "members": [
          {
            "kind": "alias",
            "name": "base64",
            "target_path": "base64",
            "lineno": 1,
            "endlineno": 1
          },
          {
            "kind": "alias",
            "name": "click",
            "target_path": "click",
            "lineno": 2,
            "endlineno": 2
          },
          {
            "kind": "alias",
            "name": "DefaultGroup",
            "target_path": "click_default_group.DefaultGroup",
            "lineno": 3,
            "endlineno": 3
          },
          {
            "kind": "alias",
            "name": "datetime",
            "target_path": "datetime.datetime",
            "lineno": 4,
            "endlineno": 4
          },
          {
            "kind": "alias",
            "name": "hashlib",
            "target_path": "hashlib",
            "lineno": 5,
            "endlineno": 5
          },
          {
            "kind": "alias",
            "name": "pathlib",
            "target_path": "pathlib",
            "lineno": 6,
            "endlineno": 6
          },
          {
            "kind": "alias",
            "name": "run_module",
            "target_path": "runpy.run_module",
            "lineno": 7,
            "endlineno": 7
          },
          {
            "kind": "alias",
            "name": "sqlite_utils",
            "target_path": "sqlite_utils",
            "lineno": 8,
            "endlineno": 8
          },
          {
            "kind": "alias",
            "name": "AlterError",
            "target_path": "sqlite_utils.db.AlterError",
            "lineno": 9,
            "endlineno": 9
          },
          {
            "kind": "alias",
            "name": "BadMultiValues",
            "target_path": "sqlite_utils.db.BadMultiValues",
            "lineno": 9,
            "endlineno": 9
          },
          {
            "kind": "alias",
            "name": "DescIndex",
            "target_path": "sqlite_utils.db.DescIndex",
            "lineno": 9,
            "endlineno": 9
          },
          {
            "kind": "alias",
            "name": "NoTable",
            "target_path": "sqlite_utils.db.NoTable",
            "lineno": 9,
            "endlineno": 9
          },
          {
            "kind": "alias",
            "name": "maximize_csv_field_size_limit",
            "target_path": "sqlite_utils.utils.maximize_csv_field_size_limit",
            "lineno": 10,
            "endlineno": 10
          },
          {
            "kind": "alias",
            "name": "recipes",
            "target_path": "sqlite_utils.recipes",
            "lineno": 11,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "textwrap",
            "target_path": "textwrap",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "inspect",
            "target_path": "inspect",
            "lineno": 13,
            "endlineno": 13
          },
          {
            "kind": "alias",
            "name": "io",
            "target_path": "io",
            "lineno": 14,
            "endlineno": 14
          },
          {
            "kind": "alias",
            "name": "itertools",
            "target_path": "itertools",
            "lineno": 15,
            "endlineno": 15
          },
          {
            "kind": "alias",
            "name": "json",
            "target_path": "json",
            "lineno": 16,
            "endlineno": 16
          },
          {
            "kind": "alias",
            "name": "os",
            "target_path": "os",
            "lineno": 17,
            "endlineno": 17
          },
          {
            "kind": "alias",
            "name": "sys",
            "target_path": "sys",
            "lineno": 18,
            "endlineno": 18
          },
          {
            "kind": "alias",
            "name": "csv_std",
            "target_path": "csv",
            "lineno": 19,
            "endlineno": 19
          },
          {
            "kind": "alias",
            "name": "tabulate",
            "target_path": "tabulate",
            "lineno": 20,
            "endlineno": 20
          },
          {
            "kind": "alias",
            "name": "OperationalError",
            "target_path": "sqlite_utils.utils.OperationalError",
            "lineno": 21,
            "endlineno": 34
          },
          {
            "kind": "alias",
            "name": "_compile_code",
            "target_path": "sqlite_utils.utils._compile_code",
            "lineno": 21,
            "endlineno": 34
          },
          {
            "kind": "alias",
            "name": "chunks",
            "target_path": "sqlite_utils.utils.chunks",
            "lineno": 21,
            "endlineno": 34
          },
          {
            "kind": "alias",
            "name": "file_progress",
            "target_path": "sqlite_utils.utils.file_progress",
            "lineno": 21,
            "endlineno": 34
          },
          {
            "kind": "alias",
            "name": "find_spatialite",
            "target_path": "sqlite_utils.utils.find_spatialite",
            "lineno": 21,
            "endlineno": 34
          },
          {
            "kind": "alias",
            "name": "_flatten",
            "target_path": "sqlite_utils.utils.flatten",
            "lineno": 21,
            "endlineno": 34
          },
          {
            "kind": "alias",
            "name": "sqlite3",
            "target_path": "sqlite_utils.utils.sqlite3",
            "lineno": 21,
            "endlineno": 34
          },
          {
            "kind": "alias",
            "name": "decode_base64_values",
            "target_path": "sqlite_utils.utils.decode_base64_values",
            "lineno": 21,
            "endlineno": 34
          },
          {
            "kind": "alias",
            "name": "progressbar",
            "target_path": "sqlite_utils.utils.progressbar",
            "lineno": 21,
            "endlineno": 34
          },
          {
            "kind": "alias",
            "name": "rows_from_file",
            "target_path": "sqlite_utils.utils.rows_from_file",
            "lineno": 21,
            "endlineno": 34
          },
          {
            "kind": "alias",
            "name": "Format",
            "target_path": "sqlite_utils.utils.Format",
            "lineno": 21,
            "endlineno": 34
          },
          {
            "kind": "alias",
            "name": "TypeTracker",
            "target_path": "sqlite_utils.utils.TypeTracker",
            "lineno": 21,
            "endlineno": 34
          },
          {
            "kind": "attribute",
            "name": "CONTEXT_SETTINGS",
            "lineno": 37,
            "endlineno": 37,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "dict(help_option_names=['-h', '--help'])"
          },
          {
            "kind": "attribute",
            "name": "VALID_COLUMN_TYPES",
            "lineno": 39,
            "endlineno": 39,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "('INTEGER', 'TEXT', 'FLOAT', 'BLOB')"
          },
          {
            "kind": "attribute",
            "name": "UNICODE_ERROR",
            "lineno": 41,
            "endlineno": 51,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "\"\\n{}\\n\\nThe input you provided uses a character encoding other than utf-8.\\n\\nYou can fix this by passing the --encoding= option with the encoding of the file.\\n\\nIf you do not know the encoding, running 'file filename.csv' may tell you.\\n\\nIt's often worth trying: --encoding=latin-1\\n\".strip()"
          },
          {
            "kind": "function",
            "name": "output_options",
            "lineno": 56,
            "endlineno": 92,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "fn",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "load_extension_option",
            "lineno": 95,
            "endlineno": 100,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "fn",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "cli",
            "lineno": 103,
            "endlineno": 112,
            "docstring": {
              "value": "Commands for interacting with a SQLite database",
              "lineno": 111,
              "endlineno": 111
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "click.group(cls=DefaultGroup, default='query', default_if_no_args=True, context_settings=CONTEXT_SETTINGS)",
                "lineno": 103,
                "endlineno": 108
              },
              {
                "value": "click.version_option()",
                "lineno": 109,
                "endlineno": 109
              }
            ],
            "parameters": [],
            "returns": null
          },
          {
            "kind": "function",
            "name": "tables",
            "lineno": 115,
            "endlineno": 208,
            "docstring": {
              "value": "List the tables in the database\n\nExample:\n\n\b\n    sqlite-utils tables trees.db",
              "lineno": 162,
              "endlineno": 168
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 115,
                "endlineno": 115
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 116,
                "endlineno": 120
              },
              {
                "value": "click.option('--fts4', help='Just show FTS4 enabled tables', default=False, is_flag=True)",
                "lineno": 121,
                "endlineno": 123
              },
              {
                "value": "click.option('--fts5', help='Just show FTS5 enabled tables', default=False, is_flag=True)",
                "lineno": 124,
                "endlineno": 126
              },
              {
                "value": "click.option('--counts', help='Include row counts per table', default=False, is_flag=True)",
                "lineno": 127,
                "endlineno": 129
              },
              {
                "value": "output_options",
                "lineno": 130,
                "endlineno": 130
              },
              {
                "value": "click.option('--columns', help='Include list of columns for each table', is_flag=True, default=False)",
                "lineno": 131,
                "endlineno": 136
              },
              {
                "value": "click.option('--schema', help='Include schema for each table', is_flag=True, default=False)",
                "lineno": 137,
                "endlineno": 142
              },
              {
                "value": "load_extension_option",
                "lineno": 143,
                "endlineno": 143
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fts4",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fts5",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "counts",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "columns",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "schema",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "views",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "views",
            "lineno": 211,
            "endlineno": 273,
            "docstring": {
              "value": "List the views in the database\n\nExample:\n\n\b\n    sqlite-utils views trees.db",
              "lineno": 249,
              "endlineno": 255
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 211,
                "endlineno": 211
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 212,
                "endlineno": 216
              },
              {
                "value": "click.option('--counts', help='Include row counts per view', default=False, is_flag=True)",
                "lineno": 217,
                "endlineno": 219
              },
              {
                "value": "output_options",
                "lineno": 220,
                "endlineno": 220
              },
              {
                "value": "click.option('--columns', help='Include list of columns for each view', is_flag=True, default=False)",
                "lineno": 221,
                "endlineno": 226
              },
              {
                "value": "click.option('--schema', help='Include schema for each view', is_flag=True, default=False)",
                "lineno": 227,
                "endlineno": 232
              },
              {
                "value": "load_extension_option",
                "lineno": 233,
                "endlineno": 233
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "counts",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "columns",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "schema",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "optimize",
            "lineno": 276,
            "endlineno": 301,
            "docstring": {
              "value": "Optimize all full-text search tables and then run VACUUM - should shrink the database file\n\nExample:\n\n\b\n    sqlite-utils optimize chickens.db",
              "lineno": 286,
              "endlineno": 292
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 276,
                "endlineno": 276
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 277,
                "endlineno": 281
              },
              {
                "value": "click.argument('tables', nargs=-1)",
                "lineno": 282,
                "endlineno": 282
              },
              {
                "value": "click.option('--no-vacuum', help=\"Don't run VACUUM\", default=False, is_flag=True)",
                "lineno": 283,
                "endlineno": 283
              },
              {
                "value": "load_extension_option",
                "lineno": 284,
                "endlineno": 284
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tables",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_vacuum",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "rebuild_fts",
            "lineno": 304,
            "endlineno": 326,
            "docstring": {
              "value": "Rebuild all or specific full-text search tables\n\nExample:\n\n\b\n    sqlite-utils rebuild-fts chickens.db chickens",
              "lineno": 313,
              "endlineno": 319
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='rebuild-fts')",
                "lineno": 304,
                "endlineno": 304
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 305,
                "endlineno": 309
              },
              {
                "value": "click.argument('tables', nargs=-1)",
                "lineno": 310,
                "endlineno": 310
              },
              {
                "value": "load_extension_option",
                "lineno": 311,
                "endlineno": 311
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tables",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "analyze",
            "lineno": 329,
            "endlineno": 352,
            "docstring": {
              "value": "Run ANALYZE against the whole database, or against specific named indexes and tables\n\nExample:\n\n\b\n    sqlite-utils analyze chickens.db",
              "lineno": 337,
              "endlineno": 343
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 329,
                "endlineno": 329
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 330,
                "endlineno": 334
              },
              {
                "value": "click.argument('names', nargs=-1)",
                "lineno": 335,
                "endlineno": 335
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "names",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "vacuum",
            "lineno": 355,
            "endlineno": 369,
            "docstring": {
              "value": "Run VACUUM against the database\n\nExample:\n\n\b\n    sqlite-utils vacuum chickens.db",
              "lineno": 362,
              "endlineno": 368
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 355,
                "endlineno": 355
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 356,
                "endlineno": 360
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "dump",
            "lineno": 372,
            "endlineno": 390,
            "docstring": {
              "value": "Output a SQL dump of the schema and full contents of the database\n\nExample:\n\n\b\n    sqlite-utils dump chickens.db",
              "lineno": 380,
              "endlineno": 386
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 372,
                "endlineno": 372
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 373,
                "endlineno": 377
              },
              {
                "value": "load_extension_option",
                "lineno": 378,
                "endlineno": 378
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "add_column",
            "lineno": 393,
            "endlineno": 455,
            "docstring": {
              "value": "Add a column to the specified table\n\nExample:\n\n\b\n    sqlite-utils add-column chickens.db chickens weight float",
              "lineno": 440,
              "endlineno": 446
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='add-column')",
                "lineno": 393,
                "endlineno": 393
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 394,
                "endlineno": 398
              },
              {
                "value": "click.argument('table')",
                "lineno": 399,
                "endlineno": 399
              },
              {
                "value": "click.argument('col_name')",
                "lineno": 400,
                "endlineno": 400
              },
              {
                "value": "click.argument('col_type', type=click.Choice(['integer', 'float', 'blob', 'text', 'INTEGER', 'FLOAT', 'BLOB', 'TEXT']), required=False)",
                "lineno": 401,
                "endlineno": 407
              },
              {
                "value": "click.option('--fk', type=str, required=False, help='Table to reference as a foreign key')",
                "lineno": 408,
                "endlineno": 410
              },
              {
                "value": "click.option('--fk-col', type=str, required=False, help='Referenced column on that foreign key table - if omitted will automatically use the primary key')",
                "lineno": 411,
                "endlineno": 416
              },
              {
                "value": "click.option('--not-null-default', type=str, required=False, help=\"Add NOT NULL DEFAULT 'TEXT' constraint\")",
                "lineno": 417,
                "endlineno": 422
              },
              {
                "value": "click.option('--ignore', is_flag=True, help='If column already exists, do nothing')",
                "lineno": 423,
                "endlineno": 427
              },
              {
                "value": "load_extension_option",
                "lineno": 428,
                "endlineno": 428
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "col_name",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "col_type",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fk",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fk_col",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "not_null_default",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "add_foreign_key",
            "lineno": 458,
            "endlineno": 491,
            "docstring": {
              "value": "Add a new foreign key constraint to an existing table\n\nExample:\n\n    sqlite-utils add-foreign-key my.db books author_id authors id\n\nWARNING: Could corrupt your database! Back up your database file first.",
              "lineno": 477,
              "endlineno": 485
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='add-foreign-key')",
                "lineno": 458,
                "endlineno": 458
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 459,
                "endlineno": 463
              },
              {
                "value": "click.argument('table')",
                "lineno": 464,
                "endlineno": 464
              },
              {
                "value": "click.argument('column')",
                "lineno": 465,
                "endlineno": 465
              },
              {
                "value": "click.argument('other_table', required=False)",
                "lineno": 466,
                "endlineno": 466
              },
              {
                "value": "click.argument('other_column', required=False)",
                "lineno": 467,
                "endlineno": 467
              },
              {
                "value": "click.option('--ignore', is_flag=True, help='If foreign key already exists, do nothing')",
                "lineno": 468,
                "endlineno": 472
              },
              {
                "value": "load_extension_option",
                "lineno": 473,
                "endlineno": 473
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "other_table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "other_column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "add_foreign_keys",
            "lineno": 494,
            "endlineno": 525,
            "docstring": {
              "value": "Add multiple new foreign key constraints to a database\n\nExample:\n\n\b\n    sqlite-utils add-foreign-keys my.db \\\n        books author_id authors id \\\n        authors country_id countries id",
              "lineno": 503,
              "endlineno": 512
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='add-foreign-keys')",
                "lineno": 494,
                "endlineno": 494
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 495,
                "endlineno": 499
              },
              {
                "value": "click.argument('foreign_key', nargs=-1)",
                "lineno": 500,
                "endlineno": 500
              },
              {
                "value": "load_extension_option",
                "lineno": 501,
                "endlineno": 501
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "foreign_key",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "index_foreign_keys",
            "lineno": 528,
            "endlineno": 546,
            "docstring": {
              "value": "Ensure every foreign key column has an index on it\n\nExample:\n\n\b\n    sqlite-utils index-foreign-keys chickens.db",
              "lineno": 536,
              "endlineno": 543
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='index-foreign-keys')",
                "lineno": 528,
                "endlineno": 528
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 529,
                "endlineno": 533
              },
              {
                "value": "load_extension_option",
                "lineno": 534,
                "endlineno": 534
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "create_index",
            "lineno": 549,
            "endlineno": 602,
            "docstring": {
              "value": "Add an index to the specified table for the specified columns\n\nExample:\n\n\b\n    sqlite-utils create-index chickens.db chickens name\n\nTo create an index in descending order:\n\n\b\n    sqlite-utils create-index chickens.db chickens -- -name",
              "lineno": 575,
              "endlineno": 587
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='create-index')",
                "lineno": 549,
                "endlineno": 549
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 550,
                "endlineno": 554
              },
              {
                "value": "click.argument('table')",
                "lineno": 555,
                "endlineno": 555
              },
              {
                "value": "click.argument('column', nargs=-1, required=True)",
                "lineno": 556,
                "endlineno": 556
              },
              {
                "value": "click.option('--name', help='Explicit name for the new index')",
                "lineno": 557,
                "endlineno": 557
              },
              {
                "value": "click.option('--unique', help='Make this a unique index', default=False, is_flag=True)",
                "lineno": 558,
                "endlineno": 558
              },
              {
                "value": "click.option('--if-not-exists', '--ignore', help='Ignore if index already exists', default=False, is_flag=True)",
                "lineno": 559,
                "endlineno": 565
              },
              {
                "value": "click.option('--analyze', help='Run ANALYZE after creating the index', is_flag=True)",
                "lineno": 566,
                "endlineno": 570
              },
              {
                "value": "load_extension_option",
                "lineno": 571,
                "endlineno": 571
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "name",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "unique",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "if_not_exists",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "analyze",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "enable_fts",
            "lineno": 605,
            "endlineno": 656,
            "docstring": {
              "value": "Enable full-text search for specific table and columns\"\n\nExample:\n\n\b\n    sqlite-utils enable-fts chickens.db chickens name",
              "lineno": 631,
              "endlineno": 637
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='enable-fts')",
                "lineno": 605,
                "endlineno": 605
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 606,
                "endlineno": 610
              },
              {
                "value": "click.argument('table')",
                "lineno": 611,
                "endlineno": 611
              },
              {
                "value": "click.argument('column', nargs=-1, required=True)",
                "lineno": 612,
                "endlineno": 612
              },
              {
                "value": "click.option('--fts4', help='Use FTS4', default=False, is_flag=True)",
                "lineno": 613,
                "endlineno": 613
              },
              {
                "value": "click.option('--fts5', help='Use FTS5', default=False, is_flag=True)",
                "lineno": 614,
                "endlineno": 614
              },
              {
                "value": "click.option('--tokenize', help='Tokenizer to use, e.g. porter')",
                "lineno": 615,
                "endlineno": 615
              },
              {
                "value": "click.option('--create-triggers', help='Create triggers to update the FTS tables when the parent table changes.', default=False, is_flag=True)",
                "lineno": 616,
                "endlineno": 621
              },
              {
                "value": "click.option('--replace', is_flag=True, help='Replace existing FTS configuration if it exists')",
                "lineno": 622,
                "endlineno": 626
              },
              {
                "value": "load_extension_option",
                "lineno": 627,
                "endlineno": 627
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fts4",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fts5",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tokenize",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "create_triggers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "replace",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "populate_fts",
            "lineno": 659,
            "endlineno": 678,
            "docstring": {
              "value": "Re-populate full-text search for specific table and columns\n\nExample:\n\n\b\n    sqlite-utils populate-fts chickens.db chickens name",
              "lineno": 669,
              "endlineno": 675
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='populate-fts')",
                "lineno": 659,
                "endlineno": 659
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 660,
                "endlineno": 664
              },
              {
                "value": "click.argument('table')",
                "lineno": 665,
                "endlineno": 665
              },
              {
                "value": "click.argument('column', nargs=-1, required=True)",
                "lineno": 666,
                "endlineno": 666
              },
              {
                "value": "load_extension_option",
                "lineno": 667,
                "endlineno": 667
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "disable_fts",
            "lineno": 681,
            "endlineno": 699,
            "docstring": {
              "value": "Disable full-text search for specific table\n\nExample:\n\n\b\n    sqlite-utils disable-fts chickens.db chickens",
              "lineno": 690,
              "endlineno": 696
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='disable-fts')",
                "lineno": 681,
                "endlineno": 681
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 682,
                "endlineno": 686
              },
              {
                "value": "click.argument('table')",
                "lineno": 687,
                "endlineno": 687
              },
              {
                "value": "load_extension_option",
                "lineno": 688,
                "endlineno": 688
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "enable_wal",
            "lineno": 702,
            "endlineno": 721,
            "docstring": {
              "value": "Enable WAL for database files\n\nExample:\n\n\b\n    sqlite-utils enable-wal chickens.db",
              "lineno": 711,
              "endlineno": 717
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='enable-wal')",
                "lineno": 702,
                "endlineno": 702
              },
              {
                "value": "click.argument('path', nargs=-1, type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 703,
                "endlineno": 708
              },
              {
                "value": "load_extension_option",
                "lineno": 709,
                "endlineno": 709
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "disable_wal",
            "lineno": 724,
            "endlineno": 743,
            "docstring": {
              "value": "Disable WAL for database files\n\nExample:\n\n\b\n    sqlite-utils disable-wal chickens.db",
              "lineno": 733,
              "endlineno": 739
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='disable-wal')",
                "lineno": 724,
                "endlineno": 724
              },
              {
                "value": "click.argument('path', nargs=-1, type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 725,
                "endlineno": 730
              },
              {
                "value": "load_extension_option",
                "lineno": 731,
                "endlineno": 731
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "enable_counts",
            "lineno": 746,
            "endlineno": 772,
            "docstring": {
              "value": "Configure triggers to update a _counts table with row counts\n\nExample:\n\n\b\n    sqlite-utils enable-counts chickens.db",
              "lineno": 755,
              "endlineno": 761
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='enable-counts')",
                "lineno": 746,
                "endlineno": 746
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 747,
                "endlineno": 751
              },
              {
                "value": "click.argument('tables', nargs=-1)",
                "lineno": 752,
                "endlineno": 752
              },
              {
                "value": "load_extension_option",
                "lineno": 753,
                "endlineno": 753
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tables",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "reset_counts",
            "lineno": 775,
            "endlineno": 792,
            "docstring": {
              "value": "Reset calculated counts in the _counts table\n\nExample:\n\n\b\n    sqlite-utils reset-counts chickens.db",
              "lineno": 783,
              "endlineno": 789
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='reset-counts')",
                "lineno": 775,
                "endlineno": 775
              },
              {
                "value": "click.argument('path', type=click.Path(exists=True, file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 776,
                "endlineno": 780
              },
              {
                "value": "load_extension_option",
                "lineno": 781,
                "endlineno": 781
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "attribute",
            "name": "_import_options",
            "lineno": 795,
            "endlineno": 830,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "(click.option('--flatten', is_flag=True, help='Flatten nested JSON objects, so {\"a\": {\"b\": 1}} becomes {\"a_b\": 1}'), click.option('--nl', is_flag=True, help='Expect newline-delimited JSON'), click.option('-c', '--csv', is_flag=True, help='Expect CSV input'), click.option('--tsv', is_flag=True, help='Expect TSV input'), click.option('--lines', is_flag=True, help=\"Treat each line as a single value called 'line'\"), click.option('--text', is_flag=True, help=\"Treat input as a single value called 'text'\"), click.option('--convert', help='Python code to convert each item'), click.option('--import', 'imports', type=str, multiple=True, help='Python modules to import'), click.option('--delimiter', help='Delimiter to use for CSV files'), click.option('--quotechar', help='Quote character to use for CSV/TSV'), click.option('--sniff', is_flag=True, help='Detect delimiter and quote character'), click.option('--no-headers', is_flag=True, help='CSV file has no header row'), click.option('--encoding', help='Character encoding for input, defaults to utf-8'))"
          },
          {
            "kind": "function",
            "name": "import_options",
            "lineno": 833,
            "endlineno": 836,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "fn",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "insert_upsert_options",
            "lineno": 839,
            "endlineno": 897,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "require_pk",
                "annotation": null,
                "kind": "keyword-only",
                "default": "False"
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "insert_upsert_implementation",
            "lineno": 900,
            "endlineno": 1080,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "file",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "pk",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "flatten",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "lines",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "text",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "convert",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "imports",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "delimiter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "quotechar",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sniff",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "encoding",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "batch_size",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "alter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "upsert",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "replace",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "truncate",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "not_null",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "None"
              },
              {
                "name": "default",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "None"
              },
              {
                "name": "detect_types",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "None"
              },
              {
                "name": "analyze",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "None"
              },
              {
                "name": "silent",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "bulk_sql",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "None"
              },
              {
                "name": "functions",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "None"
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_find_variables",
            "lineno": 1083,
            "endlineno": 1092,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "tb",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "vars",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "insert",
            "lineno": 1095,
            "endlineno": 1219,
            "docstring": {
              "value": "Insert records from FILE into a table, creating the table if it\ndoes not already exist.\n\nExample:\n\n    echo '{\"name\": \"Lila\"}' | sqlite-utils insert data.db chickens -\n\nBy default the input is expected to be a JSON object or array of objects.\n\n\b\n- Use --nl for newline-delimited JSON objects\n- Use --csv or --tsv for comma-separated or tab-separated input\n- Use --lines to write each incoming line to a column called \"line\"\n- Use --text to write the entire input to a column called \"text\"\n\nYou can also use --convert to pass a fragment of Python code that will\nbe used to convert each input.\n\nYour Python code will be passed a \"row\" variable representing the\nimported row, and can return a modified row.\n\nThis example uses just the name, latitude and longitude columns from\na CSV file, converting name to upper case and latitude and longitude\nto floating point numbers:\n\n\b\n    sqlite-utils insert plants.db plants plants.csv --csv --convert '\n      return {\n        \"name\": row[\"name\"].upper(),\n        \"latitude\": float(row[\"latitude\"]),\n        \"longitude\": float(row[\"longitude\"]),\n      }'\n\nIf you are using --lines your code will be passed a \"line\" variable,\nand for --text a \"text\" variable.\n\nWhen using --text your function can return an iterator of rows to\ninsert. This example inserts one record per word in the input:\n\n\b\n    echo 'A bunch of words' | sqlite-utils insert words.db words - \\\n      --text --convert '({\"word\": w} for w in text.split())'",
              "lineno": 1142,
              "endlineno": 1185
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 1095,
                "endlineno": 1095
              },
              {
                "value": "insert_upsert_options()",
                "lineno": 1096,
                "endlineno": 1096
              },
              {
                "value": "click.option('--ignore', is_flag=True, default=False, help='Ignore records if pk already exists')",
                "lineno": 1097,
                "endlineno": 1099
              },
              {
                "value": "click.option('--replace', is_flag=True, default=False, help='Replace records if pk already exists')",
                "lineno": 1100,
                "endlineno": 1105
              },
              {
                "value": "click.option('--truncate', is_flag=True, default=False, help='Truncate table before inserting records, if table already exists')",
                "lineno": 1106,
                "endlineno": 1111
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "file",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "pk",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "flatten",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "lines",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "text",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "convert",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "imports",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "delimiter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "quotechar",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sniff",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "encoding",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "batch_size",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "alter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "detect_types",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "analyze",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "silent",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "replace",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "truncate",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "not_null",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "default",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "upsert",
            "lineno": 1222,
            "endlineno": 1294,
            "docstring": {
              "value": "Upsert records based on their primary key. Works like 'insert' but if\nan incoming record has a primary key that matches an existing record\nthe existing record will be updated.\n\nExample:\n\n\b\n    echo '[\n        {\"id\": 1, \"name\": \"Lila\"},\n        {\"id\": 2, \"name\": \"Suna\"}\n    ]' | sqlite-utils upsert data.db chickens - --pk id",
              "lineno": 1251,
              "endlineno": 1263
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 1222,
                "endlineno": 1222
              },
              {
                "value": "insert_upsert_options(require_pk=True)",
                "lineno": 1223,
                "endlineno": 1223
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "file",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "pk",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "flatten",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "lines",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "text",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "convert",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "imports",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "batch_size",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "delimiter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "quotechar",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sniff",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "encoding",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "alter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "not_null",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "default",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "detect_types",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "analyze",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "silent",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "bulk",
            "lineno": 1297,
            "endlineno": 1376,
            "docstring": {
              "value": "Execute parameterized SQL against the provided list of documents.\n\nExample:\n\n\b\n    echo '[\n        {\"id\": 1, \"name\": \"Lila2\"},\n        {\"id\": 2, \"name\": \"Suna2\"}\n    ]' | sqlite-utils bulk data.db '\n        update chickens set name = :name where id = :id\n    ' -",
              "lineno": 1332,
              "endlineno": 1344
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 1297,
                "endlineno": 1297
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1298,
                "endlineno": 1302
              },
              {
                "value": "click.argument('sql')",
                "lineno": 1303,
                "endlineno": 1303
              },
              {
                "value": "click.argument('file', type=click.File('rb'), required=True)",
                "lineno": 1304,
                "endlineno": 1304
              },
              {
                "value": "click.option('--batch-size', type=int, default=100, help='Commit every X records')",
                "lineno": 1305,
                "endlineno": 1305
              },
              {
                "value": "click.option('--functions', help='Python code defining one or more custom SQL functions')",
                "lineno": 1306,
                "endlineno": 1308
              },
              {
                "value": "import_options",
                "lineno": 1309,
                "endlineno": 1309
              },
              {
                "value": "load_extension_option",
                "lineno": 1310,
                "endlineno": 1310
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sql",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "file",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "batch_size",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "functions",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "flatten",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "lines",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "text",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "convert",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "imports",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "delimiter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "quotechar",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sniff",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "encoding",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "create_database",
            "lineno": 1379,
            "endlineno": 1412,
            "docstring": {
              "value": "Create a new empty database file\n\nExample:\n\n\b\n    sqlite-utils create-database trees.db",
              "lineno": 1393,
              "endlineno": 1399
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='create-database')",
                "lineno": 1379,
                "endlineno": 1379
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1380,
                "endlineno": 1384
              },
              {
                "value": "click.option('--enable-wal', is_flag=True, help='Enable WAL mode on the created database')",
                "lineno": 1385,
                "endlineno": 1387
              },
              {
                "value": "click.option('--init-spatialite', is_flag=True, help='Enable SpatiaLite on the created database')",
                "lineno": 1388,
                "endlineno": 1390
              },
              {
                "value": "load_extension_option",
                "lineno": 1391,
                "endlineno": 1391
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "enable_wal",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "init_spatialite",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "create_table",
            "lineno": 1415,
            "endlineno": 1518,
            "docstring": {
              "value": "Add a table with the specified columns. Columns should be specified using\nname, type pairs, for example:\n\n\b\n    sqlite-utils create-table my.db people \\\n        id integer \\\n        name text \\\n        height float \\\n        photo blob --pk id",
              "lineno": 1470,
              "endlineno": 1480
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='create-table')",
                "lineno": 1415,
                "endlineno": 1415
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1416,
                "endlineno": 1420
              },
              {
                "value": "click.argument('table')",
                "lineno": 1421,
                "endlineno": 1421
              },
              {
                "value": "click.argument('columns', nargs=-1, required=True)",
                "lineno": 1422,
                "endlineno": 1422
              },
              {
                "value": "click.option('--pk', help='Column to use as primary key')",
                "lineno": 1423,
                "endlineno": 1423
              },
              {
                "value": "click.option('--not-null', multiple=True, help='Columns that should be created as NOT NULL')",
                "lineno": 1424,
                "endlineno": 1428
              },
              {
                "value": "click.option('--default', multiple=True, type=(str, str), help='Default value that should be set for a column')",
                "lineno": 1429,
                "endlineno": 1434
              },
              {
                "value": "click.option('--fk', multiple=True, type=(str, str, str), help='Column, other table, other column to set as a foreign key')",
                "lineno": 1435,
                "endlineno": 1440
              },
              {
                "value": "click.option('--ignore', is_flag=True, help='If table already exists, do nothing')",
                "lineno": 1441,
                "endlineno": 1445
              },
              {
                "value": "click.option('--replace', is_flag=True, help='If table already exists, replace it')",
                "lineno": 1446,
                "endlineno": 1450
              },
              {
                "value": "click.option('--transform', is_flag=True, help='If table already exists, try to transform the schema')",
                "lineno": 1451,
                "endlineno": 1455
              },
              {
                "value": "load_extension_option",
                "lineno": 1456,
                "endlineno": 1456
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "columns",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "pk",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "not_null",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "default",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fk",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "replace",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "transform",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "duplicate",
            "lineno": 1521,
            "endlineno": 1541,
            "docstring": {
              "value": "Create a duplicate of this table, copying across the schema and all row data.",
              "lineno": 1532,
              "endlineno": 1534
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='duplicate')",
                "lineno": 1521,
                "endlineno": 1521
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1522,
                "endlineno": 1526
              },
              {
                "value": "click.argument('table')",
                "lineno": 1527,
                "endlineno": 1527
              },
              {
                "value": "click.argument('new_table')",
                "lineno": 1528,
                "endlineno": 1528
              },
              {
                "value": "click.option('--ignore', is_flag=True, help='If table does not exist, do nothing')",
                "lineno": 1529,
                "endlineno": 1529
              },
              {
                "value": "load_extension_option",
                "lineno": 1530,
                "endlineno": 1530
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "new_table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "drop_table",
            "lineno": 1544,
            "endlineno": 1566,
            "docstring": {
              "value": "Drop the specified table\n\nExample:\n\n\b\n    sqlite-utils drop-table chickens.db chickens",
              "lineno": 1554,
              "endlineno": 1560
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='drop-table')",
                "lineno": 1544,
                "endlineno": 1544
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1545,
                "endlineno": 1549
              },
              {
                "value": "click.argument('table')",
                "lineno": 1550,
                "endlineno": 1550
              },
              {
                "value": "click.option('--ignore', is_flag=True, help='If table does not exist, do nothing')",
                "lineno": 1551,
                "endlineno": 1551
              },
              {
                "value": "load_extension_option",
                "lineno": 1552,
                "endlineno": 1552
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "create_view",
            "lineno": 1569,
            "endlineno": 1611,
            "docstring": {
              "value": "Create a view for the provided SELECT query\n\nExample:\n\n\b\n    sqlite-utils create-view chickens.db heavy_chickens \\\n      'select * from chickens where weight > 3'",
              "lineno": 1589,
              "endlineno": 1596
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='create-view')",
                "lineno": 1569,
                "endlineno": 1569
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1570,
                "endlineno": 1574
              },
              {
                "value": "click.argument('view')",
                "lineno": 1575,
                "endlineno": 1575
              },
              {
                "value": "click.argument('select')",
                "lineno": 1576,
                "endlineno": 1576
              },
              {
                "value": "click.option('--ignore', is_flag=True, help='If view already exists, do nothing')",
                "lineno": 1577,
                "endlineno": 1581
              },
              {
                "value": "click.option('--replace', is_flag=True, help='If view already exists, replace it')",
                "lineno": 1582,
                "endlineno": 1586
              },
              {
                "value": "load_extension_option",
                "lineno": 1587,
                "endlineno": 1587
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "view",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "select",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "replace",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "drop_view",
            "lineno": 1614,
            "endlineno": 1636,
            "docstring": {
              "value": "Drop the specified view\n\nExample:\n\n\b\n    sqlite-utils drop-view chickens.db heavy_chickens",
              "lineno": 1624,
              "endlineno": 1630
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='drop-view')",
                "lineno": 1614,
                "endlineno": 1614
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1615,
                "endlineno": 1619
              },
              {
                "value": "click.argument('view')",
                "lineno": 1620,
                "endlineno": 1620
              },
              {
                "value": "click.option('--ignore', is_flag=True, help='If view does not exist, do nothing')",
                "lineno": 1621,
                "endlineno": 1621
              },
              {
                "value": "load_extension_option",
                "lineno": 1622,
                "endlineno": 1622
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "view",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "query",
            "lineno": 1639,
            "endlineno": 1702,
            "docstring": {
              "value": "Execute SQL query and return the results as JSON\n\nExample:\n\n\b\n    sqlite-utils data.db \\\n        \"select * from chickens where age > :age\" \\\n        -p age 1",
              "lineno": 1682,
              "endlineno": 1690
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 1639,
                "endlineno": 1639
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1640,
                "endlineno": 1644
              },
              {
                "value": "click.argument('sql')",
                "lineno": 1645,
                "endlineno": 1645
              },
              {
                "value": "click.option('--attach', type=(str, click.Path(file_okay=True, dir_okay=False, allow_dash=False)), multiple=True, help='Additional databases to attach - specify alias and filepath')",
                "lineno": 1646,
                "endlineno": 1651
              },
              {
                "value": "output_options",
                "lineno": 1652,
                "endlineno": 1652
              },
              {
                "value": "click.option('-r', '--raw', is_flag=True, help='Raw output, first column of first row')",
                "lineno": 1653,
                "endlineno": 1653
              },
              {
                "value": "click.option('-p', '--param', multiple=True, type=(str, str), help='Named :parameters for SQL query')",
                "lineno": 1654,
                "endlineno": 1660
              },
              {
                "value": "click.option('--functions', help='Python code defining one or more custom SQL functions')",
                "lineno": 1661,
                "endlineno": 1663
              },
              {
                "value": "load_extension_option",
                "lineno": 1664,
                "endlineno": 1664
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sql",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "attach",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "raw",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "param",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "functions",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "memory",
            "lineno": 1705,
            "endlineno": 1881,
            "docstring": {
              "value": "Execute SQL query against an in-memory database, optionally populated by imported data\n\nTo import data from CSV, TSV or JSON files pass them on the command-line:\n\n\b\n    sqlite-utils memory one.csv two.json \\\n        \"select * from one join two on one.two_id = two.id\"\n\nFor data piped into the tool from standard input, use \"-\" or \"stdin\":\n\n\b\n    cat animals.csv | sqlite-utils memory - \\\n        \"select * from stdin where species = 'dog'\"\n\nThe format of the data will be automatically detected. You can specify the format\nexplicitly using :json, :csv, :tsv or :nl (for newline-delimited JSON) - for example:\n\n\b\n    cat animals.csv | sqlite-utils memory stdin:csv places.dat:nl \\\n        \"select * from stdin where place_id in (select id from places)\"\n\nUse --schema to view the SQL schema of any imported files:\n\n\b\n    sqlite-utils memory animals.csv --schema",
              "lineno": 1783,
              "endlineno": 1808
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 1705,
                "endlineno": 1705
              },
              {
                "value": "click.argument('paths', type=click.Path(file_okay=True, dir_okay=False, allow_dash=True), required=False, nargs=-1)",
                "lineno": 1706,
                "endlineno": 1711
              },
              {
                "value": "click.argument('sql')",
                "lineno": 1712,
                "endlineno": 1712
              },
              {
                "value": "click.option('--functions', help='Python code defining one or more custom SQL functions')",
                "lineno": 1713,
                "endlineno": 1715
              },
              {
                "value": "click.option('--attach', type=(str, click.Path(file_okay=True, dir_okay=False, allow_dash=False)), multiple=True, help='Additional databases to attach - specify alias and filepath')",
                "lineno": 1716,
                "endlineno": 1721
              },
              {
                "value": "click.option('--flatten', is_flag=True, help='Flatten nested JSON objects, so {\"foo\": {\"bar\": 1}} becomes {\"foo_bar\": 1}')",
                "lineno": 1722,
                "endlineno": 1726
              },
              {
                "value": "output_options",
                "lineno": 1727,
                "endlineno": 1727
              },
              {
                "value": "click.option('-r', '--raw', is_flag=True, help='Raw output, first column of first row')",
                "lineno": 1728,
                "endlineno": 1728
              },
              {
                "value": "click.option('-p', '--param', multiple=True, type=(str, str), help='Named :parameters for SQL query')",
                "lineno": 1729,
                "endlineno": 1735
              },
              {
                "value": "click.option('--encoding', help='Character encoding for CSV input, defaults to utf-8')",
                "lineno": 1736,
                "endlineno": 1739
              },
              {
                "value": "click.option('-n', '--no-detect-types', is_flag=True, help='Treat all CSV/TSV columns as TEXT')",
                "lineno": 1740,
                "endlineno": 1745
              },
              {
                "value": "click.option('--schema', is_flag=True, help='Show SQL schema for in-memory database')",
                "lineno": 1746,
                "endlineno": 1746
              },
              {
                "value": "click.option('--dump', is_flag=True, help='Dump SQL for in-memory database')",
                "lineno": 1747,
                "endlineno": 1747
              },
              {
                "value": "click.option('--save', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), help='Save in-memory database to this file')",
                "lineno": 1748,
                "endlineno": 1752
              },
              {
                "value": "click.option('--analyze', is_flag=True, help='Analyze resulting tables and output results')",
                "lineno": 1753,
                "endlineno": 1757
              },
              {
                "value": "load_extension_option",
                "lineno": 1758,
                "endlineno": 1758
              }
            ],
            "parameters": [
              {
                "name": "paths",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sql",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "functions",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "attach",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "flatten",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "raw",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "param",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "encoding",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_detect_types",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "schema",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "dump",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "save",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "analyze",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_execute_query",
            "lineno": 1884,
            "endlineno": 1918,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "db",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sql",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "param",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "raw",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "search",
            "lineno": 1921,
            "endlineno": 2015,
            "docstring": {
              "value": "Execute a full-text search against this table\n\nExample:\n\n    sqlite-utils search data.db chickens lila",
              "lineno": 1963,
              "endlineno": 1968
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 1921,
                "endlineno": 1921
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 1922,
                "endlineno": 1926
              },
              {
                "value": "click.argument('dbtable')",
                "lineno": 1927,
                "endlineno": 1927
              },
              {
                "value": "click.argument('q')",
                "lineno": 1928,
                "endlineno": 1928
              },
              {
                "value": "click.option('-o', '--order', type=str, help=\"Order by ('column' or 'column desc')\")",
                "lineno": 1929,
                "endlineno": 1929
              },
              {
                "value": "click.option('-c', '--column', type=str, multiple=True, help='Columns to return')",
                "lineno": 1930,
                "endlineno": 1930
              },
              {
                "value": "click.option('--limit', type=int, help='Number of rows to return - defaults to everything')",
                "lineno": 1931,
                "endlineno": 1935
              },
              {
                "value": "click.option('--sql', 'show_sql', is_flag=True, help='Show SQL query that would be run')",
                "lineno": 1936,
                "endlineno": 1938
              },
              {
                "value": "click.option('--quote', is_flag=True, help='Apply FTS quoting rules to search term')",
                "lineno": 1939,
                "endlineno": 1939
              },
              {
                "value": "output_options",
                "lineno": 1940,
                "endlineno": 1940
              },
              {
                "value": "load_extension_option",
                "lineno": 1941,
                "endlineno": 1941
              },
              {
                "value": "click.pass_context",
                "lineno": 1942,
                "endlineno": 1942
              }
            ],
            "parameters": [
              {
                "name": "ctx",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "dbtable",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "q",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "order",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "show_sql",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "quote",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "limit",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "rows",
            "lineno": 2018,
            "endlineno": 2101,
            "docstring": {
              "value": "Output all rows in the specified table\n\nExample:\n\n\b\n    sqlite-utils rows trees.db Trees",
              "lineno": 2068,
              "endlineno": 2074
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 2018,
                "endlineno": 2018
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2019,
                "endlineno": 2023
              },
              {
                "value": "click.argument('dbtable')",
                "lineno": 2024,
                "endlineno": 2024
              },
              {
                "value": "click.option('-c', '--column', type=str, multiple=True, help='Columns to return')",
                "lineno": 2025,
                "endlineno": 2025
              },
              {
                "value": "click.option('--where', help='Optional where clause')",
                "lineno": 2026,
                "endlineno": 2026
              },
              {
                "value": "click.option('-o', '--order', type=str, help=\"Order by ('column' or 'column desc')\")",
                "lineno": 2027,
                "endlineno": 2027
              },
              {
                "value": "click.option('-p', '--param', multiple=True, type=(str, str), help='Named :parameters for where clause')",
                "lineno": 2028,
                "endlineno": 2034
              },
              {
                "value": "click.option('--limit', type=int, help='Number of rows to return - defaults to everything')",
                "lineno": 2035,
                "endlineno": 2039
              },
              {
                "value": "click.option('--offset', type=int, help='SQL offset to use')",
                "lineno": 2040,
                "endlineno": 2044
              },
              {
                "value": "output_options",
                "lineno": 2045,
                "endlineno": 2045
              },
              {
                "value": "load_extension_option",
                "lineno": 2046,
                "endlineno": 2046
              },
              {
                "value": "click.pass_context",
                "lineno": 2047,
                "endlineno": 2047
              }
            ],
            "parameters": [
              {
                "name": "ctx",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "dbtable",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "where",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "order",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "param",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "limit",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "offset",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "triggers",
            "lineno": 2104,
            "endlineno": 2154,
            "docstring": {
              "value": "Show triggers configured in this database\n\nExample:\n\n\b\n    sqlite-utils triggers trees.db",
              "lineno": 2128,
              "endlineno": 2134
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 2104,
                "endlineno": 2104
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2105,
                "endlineno": 2109
              },
              {
                "value": "click.argument('tables', nargs=-1)",
                "lineno": 2110,
                "endlineno": 2110
              },
              {
                "value": "output_options",
                "lineno": 2111,
                "endlineno": 2111
              },
              {
                "value": "load_extension_option",
                "lineno": 2112,
                "endlineno": 2112
              },
              {
                "value": "click.pass_context",
                "lineno": 2113,
                "endlineno": 2113
              }
            ],
            "parameters": [
              {
                "name": "ctx",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tables",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "indexes",
            "lineno": 2157,
            "endlineno": 2221,
            "docstring": {
              "value": "Show indexes for the whole database or specific tables\n\nExample:\n\n\b\n    sqlite-utils indexes trees.db Trees",
              "lineno": 2183,
              "endlineno": 2189
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 2157,
                "endlineno": 2157
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2158,
                "endlineno": 2162
              },
              {
                "value": "click.argument('tables', nargs=-1)",
                "lineno": 2163,
                "endlineno": 2163
              },
              {
                "value": "click.option('--aux', is_flag=True, help='Include auxiliary columns')",
                "lineno": 2164,
                "endlineno": 2164
              },
              {
                "value": "output_options",
                "lineno": 2165,
                "endlineno": 2165
              },
              {
                "value": "load_extension_option",
                "lineno": 2166,
                "endlineno": 2166
              },
              {
                "value": "click.pass_context",
                "lineno": 2167,
                "endlineno": 2167
              }
            ],
            "parameters": [
              {
                "name": "ctx",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tables",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "aux",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "csv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tsv",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "no_headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fmt",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "schema",
            "lineno": 2224,
            "endlineno": 2250,
            "docstring": {
              "value": "Show full schema for this database or for specified tables\n\nExample:\n\n\b\n    sqlite-utils schema trees.db",
              "lineno": 2237,
              "endlineno": 2243
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 2224,
                "endlineno": 2224
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2225,
                "endlineno": 2229
              },
              {
                "value": "click.argument('tables', nargs=-1, required=False)",
                "lineno": 2230,
                "endlineno": 2230
              },
              {
                "value": "load_extension_option",
                "lineno": 2231,
                "endlineno": 2231
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tables",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "transform",
            "lineno": 2253,
            "endlineno": 2368,
            "docstring": {
              "value": "Transform a table beyond the capabilities of ALTER TABLE\n\nExample:\n\n\b\n    sqlite-utils transform mydb.db mytable \\\n        --drop column1 \\\n        --rename column2 column_renamed",
              "lineno": 2316,
              "endlineno": 2324
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 2253,
                "endlineno": 2253
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2254,
                "endlineno": 2258
              },
              {
                "value": "click.argument('table')",
                "lineno": 2259,
                "endlineno": 2259
              },
              {
                "value": "click.option('--type', type=(str, click.Choice(['INTEGER', 'TEXT', 'FLOAT', 'BLOB'], case_sensitive=False)), multiple=True, help='Change column type to INTEGER, TEXT, FLOAT or BLOB')",
                "lineno": 2260,
                "endlineno": 2268
              },
              {
                "value": "click.option('--drop', type=str, multiple=True, help='Drop this column')",
                "lineno": 2269,
                "endlineno": 2269
              },
              {
                "value": "click.option('--rename', type=(str, str), multiple=True, help='Rename this column to X')",
                "lineno": 2270,
                "endlineno": 2272
              },
              {
                "value": "click.option('-o', '--column-order', type=str, multiple=True, help='Reorder columns')",
                "lineno": 2273,
                "endlineno": 2273
              },
              {
                "value": "click.option('--not-null', type=str, multiple=True, help='Set this column to NOT NULL')",
                "lineno": 2274,
                "endlineno": 2274
              },
              {
                "value": "click.option('--not-null-false', type=str, multiple=True, help='Remove NOT NULL from this column')",
                "lineno": 2275,
                "endlineno": 2277
              },
              {
                "value": "click.option('--pk', type=str, multiple=True, help='Make this column the primary key')",
                "lineno": 2278,
                "endlineno": 2278
              },
              {
                "value": "click.option('--pk-none', is_flag=True, help='Remove primary key (convert to rowid table)')",
                "lineno": 2279,
                "endlineno": 2281
              },
              {
                "value": "click.option('--default', type=(str, str), multiple=True, help='Set default value for this column')",
                "lineno": 2282,
                "endlineno": 2287
              },
              {
                "value": "click.option('--default-none', type=str, multiple=True, help='Remove default from this column')",
                "lineno": 2288,
                "endlineno": 2290
              },
              {
                "value": "click.option('--drop-foreign-key', type=str, multiple=True, help='Drop foreign key constraint for this column')",
                "lineno": 2291,
                "endlineno": 2296
              },
              {
                "value": "click.option('--sql', is_flag=True, help='Output SQL without executing it')",
                "lineno": 2297,
                "endlineno": 2297
              },
              {
                "value": "load_extension_option",
                "lineno": 2298,
                "endlineno": 2298
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "type",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "drop",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "rename",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column_order",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "not_null",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "not_null_false",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "pk",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "pk_none",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "default",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "default_none",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "drop_foreign_key",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "sql",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "extract",
            "lineno": 2371,
            "endlineno": 2414,
            "docstring": {
              "value": "Extract one or more columns into a separate table\n\nExample:\n\n\b\n    sqlite-utils extract trees.db Street_Trees species",
              "lineno": 2399,
              "endlineno": 2405
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 2371,
                "endlineno": 2371
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2372,
                "endlineno": 2376
              },
              {
                "value": "click.argument('table')",
                "lineno": 2377,
                "endlineno": 2377
              },
              {
                "value": "click.argument('columns', nargs=-1, required=True)",
                "lineno": 2378,
                "endlineno": 2378
              },
              {
                "value": "click.option('--table', 'other_table', help='Name of the other table to extract columns to')",
                "lineno": 2379,
                "endlineno": 2381
              },
              {
                "value": "click.option('--fk-column', help='Name of the foreign key column to add to the table')",
                "lineno": 2382,
                "endlineno": 2382
              },
              {
                "value": "click.option('--rename', type=(str, str), multiple=True, help='Rename this column in extracted table')",
                "lineno": 2383,
                "endlineno": 2388
              },
              {
                "value": "load_extension_option",
                "lineno": 2389,
                "endlineno": 2389
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "columns",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "other_table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "fk_column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "rename",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "insert_files",
            "lineno": 2417,
            "endlineno": 2562,
            "docstring": {
              "value": "Insert one or more files using BLOB columns in the specified table\n\nExample:\n\n\b\n    sqlite-utils insert-files pics.db images *.gif \\\n        -c name:name \\\n        -c content:content \\\n        -c content_hash:sha256 \\\n        -c created:ctime_iso \\\n        -c modified:mtime_iso \\\n        -c size:size \\\n        --pk name",
              "lineno": 2464,
              "endlineno": 2478
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='insert-files')",
                "lineno": 2417,
                "endlineno": 2417
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2418,
                "endlineno": 2422
              },
              {
                "value": "click.argument('table')",
                "lineno": 2423,
                "endlineno": 2423
              },
              {
                "value": "click.argument('file_or_dir', nargs=-1, required=True, type=click.Path(file_okay=True, dir_okay=True, allow_dash=True))",
                "lineno": 2424,
                "endlineno": 2429
              },
              {
                "value": "click.option('-c', '--column', type=str, multiple=True, help='Column definitions for the table')",
                "lineno": 2430,
                "endlineno": 2436
              },
              {
                "value": "click.option('--pk', type=str, help='Column to use as primary key')",
                "lineno": 2437,
                "endlineno": 2437
              },
              {
                "value": "click.option('--alter', is_flag=True, help='Alter table to add missing columns')",
                "lineno": 2438,
                "endlineno": 2438
              },
              {
                "value": "click.option('--replace', is_flag=True, help='Replace files with matching primary key')",
                "lineno": 2439,
                "endlineno": 2439
              },
              {
                "value": "click.option('--upsert', is_flag=True, help='Upsert files with matching primary key')",
                "lineno": 2440,
                "endlineno": 2440
              },
              {
                "value": "click.option('--name', type=str, help='File name to use')",
                "lineno": 2441,
                "endlineno": 2441
              },
              {
                "value": "click.option('--text', is_flag=True, help='Store file content as TEXT, not BLOB')",
                "lineno": 2442,
                "endlineno": 2442
              },
              {
                "value": "click.option('--encoding', help='Character encoding for input, defaults to utf-8')",
                "lineno": 2443,
                "endlineno": 2446
              },
              {
                "value": "click.option('-s', '--silent', is_flag=True, help=\"Don't show a progress bar\")",
                "lineno": 2447,
                "endlineno": 2447
              },
              {
                "value": "load_extension_option",
                "lineno": 2448,
                "endlineno": 2448
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "file_or_dir",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "pk",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "alter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "replace",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "upsert",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "name",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "text",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "encoding",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "silent",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "analyze_tables",
            "lineno": 2565,
            "endlineno": 2598,
            "docstring": {
              "value": "Analyze the columns in one or more tables\n\nExample:\n\n\b\n    sqlite-utils analyze-tables data.db trees",
              "lineno": 2589,
              "endlineno": 2595
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(name='analyze-tables')",
                "lineno": 2565,
                "endlineno": 2565
              },
              {
                "value": "click.argument('path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False, exists=True), required=True)",
                "lineno": 2566,
                "endlineno": 2570
              },
              {
                "value": "click.argument('tables', nargs=-1)",
                "lineno": 2571,
                "endlineno": 2571
              },
              {
                "value": "click.option('-c', '--column', 'columns', type=str, multiple=True, help='Specific columns to analyze')",
                "lineno": 2572,
                "endlineno": 2579
              },
              {
                "value": "click.option('--save', is_flag=True, help='Save results to _analyze_tables table')",
                "lineno": 2580,
                "endlineno": 2580
              },
              {
                "value": "load_extension_option",
                "lineno": 2581,
                "endlineno": 2581
              }
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tables",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "columns",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "save",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_analyze",
            "lineno": 2601,
            "endlineno": 2650,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "db",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "tables",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "columns",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "save",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "install",
            "lineno": 2653,
            "endlineno": 2665,
            "docstring": {
              "value": "Install packages from PyPI into the same environment as sqlite-utils",
              "lineno": 2659,
              "endlineno": 2659
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 2653,
                "endlineno": 2653
              },
              {
                "value": "click.argument('packages', nargs=-1, required=True)",
                "lineno": 2654,
                "endlineno": 2654
              },
              {
                "value": "click.option('-U', '--upgrade', is_flag=True, help='Upgrade packages to latest version')",
                "lineno": 2655,
                "endlineno": 2657
              }
            ],
            "parameters": [
              {
                "name": "packages",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "upgrade",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "uninstall",
            "lineno": 2668,
            "endlineno": 2674,
            "docstring": {
              "value": "Uninstall Python packages from the sqlite-utils environment",
              "lineno": 2672,
              "endlineno": 2672
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command()",
                "lineno": 2668,
                "endlineno": 2668
              },
              {
                "value": "click.argument('packages', nargs=-1, required=True)",
                "lineno": 2669,
                "endlineno": 2669
              },
              {
                "value": "click.option('-y', '--yes', is_flag=True, help=\"Don't ask for confirmation\")",
                "lineno": 2670,
                "endlineno": 2670
              }
            ],
            "parameters": [
              {
                "name": "packages",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "yes",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_generate_convert_help",
            "lineno": 2677,
            "endlineno": 2716,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [],
            "returns": null
          },
          {
            "kind": "function",
            "name": "convert",
            "lineno": 2719,
            "endlineno": 2832,
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command(help=_generate_convert_help())",
                "lineno": 2719,
                "endlineno": 2719
              },
              {
                "value": "click.argument('db_path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2720,
                "endlineno": 2724
              },
              {
                "value": "click.argument('table', type=str)",
                "lineno": 2725,
                "endlineno": 2725
              },
              {
                "value": "click.argument('columns', type=str, nargs=-1, required=True)",
                "lineno": 2726,
                "endlineno": 2726
              },
              {
                "value": "click.argument('code', type=str)",
                "lineno": 2727,
                "endlineno": 2727
              },
              {
                "value": "click.option('--import', 'imports', type=str, multiple=True, help='Python modules to import')",
                "lineno": 2728,
                "endlineno": 2730
              },
              {
                "value": "click.option('--dry-run', is_flag=True, help='Show results of running this against first 10 rows')",
                "lineno": 2731,
                "endlineno": 2733
              },
              {
                "value": "click.option('--multi', is_flag=True, help='Populate columns for keys in returned dictionary')",
                "lineno": 2734,
                "endlineno": 2736
              },
              {
                "value": "click.option('--where', help='Optional where clause')",
                "lineno": 2737,
                "endlineno": 2737
              },
              {
                "value": "click.option('-p', '--param', multiple=True, type=(str, str), help='Named :parameters for where clause')",
                "lineno": 2738,
                "endlineno": 2744
              },
              {
                "value": "click.option('--output', help='Optional separate column to populate with the output')",
                "lineno": 2745,
                "endlineno": 2745
              },
              {
                "value": "click.option('--output-type', help='Column type to use for the output column', default='text', type=click.Choice(['integer', 'float', 'blob', 'text']))",
                "lineno": 2746,
                "endlineno": 2751
              },
              {
                "value": "click.option('--drop', is_flag=True, help='Drop original column afterwards')",
                "lineno": 2752,
                "endlineno": 2752
              },
              {
                "value": "click.option('-s', '--silent', is_flag=True, help=\"Don't show a progress bar\")",
                "lineno": 2753,
                "endlineno": 2753
              }
            ],
            "parameters": [
              {
                "name": "db_path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "columns",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "code",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "imports",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "dry_run",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "multi",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "where",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "param",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "output",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "output_type",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "drop",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "silent",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "add_geometry_column",
            "lineno": 2835,
            "endlineno": 2908,
            "docstring": {
              "value": "Add a SpatiaLite geometry column to an existing table. Requires SpatiaLite extension.\n\n\n\nBy default, this command will try to load the SpatiaLite extension from usual paths.\nTo load it from a specific path, use --load-extension.",
              "lineno": 2890,
              "endlineno": 2893
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command('add-geometry-column')",
                "lineno": 2835,
                "endlineno": 2835
              },
              {
                "value": "click.argument('db_path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2836,
                "endlineno": 2840
              },
              {
                "value": "click.argument('table', type=str)",
                "lineno": 2841,
                "endlineno": 2841
              },
              {
                "value": "click.argument('column_name', type=str)",
                "lineno": 2842,
                "endlineno": 2842
              },
              {
                "value": "click.option('-t', '--type', 'geometry_type', type=click.Choice(['POINT', 'LINESTRING', 'POLYGON', 'MULTIPOINT', 'MULTILINESTRING', 'MULTIPOLYGON', 'GEOMETRYCOLLECTION', 'GEOMETRY'], case_sensitive=False), default='GEOMETRY', help='Specify a geometry type for this column.', show_default=True)",
                "lineno": 2843,
                "endlineno": 2863
              },
              {
                "value": "click.option('--srid', type=int, default=4326, show_default=True, help='Spatial Reference ID. See https://spatialreference.org for details on specific projections.')",
                "lineno": 2864,
                "endlineno": 2870
              },
              {
                "value": "click.option('--dimensions', 'coord_dimension', type=str, default='XY', help='Coordinate dimensions. Use XYZ for three-dimensional geometries.')",
                "lineno": 2871,
                "endlineno": 2877
              },
              {
                "value": "click.option('--not-null', 'not_null', is_flag=True, help='Add a NOT NULL constraint.')",
                "lineno": 2878,
                "endlineno": 2878
              },
              {
                "value": "load_extension_option",
                "lineno": 2879,
                "endlineno": 2879
              }
            ],
            "parameters": [
              {
                "name": "db_path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column_name",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "geometry_type",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "srid",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "coord_dimension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "not_null",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "create_spatial_index",
            "lineno": 2911,
            "endlineno": 2942,
            "docstring": {
              "value": "Create a spatial index on a SpatiaLite geometry column.\nThe table and geometry column must already exist before trying to add a spatial index.\n\n\n\nBy default, this command will try to load the SpatiaLite extension from usual paths.\nTo load it from a specific path, use --load-extension.",
              "lineno": 2921,
              "endlineno": 2925
            },
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "cli.command('create-spatial-index')",
                "lineno": 2911,
                "endlineno": 2911
              },
              {
                "value": "click.argument('db_path', type=click.Path(file_okay=True, dir_okay=False, allow_dash=False), required=True)",
                "lineno": 2912,
                "endlineno": 2916
              },
              {
                "value": "click.argument('table', type=str)",
                "lineno": 2917,
                "endlineno": 2917
              },
              {
                "value": "click.argument('column_name', type=str)",
                "lineno": 2918,
                "endlineno": 2918
              },
              {
                "value": "load_extension_option",
                "lineno": 2919,
                "endlineno": 2919
              }
            ],
            "parameters": [
              {
                "name": "db_path",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "table",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "column_name",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_render_common",
            "lineno": 2945,
            "endlineno": 2951,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "title",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "values",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "class",
            "name": "UnicodeDecodeErrorForPath",
            "lineno": 2954,
            "endlineno": 2957,
            "labels": [],
            "members": [
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 2955,
                "endlineno": 2957,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "exception",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "path",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "exception",
                "lineno": 2956,
                "endlineno": 2956,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "exception"
              },
              {
                "kind": "attribute",
                "name": "path",
                "lineno": 2957,
                "endlineno": 2957,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "path"
              }
            ],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "attribute",
            "name": "FILE_COLUMNS",
            "lineno": 2960,
            "endlineno": 2977,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "{'name': lambda p: p.name, 'path': lambda p: str(p), 'fullpath': lambda p: str(p.resolve()), 'sha256': lambda p: hashlib.sha256(p.resolve().read_bytes()).hexdigest(), 'md5': lambda p: hashlib.md5(p.resolve().read_bytes()).hexdigest(), 'mode': lambda p: p.stat().st_mode, 'content': lambda p: p.resolve().read_bytes(), 'mtime': lambda p: p.stat().st_mtime, 'ctime': lambda p: p.stat().st_ctime, 'mtime_int': lambda p: int(p.stat().st_mtime), 'ctime_int': lambda p: int(p.stat().st_ctime), 'mtime_iso': lambda p: datetime.utcfromtimestamp(p.stat().st_mtime).isoformat(), 'ctime_iso': lambda p: datetime.utcfromtimestamp(p.stat().st_ctime).isoformat(), 'size': lambda p: p.stat().st_size, 'stem': lambda p: p.stem, 'suffix': lambda p: p.suffix}"
          },
          {
            "kind": "function",
            "name": "output_rows",
            "lineno": 2980,
            "endlineno": 3005,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "iterator",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "headers",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "nl",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "arrays",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "json_cols",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "maybe_json",
            "lineno": 3008,
            "endlineno": 3017,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "value",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "json_binary",
            "lineno": 3020,
            "endlineno": 3024,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "value",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "verify_is_dict",
            "lineno": 3027,
            "endlineno": 3032,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "doc",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_load_extensions",
            "lineno": 3035,
            "endlineno": 3045,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "db",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "load_extension",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_register_functions",
            "lineno": 3048,
            "endlineno": 3059,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "db",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "functions",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          }
        ],
        "filepath": "/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/sqlite_utils/cli.py"
      },
      {
        "kind": "module",
        "name": "utils",
        "labels": [],
        "members": [
          {
            "kind": "alias",
            "name": "base64",
            "target_path": "base64",
            "lineno": 1,
            "endlineno": 1
          },
          {
            "kind": "alias",
            "name": "contextlib",
            "target_path": "contextlib",
            "lineno": 2,
            "endlineno": 2
          },
          {
            "kind": "alias",
            "name": "csv",
            "target_path": "csv",
            "lineno": 3,
            "endlineno": 3
          },
          {
            "kind": "alias",
            "name": "enum",
            "target_path": "enum",
            "lineno": 4,
            "endlineno": 4
          },
          {
            "kind": "alias",
            "name": "hashlib",
            "target_path": "hashlib",
            "lineno": 5,
            "endlineno": 5
          },
          {
            "kind": "alias",
            "name": "io",
            "target_path": "io",
            "lineno": 6,
            "endlineno": 6
          },
          {
            "kind": "alias",
            "name": "itertools",
            "target_path": "itertools",
            "lineno": 7,
            "endlineno": 7
          },
          {
            "kind": "alias",
            "name": "json",
            "target_path": "json",
            "lineno": 8,
            "endlineno": 8
          },
          {
            "kind": "alias",
            "name": "os",
            "target_path": "os",
            "lineno": 9,
            "endlineno": 9
          },
          {
            "kind": "alias",
            "name": "sys",
            "target_path": "sys",
            "lineno": 10,
            "endlineno": 10
          },
          {
            "kind": "alias",
            "name": "Dict",
            "target_path": "typing.Dict",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "cast",
            "target_path": "typing.cast",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "BinaryIO",
            "target_path": "typing.BinaryIO",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "Iterable",
            "target_path": "typing.Iterable",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "Optional",
            "target_path": "typing.Optional",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "Tuple",
            "target_path": "typing.Tuple",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "Type",
            "target_path": "typing.Type",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "click",
            "target_path": "click",
            "lineno": 14,
            "endlineno": 14
          },
          {
            "kind": "alias",
            "name": "sqlite3",
            "target_path": "sqlite3",
            "lineno": 23,
            "endlineno": 23
          },
          {
            "kind": "alias",
            "name": "pysqlite3",
            "target_path": "pysqlite3.dbapi2",
            "lineno": 18,
            "endlineno": 18
          },
          {
            "kind": "attribute",
            "name": "OperationalError",
            "lineno": 20,
            "endlineno": 20,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "pysqlite3.dbapi2.OperationalError"
          },
          {
            "kind": "attribute",
            "name": "SPATIALITE_PATHS",
            "lineno": 28,
            "endlineno": 31,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "('/usr/lib/x86_64-linux-gnu/mod_spatialite.so', '/usr/local/lib/mod_spatialite.dylib')"
          },
          {
            "kind": "attribute",
            "name": "ORIGINAL_CSV_FIELD_SIZE_LIMIT",
            "lineno": 34,
            "endlineno": 34,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "csv.field_size_limit()"
          },
          {
            "kind": "function",
            "name": "maximize_csv_field_size_limit",
            "lineno": 37,
            "endlineno": 49,
            "docstring": {
              "value": "Increase the CSV field size limit to the maximum possible.",
              "lineno": 38,
              "endlineno": 40
            },
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [],
            "returns": null
          },
          {
            "kind": "function",
            "name": "find_spatialite",
            "lineno": 52,
            "endlineno": 77,
            "docstring": {
              "value": "The ``find_spatialite()`` function searches for the `SpatiaLite <https://www.gaia-gis.it/fossil/libspatialite/index>`__\nSQLite extension in some common places. It returns a string path to the location, or ``None`` if SpatiaLite was not found.\n\nYou can use it in code like this:\n\n.. code-block:: python\n\n    from sqlite_utils import Database\n    from sqlite_utils.utils import find_spatialite\n\n    db = Database(\"mydb.db\")\n    spatialite = find_spatialite()\n    if spatialite:\n        db.conn.enable_load_extension(True)\n        db.conn.load_extension(spatialite)\n\n    # or use with db.init_spatialite like this\n    db.init_spatialite(find_spatialite())",
              "lineno": 53,
              "endlineno": 73
            },
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [],
            "returns": [
              {
                "source": "Optional",
                "full": "typing.Optional"
              },
              "[",
              {
                "source": "str",
                "full": "str"
              },
              "]"
            ]
          },
          {
            "kind": "function",
            "name": "suggest_column_types",
            "lineno": 80,
            "endlineno": 85,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "records",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "types_for_column_types",
            "lineno": 88,
            "endlineno": 112,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "all_column_types",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "column_affinity",
            "lineno": 115,
            "endlineno": 131,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "column_type",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "decode_base64_values",
            "lineno": 134,
            "endlineno": 145,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "doc",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "class",
            "name": "UpdateWrapper",
            "lineno": 148,
            "endlineno": 161,
            "labels": [],
            "members": [
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 149,
                "endlineno": 151,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "wrapped",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "update",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "_wrapped",
                "lineno": 150,
                "endlineno": 150,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "wrapped"
              },
              {
                "kind": "attribute",
                "name": "_update",
                "lineno": 151,
                "endlineno": 151,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "update"
              },
              {
                "kind": "function",
                "name": "__iter__",
                "lineno": 153,
                "endlineno": 156,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "read",
                "lineno": 158,
                "endlineno": 161,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "size",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "-1"
                  }
                ],
                "returns": null
              }
            ],
            "bases": [],
            "decorators": []
          },
          {
            "kind": "function",
            "name": "file_progress",
            "lineno": 164,
            "endlineno": 180,
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "contextlib.contextmanager",
                "lineno": 164,
                "endlineno": 164
              }
            ],
            "parameters": [
              {
                "name": "file",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "silent",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "**kwargs",
                "annotation": null,
                "kind": "variadic keyword",
                "default": "{}"
              }
            ],
            "returns": null
          },
          {
            "kind": "class",
            "name": "Format",
            "lineno": 183,
            "endlineno": 187,
            "labels": [],
            "members": [
              {
                "kind": "attribute",
                "name": "CSV",
                "lineno": 184,
                "endlineno": 184,
                "labels": [
                  "class-attribute"
                ],
                "members": [],
                "value": "1"
              },
              {
                "kind": "attribute",
                "name": "TSV",
                "lineno": 185,
                "endlineno": 185,
                "labels": [
                  "class-attribute"
                ],
                "members": [],
                "value": "2"
              },
              {
                "kind": "attribute",
                "name": "JSON",
                "lineno": 186,
                "endlineno": 186,
                "labels": [
                  "class-attribute"
                ],
                "members": [],
                "value": "3"
              },
              {
                "kind": "attribute",
                "name": "NL",
                "lineno": 187,
                "endlineno": 187,
                "labels": [
                  "class-attribute"
                ],
                "members": [],
                "value": "4"
              }
            ],
            "bases": [
              [
                {
                  "source": "enum",
                  "full": "enum"
                },
                ".",
                {
                  "source": "Enum",
                  "full": "enum.Enum"
                }
              ]
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "RowsFromFileError",
            "lineno": 190,
            "endlineno": 191,
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "RowsFromFileBadJSON",
            "lineno": 194,
            "endlineno": 195,
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "RowsFromFileError",
                "full": "sqlite_utils.utils.RowsFromFileError"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "RowError",
            "lineno": 198,
            "endlineno": 199,
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "function",
            "name": "_extra_key_strategy",
            "lineno": 202,
            "endlineno": 224,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "reader",
                "annotation": [
                  {
                    "source": "Iterable",
                    "full": "typing.Iterable"
                  },
                  "[",
                  {
                    "source": "dict",
                    "full": "dict"
                  },
                  "]"
                ],
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "ignore_extras",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "bool",
                    "full": "bool"
                  },
                  "]"
                ],
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "extras_key",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ],
                "kind": "positional or keyword",
                "default": "None"
              }
            ],
            "returns": [
              {
                "source": "Iterable",
                "full": "typing.Iterable"
              },
              "[",
              {
                "source": "dict",
                "full": "dict"
              },
              "]"
            ]
          },
          {
            "kind": "function",
            "name": "rows_from_file",
            "lineno": 227,
            "endlineno": 320,
            "docstring": {
              "value": "Load a sequence of dictionaries from a file-like object containing one of four different formats.\n\n.. code-block:: python\n\n    from sqlite_utils.utils import rows_from_file\n    import io\n\n    rows, format = rows_from_file(io.StringIO(\"id,name\\n1,Cleo\")))\n    print(list(rows), format)\n    # Outputs [{'id': '1', 'name': 'Cleo'}] Format.CSV\n\nThis defaults to attempting to automatically detect the format of the data, or you can pass in an\nexplicit format using the format= option.\n\nReturns a tuple of ``(rows_generator, format_used)`` where ``rows_generator`` can be iterated over\nto return dictionaries, while ``format_used`` is a value from the ``sqlite_utils.utils.Format`` enum:\n\n.. code-block:: python\n\n    class Format(enum.Enum):\n        CSV = 1\n        TSV = 2\n        JSON = 3\n        NL = 4\n\nIf a CSV or TSV file includes rows with more fields than are declared in the header a\n``sqlite_utils.utils.RowError`` exception will be raised when you loop over the generator.\n\nYou can instead ignore the extra data by passing ``ignore_extras=True``.\n\nOr pass ``extras_key=\"rest\"`` to put those additional values in a list in a key called ``rest``.\n\n:param fp: a file-like object containing binary data\n:param format: the format to use - omit this to detect the format\n:param dialect: the CSV dialect to use - omit this to detect the dialect\n:param encoding: the character encoding to use when reading CSV/TSV data\n:param ignore_extras: ignore any extra fields on rows\n:param extras_key: put any extra fields in a list with this key",
              "lineno": 235,
              "endlineno": 274
            },
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "fp",
                "annotation": {
                  "source": "BinaryIO",
                  "full": "typing.BinaryIO"
                },
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "format",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "Format",
                    "full": "sqlite_utils.utils.Format"
                  },
                  "]"
                ],
                "kind": "positional or keyword",
                "default": "None"
              },
              {
                "name": "dialect",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  [
                    {
                      "source": "Type",
                      "full": "typing.Type"
                    },
                    "[",
                    [
                      {
                        "source": "csv",
                        "full": "csv"
                      },
                      ".",
                      {
                        "source": "Dialect",
                        "full": "csv.Dialect"
                      }
                    ],
                    "]"
                  ],
                  "]"
                ],
                "kind": "positional or keyword",
                "default": "None"
              },
              {
                "name": "encoding",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ],
                "kind": "positional or keyword",
                "default": "None"
              },
              {
                "name": "ignore_extras",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "bool",
                    "full": "bool"
                  },
                  "]"
                ],
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "extras_key",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ],
                "kind": "positional or keyword",
                "default": "None"
              }
            ],
            "returns": [
              {
                "source": "Tuple",
                "full": "typing.Tuple"
              },
              "[",
              [
                [
                  {
                    "source": "Iterable",
                    "full": "typing.Iterable"
                  },
                  "[",
                  {
                    "source": "dict",
                    "full": "dict"
                  },
                  "]"
                ],
                ", ",
                {
                  "source": "Format",
                  "full": "sqlite_utils.utils.Format"
                }
              ],
              "]"
            ]
          },
          {
            "kind": "class",
            "name": "TypeTracker",
            "lineno": 323,
            "endlineno": 366,
            "docstring": {
              "value": "Wrap an iterator of dictionaries and keep track of which SQLite column\ntypes are the most likely fit for each of their keys.\n\nExample usage:\n\n.. code-block:: python\n\n    from sqlite_utils.utils import TypeTracker\n    import sqlite_utils\n\n    db = sqlite_utils.Database(memory=True)\n    tracker = TypeTracker()\n    rows = [{\"id\": \"1\", \"name\": \"Cleo\", \"id\": \"2\", \"name\": \"Cardi\"}]\n    db[\"creatures\"].insert_all(tracker.wrap(rows))\n    print(tracker.types)\n    # Outputs {'id': 'integer', 'name': 'text'}\n    db[\"creatures\"].transform(types=tracker.types)",
              "lineno": 324,
              "endlineno": 342
            },
            "labels": [],
            "members": [
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 344,
                "endlineno": 345,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "trackers",
                "lineno": 345,
                "endlineno": 345,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "{}"
              },
              {
                "kind": "function",
                "name": "wrap",
                "lineno": 347,
                "endlineno": 358,
                "docstring": {
                  "value": "Use this to loop through an existing iterator, tracking the column types\nas part of the iteration.\n\n:param iterator: The iterator to wrap",
                  "lineno": 348,
                  "endlineno": 353
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "iterator",
                    "annotation": [
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "[",
                      {
                        "source": "dict",
                        "full": "dict"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Iterable",
                    "full": "typing.Iterable"
                  },
                  "[",
                  {
                    "source": "dict",
                    "full": "dict"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "types",
                "lineno": 360,
                "endlineno": 366,
                "docstring": {
                  "value": "A dictionary mapping column names to their detected types. This can be passed\nto the ``db[table_name].transform(types=tracker.types)`` method.",
                  "lineno": 362,
                  "endlineno": 365
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 360,
                    "endlineno": 360
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Dict",
                    "full": "typing.Dict"
                  },
                  "[",
                  [
                    {
                      "source": "str",
                      "full": "str"
                    },
                    ", ",
                    {
                      "source": "str",
                      "full": "str"
                    }
                  ],
                  "]"
                ]
              }
            ],
            "bases": [],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "ValueTracker",
            "lineno": 369,
            "endlineno": 415,
            "labels": [],
            "members": [
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 370,
                "endlineno": 371,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "couldbe",
                "lineno": 371,
                "endlineno": 371,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "{key: getattr(self, 'test_' + key) for key in self.get_tests()}"
              },
              {
                "kind": "function",
                "name": "get_tests",
                "lineno": 373,
                "endlineno": 379,
                "labels": [
                  "classmethod"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "classmethod",
                    "lineno": 373,
                    "endlineno": 373
                  }
                ],
                "parameters": [
                  {
                    "name": "cls",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "test_integer",
                "lineno": 381,
                "endlineno": 386,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "value",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "test_float",
                "lineno": 388,
                "endlineno": 393,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "value",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "__repr__",
                "lineno": 395,
                "endlineno": 396,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "guessed_type",
                "lineno": 398,
                "endlineno": 405,
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 398,
                    "endlineno": 398
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "evaluate",
                "lineno": 407,
                "endlineno": 415,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "value",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              }
            ],
            "bases": [],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "NullProgressBar",
            "lineno": 418,
            "endlineno": 426,
            "labels": [],
            "members": [
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 419,
                "endlineno": 420,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "*args",
                    "annotation": null,
                    "kind": "variadic positional",
                    "default": "()"
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "args",
                "lineno": 420,
                "endlineno": 420,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "args"
              },
              {
                "kind": "function",
                "name": "__iter__",
                "lineno": 422,
                "endlineno": 423,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "update",
                "lineno": 425,
                "endlineno": 426,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "value",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              }
            ],
            "bases": [],
            "decorators": []
          },
          {
            "kind": "function",
            "name": "progressbar",
            "lineno": 429,
            "endlineno": 436,
            "labels": [],
            "members": [],
            "decorators": [
              {
                "value": "contextlib.contextmanager",
                "lineno": 429,
                "endlineno": 429
              }
            ],
            "parameters": [
              {
                "name": "*args",
                "annotation": null,
                "kind": "variadic positional",
                "default": "()"
              },
              {
                "name": "**kwargs",
                "annotation": null,
                "kind": "variadic keyword",
                "default": "{}"
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_compile_code",
            "lineno": 439,
            "endlineno": 472,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "code",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "imports",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "variable",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "'value'"
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "chunks",
            "lineno": 475,
            "endlineno": 484,
            "docstring": {
              "value": "Iterate over chunks of the sequence of the given size.\n\n:param sequence: Any Python iterator\n:param size: The size of each chunk",
              "lineno": 476,
              "endlineno": 481
            },
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "sequence",
                "annotation": {
                  "source": "Iterable",
                  "full": "typing.Iterable"
                },
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "size",
                "annotation": {
                  "source": "int",
                  "full": "int"
                },
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": [
              {
                "source": "Iterable",
                "full": "typing.Iterable"
              },
              "[",
              {
                "source": "Iterable",
                "full": "typing.Iterable"
              },
              "]"
            ]
          },
          {
            "kind": "function",
            "name": "hash_record",
            "lineno": 487,
            "endlineno": 515,
            "docstring": {
              "value": "``record`` should be a Python dictionary. Returns a sha1 hash of the\nkeys and values in that record.\n\nIf ``keys=`` is provided, uses just those keys to generate the hash.\n\nExample usage::\n\n    from sqlite_utils.utils import hash_record\n\n    hashed = hash_record({\"name\": \"Cleo\", \"twitter\": \"CleoPaws\"})\n    # Or with the keys= option:\n    hashed = hash_record(\n        {\"name\": \"Cleo\", \"twitter\": \"CleoPaws\", \"age\": 7},\n        keys=(\"name\", \"twitter\")\n    )\n\n:param record: Record to generate a hash for\n:param keys: Subset of keys to use for that hash",
              "lineno": 488,
              "endlineno": 507
            },
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "record",
                "annotation": {
                  "source": "Dict",
                  "full": "typing.Dict"
                },
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "keys",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  [
                    {
                      "source": "Iterable",
                      "full": "typing.Iterable"
                    },
                    "[",
                    {
                      "source": "str",
                      "full": "str"
                    },
                    "]"
                  ],
                  "]"
                ],
                "kind": "positional or keyword",
                "default": "None"
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_flatten",
            "lineno": 518,
            "endlineno": 524,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "d",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "flatten",
            "lineno": 527,
            "endlineno": 533,
            "docstring": {
              "value": "Turn a nested dict e.g. ``{\"a\": {\"b\": 1}}`` into a flat dict: ``{\"a_b\": 1}``\n\n:param row: A Python dictionary, optionally with nested dictionaries",
              "lineno": 528,
              "endlineno": 532
            },
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "row",
                "annotation": {
                  "source": "dict",
                  "full": "dict"
                },
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": {
              "source": "dict",
              "full": "dict"
            }
          }
        ],
        "filepath": "/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/sqlite_utils/utils.py"
      },
      {
        "kind": "module",
        "name": "recipes",
        "labels": [],
        "members": [
          {
            "kind": "alias",
            "name": "parser",
            "target_path": "dateutil.parser",
            "lineno": 1,
            "endlineno": 1
          },
          {
            "kind": "alias",
            "name": "json",
            "target_path": "json",
            "lineno": 2,
            "endlineno": 2
          },
          {
            "kind": "attribute",
            "name": "IGNORE",
            "lineno": 4,
            "endlineno": 4,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "object()"
          },
          {
            "kind": "attribute",
            "name": "SET_NULL",
            "lineno": 5,
            "endlineno": 5,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "object()"
          },
          {
            "kind": "function",
            "name": "parsedate",
            "lineno": 8,
            "endlineno": 29,
            "docstring": {
              "value": "Parse a date and convert it to ISO date format: yyyy-mm-dd\n\b\n- dayfirst=True: treat xx as the day in xx/yy/zz\n- yearfirst=True: treat xx as the year in xx/yy/zz\n- errors=r.IGNORE to ignore values that cannot be parsed\n- errors=r.SET_NULL to set values that cannot be parsed to null",
              "lineno": 9,
              "endlineno": 16
            },
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "value",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "dayfirst",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "yearfirst",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "errors",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "None"
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "parsedatetime",
            "lineno": 32,
            "endlineno": 49,
            "docstring": {
              "value": "Parse a datetime and convert it to ISO datetime format: yyyy-mm-ddTHH:MM:SS\n\b\n- dayfirst=True: treat xx as the day in xx/yy/zz\n- yearfirst=True: treat xx as the year in xx/yy/zz\n- errors=r.IGNORE to ignore values that cannot be parsed\n- errors=r.SET_NULL to set values that cannot be parsed to null",
              "lineno": 33,
              "endlineno": 40
            },
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "value",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "dayfirst",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "yearfirst",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "False"
              },
              {
                "name": "errors",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "None"
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "jsonsplit",
            "lineno": 52,
            "endlineno": 56,
            "docstring": {
              "value": "Convert a string like a,b,c into a JSON array [\"a\", \"b\", \"c\"]",
              "lineno": 53,
              "endlineno": 55
            },
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "value",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              },
              {
                "name": "delimiter",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "','"
              },
              {
                "name": "type",
                "annotation": null,
                "kind": "positional or keyword",
                "default": "str"
              }
            ],
            "returns": null
          }
        ],
        "filepath": "/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/sqlite_utils/recipes.py"
      },
      {
        "kind": "module",
        "name": "__main__",
        "labels": [],
        "members": [
          {
            "kind": "alias",
            "name": "cli",
            "target_path": "sqlite_utils.cli.cli",
            "lineno": 1,
            "endlineno": 1
          }
        ],
        "filepath": "/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/sqlite_utils/__main__.py"
      },
      {
        "kind": "module",
        "name": "db",
        "labels": [],
        "members": [
          {
            "kind": "alias",
            "name": "chunks",
            "target_path": "sqlite_utils.utils.chunks",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "hash_record",
            "target_path": "sqlite_utils.utils.hash_record",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "sqlite3",
            "target_path": "sqlite_utils.utils.sqlite3",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "OperationalError",
            "target_path": "sqlite_utils.utils.OperationalError",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "suggest_column_types",
            "target_path": "sqlite_utils.utils.suggest_column_types",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "types_for_column_types",
            "target_path": "sqlite_utils.utils.types_for_column_types",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "column_affinity",
            "target_path": "sqlite_utils.utils.column_affinity",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "progressbar",
            "target_path": "sqlite_utils.utils.progressbar",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "find_spatialite",
            "target_path": "sqlite_utils.utils.find_spatialite",
            "lineno": 1,
            "endlineno": 11
          },
          {
            "kind": "alias",
            "name": "binascii",
            "target_path": "binascii",
            "lineno": 12,
            "endlineno": 12
          },
          {
            "kind": "alias",
            "name": "namedtuple",
            "target_path": "collections.namedtuple",
            "lineno": 13,
            "endlineno": 13
          },
          {
            "kind": "alias",
            "name": "Mapping",
            "target_path": "collections.abc.Mapping",
            "lineno": 14,
            "endlineno": 14
          },
          {
            "kind": "alias",
            "name": "contextlib",
            "target_path": "contextlib",
            "lineno": 15,
            "endlineno": 15
          },
          {
            "kind": "alias",
            "name": "datetime",
            "target_path": "datetime",
            "lineno": 16,
            "endlineno": 16
          },
          {
            "kind": "alias",
            "name": "decimal",
            "target_path": "decimal",
            "lineno": 17,
            "endlineno": 17
          },
          {
            "kind": "alias",
            "name": "inspect",
            "target_path": "inspect",
            "lineno": 18,
            "endlineno": 18
          },
          {
            "kind": "alias",
            "name": "itertools",
            "target_path": "itertools",
            "lineno": 19,
            "endlineno": 19
          },
          {
            "kind": "alias",
            "name": "json",
            "target_path": "json",
            "lineno": 20,
            "endlineno": 20
          },
          {
            "kind": "alias",
            "name": "os",
            "target_path": "os",
            "lineno": 21,
            "endlineno": 21
          },
          {
            "kind": "alias",
            "name": "pathlib",
            "target_path": "pathlib",
            "lineno": 22,
            "endlineno": 22
          },
          {
            "kind": "alias",
            "name": "re",
            "target_path": "re",
            "lineno": 23,
            "endlineno": 23
          },
          {
            "kind": "alias",
            "name": "secrets",
            "target_path": "secrets",
            "lineno": 24,
            "endlineno": 24
          },
          {
            "kind": "alias",
            "name": "rank_bm25",
            "target_path": "sqlite_fts4.rank_bm25",
            "lineno": 25,
            "endlineno": 25
          },
          {
            "kind": "alias",
            "name": "textwrap",
            "target_path": "textwrap",
            "lineno": 26,
            "endlineno": 26
          },
          {
            "kind": "alias",
            "name": "cast",
            "target_path": "typing.cast",
            "lineno": 27,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "Any",
            "target_path": "typing.Any",
            "lineno": 27,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "Callable",
            "target_path": "typing.Callable",
            "lineno": 27,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "Dict",
            "target_path": "typing.Dict",
            "lineno": 27,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "Generator",
            "target_path": "typing.Generator",
            "lineno": 27,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "Iterable",
            "target_path": "typing.Iterable",
            "lineno": 27,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "Union",
            "target_path": "typing.Union",
            "lineno": 27,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "Optional",
            "target_path": "typing.Optional",
            "lineno": 27,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "List",
            "target_path": "typing.List",
            "lineno": 27,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "Tuple",
            "target_path": "typing.Tuple",
            "lineno": 27,
            "endlineno": 38
          },
          {
            "kind": "alias",
            "name": "uuid",
            "target_path": "uuid",
            "lineno": 39,
            "endlineno": 39
          },
          {
            "kind": "attribute",
            "name": "SQLITE_MAX_VARS",
            "lineno": 41,
            "endlineno": 41,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "999"
          },
          {
            "kind": "attribute",
            "name": "_quote_fts_re",
            "lineno": 43,
            "endlineno": 43,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "re.compile('\\\\s+|(\".*?\")')"
          },
          {
            "kind": "attribute",
            "name": "_virtual_table_using_re",
            "lineno": 45,
            "endlineno": 63,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "re.compile('\\n^ # Start of string\\n\\\\s*CREATE\\\\s+VIRTUAL\\\\s+TABLE\\\\s+ # CREATE VIRTUAL TABLE\\n(\\n    \\'(?P<squoted_table>[^\\']*(?:\\'\\'[^\\']*)*)\\' | # single quoted name\\n    \"(?P<dquoted_table>[^\"]*(?:\"\"[^\"]*)*)\" | # double quoted name\\n    `(?P<backtick_table>[^`]+)`            | # `backtick` quoted name\\n    \\\\[(?P<squarequoted_table>[^\\\\]]+)\\\\]     | # [...] quoted name\\n    (?P<identifier>                          # SQLite non-quoted identifier\\n        [A-Za-z_\\\\u0080-\\\\uffff]  # \\\\u0080-\\\\uffff = \"any character larger than u007f\"\\n        [A-Za-z_\\\\u0080-\\\\uffff0-9\\\\$]* # zero-or-more alphanemuric or $\\n    )\\n)\\n\\\\s+(IF\\\\s+NOT\\\\s+EXISTS\\\\s+)?      # IF NOT EXISTS (optional)\\nUSING\\\\s+(?P<using>\\\\w+)          # for example USING FTS5\\n', re.VERBOSE | re.IGNORECASE)"
          },
          {
            "kind": "alias",
            "name": "pd",
            "target_path": "pandas",
            "lineno": 66,
            "endlineno": 66
          },
          {
            "kind": "alias",
            "name": "np",
            "target_path": "numpy",
            "lineno": 71,
            "endlineno": 71
          },
          {
            "kind": "attribute",
            "name": "Column",
            "lineno": 75,
            "endlineno": 77,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "namedtuple('Column', ('cid', 'name', 'type', 'notnull', 'default_value', 'is_pk'))"
          },
          {
            "kind": "attribute",
            "name": "ColumnDetails",
            "lineno": 100,
            "endlineno": 112,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "namedtuple('ColumnDetails', ('table', 'column', 'total_rows', 'num_null', 'num_blank', 'num_distinct', 'most_common', 'least_common'))"
          },
          {
            "kind": "attribute",
            "name": "ForeignKey",
            "lineno": 141,
            "endlineno": 143,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "namedtuple('ForeignKey', ('table', 'column', 'other_table', 'other_column'))"
          },
          {
            "kind": "attribute",
            "name": "Index",
            "lineno": 144,
            "endlineno": 144,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "namedtuple('Index', ('seq', 'name', 'unique', 'origin', 'partial', 'columns'))"
          },
          {
            "kind": "attribute",
            "name": "XIndex",
            "lineno": 145,
            "endlineno": 145,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "namedtuple('XIndex', ('name', 'columns'))"
          },
          {
            "kind": "attribute",
            "name": "XIndexColumn",
            "lineno": 146,
            "endlineno": 148,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "namedtuple('XIndexColumn', ('seqno', 'cid', 'name', 'desc', 'coll', 'key'))"
          },
          {
            "kind": "attribute",
            "name": "Trigger",
            "lineno": 149,
            "endlineno": 149,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "namedtuple('Trigger', ('name', 'table', 'sql'))"
          },
          {
            "kind": "attribute",
            "name": "ForeignKeysType",
            "lineno": 152,
            "endlineno": 158,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "Union[Iterable[str], Iterable[ForeignKey], Iterable[Tuple[str, str]], Iterable[Tuple[str, str, str]], Iterable[Tuple[str, str, str, str]]]"
          },
          {
            "kind": "class",
            "name": "Default",
            "lineno": 161,
            "endlineno": 162,
            "labels": [],
            "members": [],
            "bases": [],
            "decorators": []
          },
          {
            "kind": "attribute",
            "name": "DEFAULT",
            "lineno": 165,
            "endlineno": 165,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "Default()"
          },
          {
            "kind": "attribute",
            "name": "COLUMN_TYPE_MAPPING",
            "lineno": 167,
            "endlineno": 193,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "{float: 'FLOAT', int: 'INTEGER', bool: 'INTEGER', str: 'TEXT', dict: 'TEXT', tuple: 'TEXT', list: 'TEXT', bytes.__class__: 'BLOB', bytes: 'BLOB', memoryview: 'BLOB', datetime.datetime: 'TEXT', datetime.date: 'TEXT', datetime.time: 'TEXT', decimal.Decimal: 'FLOAT', None.__class__: 'TEXT', uuid.UUID: 'TEXT', 'TEXT': 'TEXT', 'INTEGER': 'INTEGER', 'FLOAT': 'FLOAT', 'BLOB': 'BLOB', 'text': 'TEXT', 'integer': 'INTEGER', 'float': 'FLOAT', 'blob': 'BLOB'}"
          },
          {
            "kind": "class",
            "name": "AlterError",
            "lineno": 217,
            "endlineno": 219,
            "docstring": {
              "value": "Error altering table",
              "lineno": 218,
              "endlineno": 218
            },
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "NoObviousTable",
            "lineno": 222,
            "endlineno": 224,
            "docstring": {
              "value": "Could not tell which table this operation refers to",
              "lineno": 223,
              "endlineno": 223
            },
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "NoTable",
            "lineno": 227,
            "endlineno": 229,
            "docstring": {
              "value": "Specified table does not exist",
              "lineno": 228,
              "endlineno": 228
            },
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "BadPrimaryKey",
            "lineno": 232,
            "endlineno": 234,
            "docstring": {
              "value": "Table does not have a single obvious primary key",
              "lineno": 233,
              "endlineno": 233
            },
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "NotFoundError",
            "lineno": 237,
            "endlineno": 239,
            "docstring": {
              "value": "Record not found",
              "lineno": 238,
              "endlineno": 238
            },
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "PrimaryKeyRequired",
            "lineno": 242,
            "endlineno": 244,
            "docstring": {
              "value": "Primary key needs to be specified",
              "lineno": 243,
              "endlineno": 243
            },
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "InvalidColumns",
            "lineno": 247,
            "endlineno": 249,
            "docstring": {
              "value": "Specified columns do not exist",
              "lineno": 248,
              "endlineno": 248
            },
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "DescIndex",
            "lineno": 252,
            "endlineno": 253,
            "labels": [],
            "members": [],
            "bases": [
              {
                "source": "str",
                "full": "str"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "BadMultiValues",
            "lineno": 256,
            "endlineno": 260,
            "docstring": {
              "value": "With multi=True code must return a Python dictionary",
              "lineno": 257,
              "endlineno": 257
            },
            "labels": [],
            "members": [
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 259,
                "endlineno": 260,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "values",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "values",
                "lineno": 260,
                "endlineno": 260,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "values"
              }
            ],
            "bases": [
              {
                "source": "Exception",
                "full": "Exception"
              }
            ],
            "decorators": []
          },
          {
            "kind": "attribute",
            "name": "_COUNTS_TABLE_CREATE_SQL",
            "lineno": 263,
            "endlineno": 268,
            "labels": [
              "module-attribute"
            ],
            "members": [],
            "value": "'\\nCREATE TABLE IF NOT EXISTS [{}](\\n   [table] TEXT PRIMARY KEY,\\n   count INTEGER DEFAULT 0\\n);\\n'.strip()"
          },
          {
            "kind": "class",
            "name": "Database",
            "lineno": 271,
            "endlineno": 1171,
            "docstring": {
              "value": "Wrapper for a SQLite database connection that adds a variety of useful utility methods.\n\nTo create an instance::\n\n    # create data.db file, or open existing:\n    db = Database(\"data.db\")\n    # Create an in-memory database:\n    dB = Database(memory=True)\n\n:param filename_or_conn: String path to a file, or a ``pathlib.Path`` object, or a\n  ``sqlite3`` connection\n:param memory: set to ``True`` to create an in-memory database\n:param memory_name: creates a named in-memory database that can be shared across multiple connections\n:param recreate: set to ``True`` to delete and recreate a file database (**dangerous**)\n:param recursive_triggers: defaults to ``True``, which sets ``PRAGMA recursive_triggers=on;`` -\n  set to ``False`` to avoid setting this pragma\n:param tracer: set a tracer function (``print`` works for this) which will be called with\n  ``sql, parameters`` every time a SQL query is executed\n:param use_counts_table: set to ``True`` to use a cached counts table, if available. See\n  :ref:`python_api_cached_table_counts`",
              "lineno": 272,
              "endlineno": 293
            },
            "labels": [],
            "members": [
              {
                "kind": "attribute",
                "name": "_counts_table_name",
                "lineno": 295,
                "endlineno": 295,
                "labels": [
                  "class-attribute"
                ],
                "members": [],
                "value": "'_counts'"
              },
              {
                "kind": "attribute",
                "name": "use_counts_table",
                "lineno": 337,
                "endlineno": 337,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "use_counts_table"
              },
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 298,
                "endlineno": 337,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "filename_or_conn",
                    "annotation": [
                      {
                        "source": "Union",
                        "full": "typing.Union"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        [
                          {
                            "source": "pathlib",
                            "full": "pathlib"
                          },
                          ".",
                          {
                            "source": "Path",
                            "full": "pathlib.Path"
                          }
                        ],
                        ", ",
                        [
                          {
                            "source": "sqlite3",
                            "full": "sqlite_utils.utils.sqlite3"
                          },
                          ".",
                          {
                            "source": "Connection",
                            "full": "sqlite_utils.utils.sqlite3.Connection"
                          }
                        ]
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "memory",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "memory_name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "recreate",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "recursive_triggers",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "True"
                  },
                  {
                    "name": "tracer",
                    "annotation": {
                      "source": "Callable",
                      "full": "typing.Callable"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "use_counts_table",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "conn",
                "lineno": 313,
                "endlineno": 317,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "sqlite3.connect(uri, uri=True, check_same_thread=False)"
              },
              {
                "kind": "attribute",
                "name": "_tracer",
                "lineno": 333,
                "endlineno": 333,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "tracer"
              },
              {
                "kind": "attribute",
                "name": "_registered_functions",
                "lineno": 336,
                "endlineno": 336,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "set()",
                "annotation": {
                  "source": "set",
                  "full": "set"
                }
              },
              {
                "kind": "function",
                "name": "close",
                "lineno": 339,
                "endlineno": 341,
                "docstring": {
                  "value": "Close the SQLite connection, and the underlying database file",
                  "lineno": 340,
                  "endlineno": 340
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "tracer",
                "lineno": 343,
                "endlineno": 365,
                "docstring": {
                  "value": "Context manager to temporarily set a tracer function - all executed SQL queries will\nbe passed to this.\n\nThe tracer function should accept two arguments: ``sql`` and ``parameters``\n\nExample usage::\n\n    with db.tracer(print):\n        db[\"creatures\"].insert({\"name\": \"Cleo\"})\n\nSee :ref:`python_api_tracing`.\n\n:param tracer: Callable accepting ``sql`` and ``parameters`` arguments",
                  "lineno": 345,
                  "endlineno": 359
                },
                "labels": [],
                "members": [],
                "decorators": [
                  {
                    "value": "contextlib.contextmanager",
                    "lineno": 343,
                    "endlineno": 343
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "tracer",
                    "annotation": {
                      "source": "Callable",
                      "full": "typing.Callable"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "__getitem__",
                "lineno": 367,
                "endlineno": 374,
                "docstring": {
                  "value": "``db[table_name]`` returns a :class:`.Table` object for the table with the specified name.\nIf the table does not exist yet it will be created the first time data is inserted into it.\n\n:param table_name: The name of the table",
                  "lineno": 368,
                  "endlineno": 373
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "table_name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Union",
                    "full": "typing.Union"
                  },
                  "[",
                  [
                    {
                      "source": "Table",
                      "full": "sqlite_utils.db.Table"
                    },
                    ", ",
                    {
                      "source": "View",
                      "full": "sqlite_utils.db.View"
                    }
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "__repr__",
                "lineno": 376,
                "endlineno": 377,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "register_function",
                "lineno": 379,
                "endlineno": 433,
                "docstring": {
                  "value": "``fn`` will be made available as a function within SQL, with the same name and number\nof arguments. Can be used as a decorator::\n\n    @db.register_function\n    def upper(value):\n        return str(value).upper()\n\nThe decorator can take arguments::\n\n    @db.register_function(deterministic=True, replace=True)\n    def upper(value):\n        return str(value).upper()\n\nSee :ref:`python_api_register_function`.\n\n:param fn: Function to register\n:param deterministic: set ``True`` for functions that always returns the same output for a given input\n:param replace: set ``True`` to replace an existing function with the same name - otherwise throw an error\n:param name: name of the SQLite function - if not specified, the Python function name will be used",
                  "lineno": 386,
                  "endlineno": 406
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "fn",
                    "annotation": {
                      "source": "Callable",
                      "full": "typing.Callable"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "deterministic",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "replace",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "name",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "register_fts4_bm25",
                "lineno": 435,
                "endlineno": 437,
                "docstring": {
                  "value": "Register the ``rank_bm25(match_info)`` function used for calculating relevance with SQLite FTS4.",
                  "lineno": 436,
                  "endlineno": 436
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "attach",
                "lineno": 439,
                "endlineno": 453,
                "docstring": {
                  "value": "Attach another SQLite database file to this connection with the specified alias, equivalent to::\n\n    ATTACH DATABASE 'filepath.db' AS alias\n\n:param alias: Alias name to use\n:param filepath: Path to SQLite database file on disk",
                  "lineno": 440,
                  "endlineno": 447
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "alias",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "filepath",
                    "annotation": [
                      {
                        "source": "Union",
                        "full": "typing.Union"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        [
                          {
                            "source": "pathlib",
                            "full": "pathlib"
                          },
                          ".",
                          {
                            "source": "Path",
                            "full": "pathlib.Path"
                          }
                        ]
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "query",
                "lineno": 455,
                "endlineno": 468,
                "docstring": {
                  "value": "Execute ``sql`` and return an iterable of dictionaries representing each row.\n\n:param sql: SQL query to execute\n:param params: Parameters to use in that query - an iterable for ``where id = ?``\n  parameters, or a dictionary for ``where id = :id``",
                  "lineno": 458,
                  "endlineno": 464
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "sql",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "params",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": [
                  {
                    "source": "Generator",
                    "full": "typing.Generator"
                  },
                  "[",
                  [
                    {
                      "source": "dict",
                      "full": "dict"
                    },
                    ", ",
                    "None",
                    ", ",
                    "None"
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "execute",
                "lineno": 470,
                "endlineno": 485,
                "docstring": {
                  "value": "Execute SQL query and return a ``sqlite3.Cursor``.\n\n:param sql: SQL query to execute\n:param parameters: Parameters to use in that query - an iterable for ``where id = ?``\n  parameters, or a dictionary for ``where id = :id``",
                  "lineno": 473,
                  "endlineno": 479
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "sql",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "parameters",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": [
                  {
                    "source": "sqlite3",
                    "full": "sqlite_utils.utils.sqlite3"
                  },
                  ".",
                  {
                    "source": "Cursor",
                    "full": "sqlite_utils.utils.sqlite3.Cursor"
                  }
                ]
              },
              {
                "kind": "function",
                "name": "executescript",
                "lineno": 487,
                "endlineno": 495,
                "docstring": {
                  "value": "Execute multiple SQL statements separated by ; and return the ``sqlite3.Cursor``.\n\n:param sql: SQL to execute",
                  "lineno": 488,
                  "endlineno": 492
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "sql",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "sqlite3",
                    "full": "sqlite_utils.utils.sqlite3"
                  },
                  ".",
                  {
                    "source": "Cursor",
                    "full": "sqlite_utils.utils.sqlite3.Cursor"
                  }
                ]
              },
              {
                "kind": "function",
                "name": "table",
                "lineno": 497,
                "endlineno": 506,
                "docstring": {
                  "value": "Return a table object, optionally configured with default options.\n\nSee :ref:`reference_db_table` for option details.\n\n:param table_name: Name of the table",
                  "lineno": 498,
                  "endlineno": 504
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "table_name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "**kwargs",
                    "annotation": null,
                    "kind": "variadic keyword",
                    "default": "{}"
                  }
                ],
                "returns": [
                  {
                    "source": "Union",
                    "full": "typing.Union"
                  },
                  "[",
                  [
                    {
                      "source": "Table",
                      "full": "sqlite_utils.db.Table"
                    },
                    ", ",
                    {
                      "source": "View",
                      "full": "sqlite_utils.db.View"
                    }
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "quote",
                "lineno": 508,
                "endlineno": 521,
                "docstring": {
                  "value": "Apply SQLite string quoting to a value, including wrappping it in single quotes.\n\n:param value: String to quote",
                  "lineno": 509,
                  "endlineno": 513
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "value",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "quote_fts",
                "lineno": 523,
                "endlineno": 543,
                "docstring": {
                  "value": "Escape special characters in a SQLite full-text search query.\n\nThis works by surrounding each token within the query with double\nquotes, in order to avoid words like ``NOT`` and ``OR`` having\nspecial meaning as defined by the FTS query syntax here:\n\nhttps://www.sqlite.org/fts5.html#full_text_query_syntax\n\nIf the query has unbalanced ``\"`` characters, adds one at end.\n\n:param query: String to escape",
                  "lineno": 524,
                  "endlineno": 536
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "query",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "table_names",
                "lineno": 545,
                "endlineno": 558,
                "docstring": {
                  "value": "List of string table names in this database.\n\n:param fts4: Only return tables that are part of FTS4 indexes\n:param fts5: Only return tables that are part of FTS5 indexes",
                  "lineno": 546,
                  "endlineno": 551
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "fts4",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "fts5",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "view_names",
                "lineno": 560,
                "endlineno": 567,
                "docstring": {
                  "value": "List of string view names in this database.",
                  "lineno": 561,
                  "endlineno": 561
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "tables",
                "lineno": 569,
                "endlineno": 572,
                "docstring": {
                  "value": "List of Table objects in this database.",
                  "lineno": 571,
                  "endlineno": 571
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 569,
                    "endlineno": 569
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "Table",
                    "full": "sqlite_utils.db.Table"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "views",
                "lineno": 574,
                "endlineno": 577,
                "docstring": {
                  "value": "List of View objects in this database.",
                  "lineno": 576,
                  "endlineno": 576
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 574,
                    "endlineno": 574
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "View",
                    "full": "sqlite_utils.db.View"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "triggers",
                "lineno": 579,
                "endlineno": 587,
                "docstring": {
                  "value": "List of ``(name, table_name, sql)`` tuples representing triggers in this database.",
                  "lineno": 581,
                  "endlineno": 581
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 579,
                    "endlineno": 579
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "Trigger",
                    "full": "sqlite_utils.db.Trigger"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "triggers_dict",
                "lineno": 589,
                "endlineno": 592,
                "docstring": {
                  "value": "A ``{trigger_name: sql}`` dictionary of triggers in this database.",
                  "lineno": 591,
                  "endlineno": 591
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 589,
                    "endlineno": 589
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Dict",
                    "full": "typing.Dict"
                  },
                  "[",
                  [
                    {
                      "source": "str",
                      "full": "str"
                    },
                    ", ",
                    {
                      "source": "str",
                      "full": "str"
                    }
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "schema",
                "lineno": 594,
                "endlineno": 605,
                "docstring": {
                  "value": "SQL schema for this database.",
                  "lineno": 596,
                  "endlineno": 596
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 594,
                    "endlineno": 594
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "supports_strict",
                "lineno": 607,
                "endlineno": 619,
                "docstring": {
                  "value": "Does this database support STRICT mode?",
                  "lineno": 609,
                  "endlineno": 609
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 607,
                    "endlineno": 607
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              },
              {
                "kind": "function",
                "name": "sqlite_version",
                "lineno": 621,
                "endlineno": 625,
                "docstring": {
                  "value": "Version of SQLite, as a tuple of integers for example ``(3, 36, 0)``.",
                  "lineno": 623,
                  "endlineno": 623
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 621,
                    "endlineno": 621
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Tuple",
                    "full": "typing.Tuple"
                  },
                  "[",
                  [
                    {
                      "source": "int",
                      "full": "int"
                    },
                    ", ",
                    "..."
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "journal_mode",
                "lineno": 627,
                "endlineno": 634,
                "docstring": {
                  "value": "Current ``journal_mode`` of this database.\n\nhttps://www.sqlite.org/pragma.html#pragma_journal_mode",
                  "lineno": 629,
                  "endlineno": 633
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 627,
                    "endlineno": 627
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "enable_wal",
                "lineno": 636,
                "endlineno": 641,
                "docstring": {
                  "value": "Sets ``journal_mode`` to ``'wal'`` to enable Write-Ahead Log mode.",
                  "lineno": 637,
                  "endlineno": 639
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "disable_wal",
                "lineno": 643,
                "endlineno": 646,
                "docstring": {
                  "value": "Sets ``journal_mode`` back to ``'delete'`` to disable Write-Ahead Log mode.",
                  "lineno": 644,
                  "endlineno": 644
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "_ensure_counts_table",
                "lineno": 648,
                "endlineno": 650,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "enable_counts",
                "lineno": 652,
                "endlineno": 664,
                "docstring": {
                  "value": "Enable trigger-based count caching for every table in the database, see\n:ref:`python_api_cached_table_counts`.",
                  "lineno": 653,
                  "endlineno": 656
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "cached_counts",
                "lineno": 666,
                "endlineno": 679,
                "docstring": {
                  "value": "Return ``{table_name: count}`` dictionary of cached counts for specified tables, or\nall tables if ``tables`` not provided.\n\n:param tables: Subset list of tables to return counts for.",
                  "lineno": 667,
                  "endlineno": 672
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "tables",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": [
                  {
                    "source": "Dict",
                    "full": "typing.Dict"
                  },
                  "[",
                  [
                    {
                      "source": "str",
                      "full": "str"
                    },
                    ", ",
                    {
                      "source": "int",
                      "full": "int"
                    }
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "reset_counts",
                "lineno": 681,
                "endlineno": 691,
                "docstring": {
                  "value": "Re-calculate cached counts for tables.",
                  "lineno": 682,
                  "endlineno": 682
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "execute_returning_dicts",
                "lineno": 693,
                "endlineno": 696,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "sql",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "params",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "dict",
                    "full": "dict"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "resolve_foreign_keys",
                "lineno": 698,
                "endlineno": 742,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": {
                      "source": "ForeignKeysType",
                      "full": "sqlite_utils.db.ForeignKeysType"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "ForeignKey",
                    "full": "sqlite_utils.db.ForeignKey"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "create_table_sql",
                "lineno": 744,
                "endlineno": 873,
                "docstring": {
                  "value": "Returns the SQL ``CREATE TABLE`` statement for creating the specified table.\n\n:param name: Name of table\n:param columns: Dictionary mapping column names to their types, for example ``{\"name\": str, \"age\": int}``\n:param pk: String name of column to use as a primary key, or a tuple of strings for a compound primary key covering multiple columns\n:param foreign_keys: List of foreign key definitions for this table\n:param column_order: List specifying which columns should come first\n:param not_null: List of columns that should be created as ``NOT NULL``\n:param defaults: Dictionary specifying default values for columns\n:param hash_id: Name of column to be used as a primary key containing a hash of the other columns\n:param hash_id_columns: List of columns to be used when calculating the hash ID for a row\n:param extracts: List or dictionary of columns to be extracted during inserts, see :ref:`python_api_extracts`\n:param if_not_exists: Use ``CREATE TABLE IF NOT EXISTS``",
                  "lineno": 758,
                  "endlineno": 772
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Dict",
                        "full": "typing.Dict"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        {
                          "source": "Any",
                          "full": "typing.Any"
                        }
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "ForeignKeysType",
                        "full": "sqlite_utils.db.ForeignKeysType"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "column_order",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "List",
                          "full": "typing.List"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "not_null",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "defaults",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "hash_id",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "extracts",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "str",
                                "full": "str"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          [
                            {
                              "source": "List",
                              "full": "typing.List"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ]
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "if_not_exists",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "create_table",
                "lineno": 875,
                "endlineno": 985,
                "docstring": {
                  "value": "Create a table with the specified name and the specified ``{column_name: type}`` columns.\n\nSee :ref:`python_api_explicit_create`.\n\n:param name: Name of table\n:param columns: Dictionary mapping column names to their types, for example ``{\"name\": str, \"age\": int}``\n:param pk: String name of column to use as a primary key, or a tuple of strings for a compound primary key covering multiple columns\n:param foreign_keys: List of foreign key definitions for this table\n:param column_order: List specifying which columns should come first\n:param not_null: List of columns that should be created as ``NOT NULL``\n:param defaults: Dictionary specifying default values for columns\n:param hash_id: Name of column to be used as a primary key containing a hash of the other columns\n:param hash_id_columns: List of columns to be used when calculating the hash ID for a row\n:param extracts: List or dictionary of columns to be extracted during inserts, see :ref:`python_api_extracts`\n:param if_not_exists: Use ``CREATE TABLE IF NOT EXISTS``\n:param transform: If table already exists transform it to fit the specified schema",
                  "lineno": 890,
                  "endlineno": 907
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Dict",
                        "full": "typing.Dict"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        {
                          "source": "Any",
                          "full": "typing.Any"
                        }
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "ForeignKeysType",
                        "full": "sqlite_utils.db.ForeignKeysType"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "column_order",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "List",
                          "full": "typing.List"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "not_null",
                    "annotation": [
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "defaults",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "hash_id",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "extracts",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "str",
                                "full": "str"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          [
                            {
                              "source": "List",
                              "full": "typing.List"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ]
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "if_not_exists",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "transform",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": {
                  "source": "Table",
                  "full": "sqlite_utils.db.Table"
                }
              },
              {
                "kind": "function",
                "name": "create_view",
                "lineno": 987,
                "endlineno": 1013,
                "docstring": {
                  "value": "Create a new SQL view with the specified name - ``sql`` should start with ``SELECT ...``.\n\n:param name: Name of the view\n:param sql: SQL ``SELECT`` query to use for this view.\n:param ignore: Set to ``True`` to do nothing if a view with this name already exists\n:param replace: Set to ``True`` to replace the view if one with this name already exists",
                  "lineno": 990,
                  "endlineno": 997
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "sql",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "ignore",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "replace",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "m2m_table_candidates",
                "lineno": 1015,
                "endlineno": 1031,
                "docstring": {
                  "value": "Given two table names returns the name of tables that could define a\nmany-to-many relationship between those two tables, based on having\nforeign keys to both of the provided tables.\n\n:param table: Table name\n:param other_table: Other table name",
                  "lineno": 1016,
                  "endlineno": 1023
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "table",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "other_table",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "add_foreign_keys",
                "lineno": 1033,
                "endlineno": 1104,
                "docstring": {
                  "value": "See :ref:`python_api_add_foreign_keys`.\n\n:param foreign_keys: A list of  ``(table, column, other_table, other_column)``\n  tuples",
                  "lineno": 1034,
                  "endlineno": 1039
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": [
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "[",
                      [
                        {
                          "source": "Tuple",
                          "full": "typing.Tuple"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "str",
                            "full": "str"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "index_foreign_keys",
                "lineno": 1106,
                "endlineno": 1115,
                "docstring": {
                  "value": "Create indexes for every foreign key column on every table in the database.",
                  "lineno": 1107,
                  "endlineno": 1107
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "vacuum",
                "lineno": 1117,
                "endlineno": 1119,
                "docstring": {
                  "value": "Run a SQLite ``VACUUM`` against the database.",
                  "lineno": 1118,
                  "endlineno": 1118
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "analyze",
                "lineno": 1121,
                "endlineno": 1130,
                "docstring": {
                  "value": "Run ``ANALYZE`` against the entire database or a named table or index.\n\n:param name: Run ``ANALYZE`` against this specific named table or index",
                  "lineno": 1122,
                  "endlineno": 1126
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "name",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "init_spatialite",
                "lineno": 1132,
                "endlineno": 1171,
                "docstring": {
                  "value": "The ``init_spatialite`` method will load and initialize the SpatiaLite extension.\nThe ``path`` argument should be an absolute path to the compiled extension, which\ncan be found using ``find_spatialite``.\n\nReturns ``True`` if SpatiaLite was successfully initialized.\n\n.. code-block:: python\n\n    from sqlite_utils.db import Database\n    from sqlite_utils.utils import find_spatialite\n\n    db = Database(\"mydb.db\")\n    db.init_spatialite(find_spatialite())\n\nIf you've installed SpatiaLite somewhere unexpected (for testing an alternate version, for example)\nyou can pass in an absolute path:\n\n.. code-block:: python\n\n    from sqlite_utils.db import Database\n    from sqlite_utils.utils import find_spatialite\n\n    db = Database(\"mydb.db\")\n    db.init_spatialite(\"./local/mod_spatialite.dylib\")\n\n:param path: Path to SpatiaLite module on disk",
                  "lineno": 1133,
                  "endlineno": 1160
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "path",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              }
            ],
            "bases": [],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "Queryable",
            "lineno": 1174,
            "endlineno": 1308,
            "labels": [],
            "members": [
              {
                "kind": "function",
                "name": "exists",
                "lineno": 1175,
                "endlineno": 1177,
                "docstring": {
                  "value": "Does this table or view exist yet?",
                  "lineno": 1176,
                  "endlineno": 1176
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              },
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 1179,
                "endlineno": 1181,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "db",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "name",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "db",
                "lineno": 1180,
                "endlineno": 1180,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "db"
              },
              {
                "kind": "attribute",
                "name": "name",
                "lineno": 1181,
                "endlineno": 1181,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "name"
              },
              {
                "kind": "function",
                "name": "count_where",
                "lineno": 1183,
                "endlineno": 1198,
                "docstring": {
                  "value": "Executes ``SELECT count(*) FROM table WHERE ...`` and returns a count.\n\n:param where: SQL where fragment to use, for example ``id > ?``\n:param where_args: Parameters to use with that fragment - an iterable for ``id > ?``\n  parameters, or a dictionary for ``id > :id``",
                  "lineno": 1188,
                  "endlineno": 1194
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "where",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where_args",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": {
                  "source": "int",
                  "full": "int"
                }
              },
              {
                "kind": "function",
                "name": "execute_count",
                "lineno": 1200,
                "endlineno": 1202,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "count",
                "lineno": 1204,
                "endlineno": 1207,
                "docstring": {
                  "value": "A count of the rows in this table or view.",
                  "lineno": 1206,
                  "endlineno": 1206
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1204,
                    "endlineno": 1204
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "int",
                  "full": "int"
                }
              },
              {
                "kind": "function",
                "name": "rows",
                "lineno": 1209,
                "endlineno": 1212,
                "docstring": {
                  "value": "Iterate over every dictionaries for each row in this table or view.",
                  "lineno": 1211,
                  "endlineno": 1211
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1209,
                    "endlineno": 1209
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Generator",
                    "full": "typing.Generator"
                  },
                  "[",
                  [
                    {
                      "source": "dict",
                      "full": "dict"
                    },
                    ", ",
                    "None",
                    ", ",
                    "None"
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "rows_where",
                "lineno": 1214,
                "endlineno": 1250,
                "docstring": {
                  "value": "Iterate over every row in this table or view that matches the specified where clause.\n\nReturns each row as a dictionary. See :ref:`python_api_rows` for more details.\n\n:param where: SQL where fragment to use, for example ``id > ?``\n:param where_args: Parameters to use with that fragment - an iterable for ``id > ?``\n  parameters, or a dictionary for ``id > :id``\n:param order_by: Column or fragment of SQL to order by\n:param select: Comma-separated list of columns to select - defaults to ``*``\n:param limit: Integer number of rows to limit to\n:param offset: Integer for SQL offset",
                  "lineno": 1223,
                  "endlineno": 1235
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "where",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where_args",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "order_by",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "select",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "'*'"
                  },
                  {
                    "name": "limit",
                    "annotation": {
                      "source": "int",
                      "full": "int"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "offset",
                    "annotation": {
                      "source": "int",
                      "full": "int"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": [
                  {
                    "source": "Generator",
                    "full": "typing.Generator"
                  },
                  "[",
                  [
                    {
                      "source": "dict",
                      "full": "dict"
                    },
                    ", ",
                    "None",
                    ", ",
                    "None"
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "pks_and_rows_where",
                "lineno": 1252,
                "endlineno": 1288,
                "docstring": {
                  "value": "Like ``.rows_where()`` but returns ``(pk, row)`` pairs - ``pk`` can be a single value or tuple.\n\n:param where: SQL where fragment to use, for example ``id > ?``\n:param where_args: Parameters to use with that fragment - an iterable for ``id > ?``\n  parameters, or a dictionary for ``id > :id``\n:param order_by: Column or fragment of SQL to order by\n:param select: Comma-separated list of columns to select - defaults to ``*``\n:param limit: Integer number of rows to limit to\n:param offset: Integer for SQL offset",
                  "lineno": 1260,
                  "endlineno": 1270
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "where",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where_args",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "order_by",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "limit",
                    "annotation": {
                      "source": "int",
                      "full": "int"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "offset",
                    "annotation": {
                      "source": "int",
                      "full": "int"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": [
                  {
                    "source": "Generator",
                    "full": "typing.Generator"
                  },
                  "[",
                  [
                    [
                      {
                        "source": "Tuple",
                        "full": "typing.Tuple"
                      },
                      "[",
                      [
                        {
                          "source": "Any",
                          "full": "typing.Any"
                        },
                        ", ",
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        }
                      ],
                      "]"
                    ],
                    ", ",
                    "None",
                    ", ",
                    "None"
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "columns",
                "lineno": 1290,
                "endlineno": 1296,
                "docstring": {
                  "value": "List of :ref:`Columns <reference_db_other_column>` representing the columns in this table or view.",
                  "lineno": 1292,
                  "endlineno": 1292
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1290,
                    "endlineno": 1290
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "Column",
                    "full": "sqlite_utils.db.Column"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "columns_dict",
                "lineno": 1298,
                "endlineno": 1301,
                "docstring": {
                  "value": "``{column_name: python-type}`` dictionary representing columns in this table or view.",
                  "lineno": 1300,
                  "endlineno": 1300
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1298,
                    "endlineno": 1298
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Dict",
                    "full": "typing.Dict"
                  },
                  "[",
                  [
                    {
                      "source": "str",
                      "full": "str"
                    },
                    ", ",
                    {
                      "source": "Any",
                      "full": "typing.Any"
                    }
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "schema",
                "lineno": 1303,
                "endlineno": 1308,
                "docstring": {
                  "value": "SQL schema for this table or view.",
                  "lineno": 1305,
                  "endlineno": 1305
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1303,
                    "endlineno": 1303
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              }
            ],
            "bases": [],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "Table",
            "lineno": 1311,
            "endlineno": 3540,
            "docstring": {
              "value": "Tables should usually be initialized using the ``db.table(table_name)`` or\n``db[table_name]`` methods.\n\nThe following optional parameters can be passed to ``db.table(table_name, ...)``:\n\n:param db: Provided by ``db.table(table_name)``\n:param name: Provided by ``db.table(table_name)``\n:param pk: Name of the primary key column, or tuple of columns\n:param foreign_keys: List of foreign key definitions\n:param column_order: List of column names in the order they should be in the table\n:param not_null: List of columns that cannot be null\n:param defaults: Dictionary of column names and default values\n:param batch_size: Integer number of rows to insert at a time\n:param hash_id: If True, use a hash of the row values as the primary key\n:param hash_id_columns: List of columns to use for the hash_id\n:param alter: If True, automatically alter the table if it doesn't match the schema\n:param ignore: If True, ignore rows that already exist when inserting\n:param replace: If True, replace rows that already exist when inserting\n:param extracts: Dictionary or list of column names to extract into a separate table on inserts\n:param conversions: Dictionary of column names and conversion functions\n:param columns: Dictionary of column names to column types",
              "lineno": 1312,
              "endlineno": 1334
            },
            "labels": [],
            "members": [
              {
                "kind": "attribute",
                "name": "last_rowid",
                "lineno": 1337,
                "endlineno": 1337,
                "labels": [
                  "class-attribute"
                ],
                "members": [],
                "value": "None",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "int",
                    "full": "int"
                  },
                  "]"
                ]
              },
              {
                "kind": "attribute",
                "name": "last_pk",
                "lineno": 1339,
                "endlineno": 1339,
                "labels": [
                  "class-attribute"
                ],
                "members": [],
                "value": "None",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "Any",
                    "full": "typing.Any"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "__init__",
                "lineno": 1341,
                "endlineno": 1376,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "db",
                    "annotation": {
                      "source": "Database",
                      "full": "sqlite_utils.db.Database"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "ForeignKeysType",
                        "full": "sqlite_utils.db.ForeignKeysType"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "column_order",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "List",
                          "full": "typing.List"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "not_null",
                    "annotation": [
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "defaults",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "batch_size",
                    "annotation": {
                      "source": "int",
                      "full": "int"
                    },
                    "kind": "positional or keyword",
                    "default": "100"
                  },
                  {
                    "name": "hash_id",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "alter",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "ignore",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "replace",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "extracts",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "str",
                                "full": "str"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          [
                            {
                              "source": "List",
                              "full": "typing.List"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ]
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "conversions",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "dict",
                        "full": "dict"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": null
              },
              {
                "kind": "attribute",
                "name": "_defaults",
                "lineno": 1361,
                "endlineno": 1376,
                "labels": [
                  "instance-attribute"
                ],
                "members": [],
                "value": "dict(pk=pk, foreign_keys=foreign_keys, column_order=column_order, not_null=not_null, defaults=defaults, batch_size=batch_size, hash_id=hash_id, hash_id_columns=hash_id_columns, alter=alter, ignore=ignore, replace=replace, extracts=extracts, conversions=conversions or {}, columns=columns)"
              },
              {
                "kind": "function",
                "name": "__repr__",
                "lineno": 1378,
                "endlineno": 1384,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "count",
                "lineno": 1386,
                "endlineno": 1393,
                "docstring": {
                  "value": "Count of the rows in this table - optionally from the table count cache, if configured.",
                  "lineno": 1388,
                  "endlineno": 1388
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1386,
                    "endlineno": 1386
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "int",
                  "full": "int"
                }
              },
              {
                "kind": "function",
                "name": "exists",
                "lineno": 1395,
                "endlineno": 1396,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              },
              {
                "kind": "function",
                "name": "pks",
                "lineno": 1398,
                "endlineno": 1404,
                "docstring": {
                  "value": "Primary key columns for this table.",
                  "lineno": 1400,
                  "endlineno": 1400
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1398,
                    "endlineno": 1398
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "use_rowid",
                "lineno": 1406,
                "endlineno": 1409,
                "docstring": {
                  "value": "Does this table use ``rowid`` for its primary key (no other primary keys are specified)?",
                  "lineno": 1408,
                  "endlineno": 1408
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1406,
                    "endlineno": 1406
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              },
              {
                "kind": "function",
                "name": "get",
                "lineno": 1411,
                "endlineno": 1437,
                "docstring": {
                  "value": "Return row (as dictionary) for the specified primary key.\n\nRaises ``sqlite_utils.db.NotFoundError`` if a matching row cannot be found.\n\n:param pk_values: A single value, or a tuple of values for tables that have a compound primary key",
                  "lineno": 1412,
                  "endlineno": 1418
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk_values",
                    "annotation": [
                      {
                        "source": "Union",
                        "full": "typing.Union"
                      },
                      "[",
                      [
                        {
                          "source": "list",
                          "full": "list"
                        },
                        ", ",
                        {
                          "source": "tuple",
                          "full": "tuple"
                        },
                        ", ",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        {
                          "source": "int",
                          "full": "int"
                        }
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "dict",
                  "full": "dict"
                }
              },
              {
                "kind": "function",
                "name": "foreign_keys",
                "lineno": 1439,
                "endlineno": 1456,
                "docstring": {
                  "value": "List of foreign keys defined on this table.",
                  "lineno": 1441,
                  "endlineno": 1441
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1439,
                    "endlineno": 1439
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "ForeignKey",
                    "full": "sqlite_utils.db.ForeignKey"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "virtual_table_using",
                "lineno": 1458,
                "endlineno": 1464,
                "docstring": {
                  "value": "Type of virtual table, or ``None`` if this is not a virtual table.",
                  "lineno": 1460,
                  "endlineno": 1460
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1458,
                    "endlineno": 1458
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "indexes",
                "lineno": 1466,
                "endlineno": 1488,
                "docstring": {
                  "value": "List of indexes defined on this table.",
                  "lineno": 1468,
                  "endlineno": 1468
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1466,
                    "endlineno": 1466
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "Index",
                    "full": "sqlite_utils.db.Index"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "xindexes",
                "lineno": 1490,
                "endlineno": 1507,
                "docstring": {
                  "value": "List of indexes defined on this table using the more detailed ``XIndex`` format.",
                  "lineno": 1492,
                  "endlineno": 1492
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1490,
                    "endlineno": 1490
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "XIndex",
                    "full": "sqlite_utils.db.XIndex"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "triggers",
                "lineno": 1509,
                "endlineno": 1519,
                "docstring": {
                  "value": "List of triggers defined on this table.",
                  "lineno": 1511,
                  "endlineno": 1511
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1509,
                    "endlineno": 1509
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "Trigger",
                    "full": "sqlite_utils.db.Trigger"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "triggers_dict",
                "lineno": 1521,
                "endlineno": 1524,
                "docstring": {
                  "value": "``{trigger_name: sql}`` dictionary of triggers defined on this table.",
                  "lineno": 1523,
                  "endlineno": 1523
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1521,
                    "endlineno": 1521
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Dict",
                    "full": "typing.Dict"
                  },
                  "[",
                  [
                    {
                      "source": "str",
                      "full": "str"
                    },
                    ", ",
                    {
                      "source": "str",
                      "full": "str"
                    }
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "default_values",
                "lineno": 1526,
                "endlineno": 1533,
                "docstring": {
                  "value": "``{column_name: default_value}`` dictionary of default values for columns in this table.",
                  "lineno": 1528,
                  "endlineno": 1528
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1526,
                    "endlineno": 1526
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Dict",
                    "full": "typing.Dict"
                  },
                  "[",
                  [
                    {
                      "source": "str",
                      "full": "str"
                    },
                    ", ",
                    {
                      "source": "Any",
                      "full": "typing.Any"
                    }
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "strict",
                "lineno": 1535,
                "endlineno": 1540,
                "docstring": {
                  "value": "Is this a STRICT table?",
                  "lineno": 1537,
                  "endlineno": 1537
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 1535,
                    "endlineno": 1535
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              },
              {
                "kind": "function",
                "name": "create",
                "lineno": 1542,
                "endlineno": 1588,
                "docstring": {
                  "value": "Create a table with the specified columns.\n\nSee :ref:`python_api_explicit_create` for full details.\n\n:param columns: Dictionary mapping column names to their types, for example ``{\"name\": str, \"age\": int}``\n:param pk: String name of column to use as a primary key, or a tuple of strings for a compound primary key covering multiple columns\n:param foreign_keys: List of foreign key definitions for this table\n:param column_order: List specifying which columns should come first\n:param not_null: List of columns that should be created as ``NOT NULL``\n:param defaults: Dictionary specifying default values for columns\n:param hash_id: Name of column to be used as a primary key containing a hash of the other columns\n:param hash_id_columns: List of columns to be used when calculating the hash ID for a row\n:param extracts: List or dictionary of columns to be extracted during inserts, see :ref:`python_api_extracts`\n:param if_not_exists: Use ``CREATE TABLE IF NOT EXISTS``",
                  "lineno": 1556,
                  "endlineno": 1571
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Dict",
                        "full": "typing.Dict"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        {
                          "source": "Any",
                          "full": "typing.Any"
                        }
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "ForeignKeysType",
                        "full": "sqlite_utils.db.ForeignKeysType"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "column_order",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "List",
                          "full": "typing.List"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "not_null",
                    "annotation": [
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "defaults",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "hash_id",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "extracts",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "str",
                                "full": "str"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          [
                            {
                              "source": "List",
                              "full": "typing.List"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ]
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "if_not_exists",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "transform",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": {
                  "source": "Table",
                  "full": "sqlite_utils.db.Table"
                }
              },
              {
                "kind": "function",
                "name": "duplicate",
                "lineno": 1590,
                "endlineno": 1604,
                "docstring": {
                  "value": "Create a duplicate of this table, copying across the schema and all row data.\n\n:param new_name: Name of the new table",
                  "lineno": 1591,
                  "endlineno": 1595
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "new_name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "Table",
                  "full": "sqlite_utils.db.Table"
                }
              },
              {
                "kind": "function",
                "name": "transform",
                "lineno": 1606,
                "endlineno": 1660,
                "docstring": {
                  "value": "Apply an advanced alter table, including operations that are not supported by\n``ALTER TABLE`` in SQLite itself.\n\nSee :ref:`python_api_transform` for full details.\n\n:param types: Columns that should have their type changed, for example ``{\"weight\": float}``\n:param rename: Columns to rename, for example ``{\"headline\": \"title\"}``\n:param drop: Columns to drop\n:param pk: New primary key for the table\n:param not_null: Columns to set as ``NOT NULL``\n:param defaults: Default values for columns\n:param drop_foreign_keys: Names of columns that should have their foreign key constraints removed\n:param column_order: List of strings specifying a full or partial column order\n  to use when creating the table.",
                  "lineno": 1618,
                  "endlineno": 1633
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "types",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "dict",
                        "full": "dict"
                      },
                      "]"
                    ],
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "rename",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "dict",
                        "full": "dict"
                      },
                      "]"
                    ],
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "drop",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "]"
                    ],
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "pk",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      },
                      "]"
                    ],
                    "kind": "keyword-only",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "not_null",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "defaults",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "drop_foreign_keys",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "]"
                    ],
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "column_order",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "List",
                          "full": "typing.List"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "keyword-only",
                    "default": "None"
                  }
                ],
                "returns": {
                  "source": "Table",
                  "full": "sqlite_utils.db.Table"
                }
              },
              {
                "kind": "function",
                "name": "transform_sql",
                "lineno": 1662,
                "endlineno": 1793,
                "docstring": {
                  "value": "Return a list of SQL statements that should be executed in order to apply this transformation.\n\n:param types: Columns that should have their type changed, for example ``{\"weight\": float}``\n:param rename: Columns to rename, for example ``{\"headline\": \"title\"}``\n:param drop: Columns to drop\n:param pk: New primary key for the table\n:param not_null: Columns to set as ``NOT NULL``\n:param defaults: Default values for columns\n:param drop_foreign_keys: Names of columns that should have their foreign key constraints removed\n:param column_order: List of strings specifying a full or partial column order\n  to use when creating the table.",
                  "lineno": 1675,
                  "endlineno": 1687
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "types",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "rename",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "drop",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "pk",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "not_null",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "defaults",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "drop_foreign_keys",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "column_order",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "None"
                  },
                  {
                    "name": "tmp_suffix",
                    "annotation": null,
                    "kind": "keyword-only",
                    "default": "None"
                  }
                ],
                "returns": [
                  {
                    "source": "List",
                    "full": "typing.List"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "extract",
                "lineno": 1795,
                "endlineno": 1901,
                "docstring": {
                  "value": "Extract specified columns into a separate table.\n\nSee :ref:`python_api_extract` for details.\n\n:param columns: Single column or list of columns that should be extracted\n:param table: Name of table in which the new records should be created\n:param fk_column: Name of the foreign key column to populate in the original table\n:param rename: Dictionary of columns that should be renamed when populating the new table",
                  "lineno": 1802,
                  "endlineno": 1811
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Union",
                        "full": "typing.Union"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          "[",
                          {
                            "source": "str",
                            "full": "str"
                          },
                          "]"
                        ]
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "table",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "fk_column",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "rename",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "str",
                            "full": "str"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": {
                  "source": "Table",
                  "full": "sqlite_utils.db.Table"
                }
              },
              {
                "kind": "function",
                "name": "create_index",
                "lineno": 1903,
                "endlineno": 1980,
                "docstring": {
                  "value": "Create an index on this table.\n\n:param columns: A single columns or list of columns to index. These can be strings or,\n  to create an index using the column in descending order, ``db.DescIndex(column_name)`` objects.\n:param index_name: The name to use for the new index. Defaults to the column names joined on ``_``.\n:param unique: Should the index be marked as unique, forcing unique values?\n:param if_not_exists: Only create the index if one with that name does not already exist.\n:param find_unique_name: If ``index_name`` is not provided and the automatically derived name\n  already exists, keep incrementing a suffix number to find an available name.\n:param analyze: Run ``ANALYZE`` against this index after creating it.\n\nSee :ref:`python_api_create_index`.",
                  "lineno": 1912,
                  "endlineno": 1925
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "DescIndex",
                            "full": "sqlite_utils.db.DescIndex"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "index_name",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "unique",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "if_not_exists",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "find_unique_name",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "analyze",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "add_column",
                "lineno": 1982,
                "endlineno": 2031,
                "docstring": {
                  "value": "Add a column to this table. See :ref:`python_api_add_column`.\n\n:param col_name: Name of the new column\n:param col_type: Column type - a Python type such as ``str`` or a SQLite type string such as ``\"BLOB\"``\n:param fk: Name of a table that this column should be a foreign key reference to\n:param fk_col: Column in the foreign key table that this should reference\n:param not_null_default: Set this column to ``not null`` and give it this default value",
                  "lineno": 1990,
                  "endlineno": 1998
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "col_name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "col_type",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "fk",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "fk_col",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "not_null_default",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "drop",
                "lineno": 2033,
                "endlineno": 2043,
                "docstring": {
                  "value": "Drop this table.\n\n:param ignore: Set to ``True`` to ignore the error if the table does not exist",
                  "lineno": 2034,
                  "endlineno": 2038
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "ignore",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "guess_foreign_table",
                "lineno": 2045,
                "endlineno": 2075,
                "docstring": {
                  "value": "For a given column, suggest another table that might be referenced by this\ncolumn should it be used as a foreign key.\n\nFor example, a column called ``tag_id`` or ``tag`` or ``tags`` might suggest\na ``tag`` table, if one exists.\n\nIf no candidates can be found, raises a ``NoObviousTable`` exception.\n\n:param column: Name of column",
                  "lineno": 2046,
                  "endlineno": 2056
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "column",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "guess_foreign_column",
                "lineno": 2077,
                "endlineno": 2084,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "other_table",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "add_foreign_key",
                "lineno": 2086,
                "endlineno": 2134,
                "docstring": {
                  "value": "Alter the schema to mark the specified column as a foreign key to another table.\n\n:param column: The column to mark as a foreign key.\n:param other_table: The table it refers to - if omitted, will be guessed based on the column name.\n:param other_column: The column on the other table it - if omitted, will be guessed.\n:param ignore: Set this to ``True`` to ignore an existing foreign key - otherwise a ``AlterError`` will be raised.",
                  "lineno": 2093,
                  "endlineno": 2100
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "column",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "other_table",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "other_column",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "ignore",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "enable_counts",
                "lineno": 2136,
                "endlineno": 2183,
                "docstring": {
                  "value": "Set up triggers to update a cache of the count of rows in this table.\n\nSee :ref:`python_api_cached_table_counts` for details.",
                  "lineno": 2137,
                  "endlineno": 2141
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "has_counts_triggers",
                "lineno": 2185,
                "endlineno": 2194,
                "docstring": {
                  "value": "Does this table have triggers setup to update cached counts?",
                  "lineno": 2187,
                  "endlineno": 2187
                },
                "labels": [
                  "property"
                ],
                "members": [],
                "decorators": [
                  {
                    "value": "property",
                    "lineno": 2185,
                    "endlineno": 2185
                  }
                ],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              },
              {
                "kind": "function",
                "name": "enable_fts",
                "lineno": 2196,
                "endlineno": 2280,
                "docstring": {
                  "value": "Enable SQLite full-text search against the specified columns.\n\nSee :ref:`python_api_fts` for more details.\n\n:param columns: List of column names to include in the search index.\n:param fts_version: FTS version to use - defaults to ``FTS5`` but you may want ``FTS4`` for older SQLite versions.\n:param create_triggers: Should triggers be created to keep the search index up-to-date? Defaults to ``False``.\n:param tokenize: Custom SQLite tokenizer to use, for example ``\"porter\"`` to enable Porter stemming.\n:param replace: Should any existing FTS index for this table be replaced by the new one?",
                  "lineno": 2204,
                  "endlineno": 2214
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "fts_version",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "'FTS5'"
                  },
                  {
                    "name": "create_triggers",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "tokenize",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "replace",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "populate_fts",
                "lineno": 2282,
                "endlineno": 2302,
                "docstring": {
                  "value": "Update the associated SQLite full-text search index with the latest data from the\ntable for the specified columns.\n\n:param columns: Columns to populate the data for",
                  "lineno": 2283,
                  "endlineno": 2288
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "Table",
                  "full": "sqlite_utils.db.Table"
                }
              },
              {
                "kind": "function",
                "name": "disable_fts",
                "lineno": 2304,
                "endlineno": 2327,
                "docstring": {
                  "value": "Remove any full-text search index and related triggers configured for this table.",
                  "lineno": 2305,
                  "endlineno": 2305
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "Table",
                  "full": "sqlite_utils.db.Table"
                }
              },
              {
                "kind": "function",
                "name": "rebuild_fts",
                "lineno": 2329,
                "endlineno": 2340,
                "docstring": {
                  "value": "Run the ``rebuild`` operation against the associated full-text search index table.",
                  "lineno": 2330,
                  "endlineno": 2330
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "detect_fts",
                "lineno": 2342,
                "endlineno": 2367,
                "docstring": {
                  "value": "Detect if table has a corresponding FTS virtual table and return it",
                  "lineno": 2343,
                  "endlineno": 2343
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  {
                    "source": "str",
                    "full": "str"
                  },
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "optimize",
                "lineno": 2369,
                "endlineno": 2380,
                "docstring": {
                  "value": "Run the ``optimize`` operation against the associated full-text search index table.",
                  "lineno": 2370,
                  "endlineno": 2370
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "Table",
                  "full": "sqlite_utils.db.Table"
                }
              },
              {
                "kind": "function",
                "name": "search_sql",
                "lineno": 2382,
                "endlineno": 2458,
                "docstring": {
                  "value": "\"\nReturn SQL string that can be used to execute searches against this table.\n\n:param columns: Columns to search against\n:param order_by: Column or SQL expression to sort by\n:param limit: SQL limit\n:param offset: SQL offset\n:param where: Extra SQL fragment for the WHERE clause\n:param include_rank: Select the search rank column in the final query",
                  "lineno": 2391,
                  "endlineno": 2400
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "order_by",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "limit",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "int",
                        "full": "int"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "offset",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "int",
                        "full": "int"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "include_rank",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "search",
                "lineno": 2460,
                "endlineno": 2506,
                "docstring": {
                  "value": "Execute a search against this table using SQLite full-text search, returning a sequence of\ndictionaries for each row.\n\n:param q: Terms to search for\n:param order_by: Defaults to order by rank, or specify a column here.\n:param columns: List of columns to return, defaults to all columns.\n:param limit: Optional integer limit for returned rows.\n:param offset: Optional integer SQL offset.\n:param where: Extra SQL fragment for the WHERE clause\n:param where_args: Arguments to use for :param placeholders in the extra WHERE clause\n:param quote: Apply quoting to disable any special characters in the search query\n\nSee :ref:`python_api_fts_search`.",
                  "lineno": 2471,
                  "endlineno": 2485
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "q",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "order_by",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "limit",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "int",
                        "full": "int"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "offset",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "int",
                        "full": "int"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where_args",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "quote",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": [
                  {
                    "source": "Generator",
                    "full": "typing.Generator"
                  },
                  "[",
                  [
                    {
                      "source": "dict",
                      "full": "dict"
                    },
                    ", ",
                    "None",
                    ", ",
                    "None"
                  ],
                  "]"
                ]
              },
              {
                "kind": "function",
                "name": "value_or_default",
                "lineno": 2508,
                "endlineno": 2509,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "key",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "value",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "delete",
                "lineno": 2511,
                "endlineno": 2526,
                "docstring": {
                  "value": "Delete row matching the specified primary key.\n\n:param pk_values: A single value, or a tuple of values for tables that have a compound primary key",
                  "lineno": 2512,
                  "endlineno": 2516
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk_values",
                    "annotation": [
                      {
                        "source": "Union",
                        "full": "typing.Union"
                      },
                      "[",
                      [
                        {
                          "source": "list",
                          "full": "list"
                        },
                        ", ",
                        {
                          "source": "tuple",
                          "full": "tuple"
                        },
                        ", ",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        {
                          "source": "int",
                          "full": "int"
                        },
                        ", ",
                        {
                          "source": "float",
                          "full": "float"
                        }
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "Table",
                  "full": "sqlite_utils.db.Table"
                }
              },
              {
                "kind": "function",
                "name": "delete_where",
                "lineno": 2528,
                "endlineno": 2552,
                "docstring": {
                  "value": "Delete rows matching the specified where clause, or delete all rows in the table.\n\nSee :ref:`python_api_delete_where`.\n\n:param where: SQL where fragment to use, for example ``id > ?``\n:param where_args: Parameters to use with that fragment - an iterable for ``id > ?``\n  parameters, or a dictionary for ``id > :id``\n:param analyze: Set to ``True`` to run ``ANALYZE`` after the rows have been deleted.",
                  "lineno": 2534,
                  "endlineno": 2543
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "where",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where_args",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "analyze",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": {
                  "source": "Table",
                  "full": "sqlite_utils.db.Table"
                }
              },
              {
                "kind": "function",
                "name": "update",
                "lineno": 2554,
                "endlineno": 2608,
                "docstring": {
                  "value": "Execute a SQL ``UPDATE`` against the specified row.\n\nSee :ref:`python_api_update`.\n\n:param pk_values: The primary key of an individual record - can be a tuple if the\n  table has a compound primary key.\n:param updates: A dictionary mapping columns to their updated values.\n:param alter: Set to ``True`` to add any missing columns.\n:param conversions: Optional dictionary of SQL functions to apply during the update, for example\n  ``{\"mycolumn\": \"upper(?)\"}``.",
                  "lineno": 2561,
                  "endlineno": 2572
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk_values",
                    "annotation": [
                      {
                        "source": "Union",
                        "full": "typing.Union"
                      },
                      "[",
                      [
                        {
                          "source": "list",
                          "full": "list"
                        },
                        ", ",
                        {
                          "source": "tuple",
                          "full": "tuple"
                        },
                        ", ",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        {
                          "source": "int",
                          "full": "int"
                        },
                        ", ",
                        {
                          "source": "float",
                          "full": "float"
                        }
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "updates",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "dict",
                        "full": "dict"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "alter",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "conversions",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "dict",
                        "full": "dict"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": {
                  "source": "Table",
                  "full": "sqlite_utils.db.Table"
                }
              },
              {
                "kind": "function",
                "name": "convert",
                "lineno": 2610,
                "endlineno": 2684,
                "docstring": {
                  "value": "Apply conversion function ``fn`` to every value in the specified columns.\n\n:param columns: A single column or list of string column names to convert.\n:param fn: A callable that takes a single argument, ``value``, and returns it converted.\n:param output: Optional string column name to write the results to (defaults to the input column).\n:param output_type: If the output column needs to be created, this is the type that will be used\n  for the new column.\n:param drop: Should the original column be dropped once the conversion is complete?\n:param multi: If ``True`` the return value of ``fn(value)`` will be expected to be a\n  dictionary, and new columns will be created for each key of that dictionary.\n:param where: SQL fragment to use as a ``WHERE`` clause to limit the rows to which the conversion\n  is applied, for example ``age > ?`` or ``age > :age``.\n:param where_args: List of arguments (if using ``?``) or a dictionary (if using ``:age``).\n:param show_progress: Should a progress bar be displayed?\n\nSee :ref:`python_api_convert`.",
                  "lineno": 2622,
                  "endlineno": 2639
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Union",
                        "full": "typing.Union"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        [
                          {
                            "source": "List",
                            "full": "typing.List"
                          },
                          "[",
                          {
                            "source": "str",
                            "full": "str"
                          },
                          "]"
                        ]
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "fn",
                    "annotation": {
                      "source": "Callable",
                      "full": "typing.Callable"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "output",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "output_type",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "drop",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "multi",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "where",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where_args",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Iterable",
                            "full": "typing.Iterable"
                          },
                          ", ",
                          {
                            "source": "dict",
                            "full": "dict"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "show_progress",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "_convert_multi",
                "lineno": 2686,
                "endlineno": 2733,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "column",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "fn",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "drop",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "show_progress",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "where",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "where_args",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "build_insert_queries_and_params",
                "lineno": 2735,
                "endlineno": 2837,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "extracts",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "chunk",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "all_columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "hash_id",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "upsert",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "conversions",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "num_records_processed",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "replace",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "ignore",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "insert_chunk",
                "lineno": 2839,
                "endlineno": 2928,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "alter",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "extracts",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "chunk",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "all_columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "hash_id",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "upsert",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "conversions",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "num_records_processed",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "replace",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "ignore",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "insert",
                "lineno": 2930,
                "endlineno": 2994,
                "docstring": {
                  "value": "Insert a single record into the table. The table will be created with a schema that matches\nthe inserted record if it does not already exist, see :ref:`python_api_creating_tables`.\n\n- ``record`` - required: a dictionary representing the record to be inserted.\n\nThe other parameters are optional, and mostly influence how the new table will be created if\nthat table does not exist yet.\n\nEach of them defaults to ``DEFAULT``, which indicates that the default setting for the current\n``Table`` object (specified in the table constructor) should be used.\n\n:param record: Dictionary record to be inserted\n:param pk: If creating the table, which column should be the primary key.\n:param foreign_keys: See :ref:`python_api_foreign_keys`.\n:param column_order: List of strings specifying a full or partial column order\n  to use when creating the table.\n:param not_null: Set of strings specifying columns that should be ``NOT NULL``.\n:param defaults: Dictionary specifying default values for specific columns.\n:param hash_id: Name of a column to create and use as a primary key, where the\n  value of thet primary key will be derived as a SHA1 hash of the other column values\n  in the record. ``hash_id=\"id\"`` is a common column name used for this.\n:param alter: Boolean, should any missing columns be added automatically?\n:param ignore: Boolean, if a record already exists with this primary key, ignore this insert.\n:param replace: Boolean, if a record already exists with this primary key, replace it with this new record.\n:param extracts: A list of columns to extract to other tables, or a dictionary that maps\n  ``{column_name: other_table_name}``. See :ref:`python_api_extracts`.\n:param conversions: Dictionary specifying SQL conversion functions to be applied to the data while it\n  is being inserted, for example ``{\"name\": \"upper(?)\"}``. See :ref:`python_api_conversions`.\n:param columns: Dictionary over-riding the detected types used for the columns, for example\n  ``{\"age\": int, \"weight\": float}``.",
                  "lineno": 2947,
                  "endlineno": 2978
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "record",
                    "annotation": [
                      {
                        "source": "Dict",
                        "full": "typing.Dict"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        {
                          "source": "Any",
                          "full": "typing.Any"
                        }
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "column_order",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "List",
                              "full": "typing.List"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ],
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "not_null",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Iterable",
                              "full": "typing.Iterable"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ],
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "defaults",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "Any",
                                "full": "typing.Any"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "hash_id",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Iterable",
                              "full": "typing.Iterable"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ],
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "alter",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "bool",
                            "full": "bool"
                          },
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "ignore",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "bool",
                            "full": "bool"
                          },
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "replace",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "bool",
                            "full": "bool"
                          },
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "extracts",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "str",
                                "full": "str"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          [
                            {
                              "source": "List",
                              "full": "typing.List"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ],
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "conversions",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "str",
                                "full": "str"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "Any",
                                "full": "typing.Any"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  }
                ],
                "returns": {
                  "source": "Table",
                  "full": "sqlite_utils.db.Table"
                }
              },
              {
                "kind": "function",
                "name": "insert_all",
                "lineno": 2996,
                "endlineno": 3125,
                "docstring": {
                  "value": "Like ``.insert()`` but takes a list of records and ensures that the table\nthat it creates (if table does not exist) has columns for ALL of that data.\n\nUse ``analyze=True`` to run ``ANALYZE`` after the insert has completed.",
                  "lineno": 3017,
                  "endlineno": 3022
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "records",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "column_order",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "not_null",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "defaults",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "batch_size",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "hash_id",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "alter",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "ignore",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "replace",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "truncate",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "extracts",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "conversions",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "upsert",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "False"
                  },
                  {
                    "name": "analyze",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": {
                  "source": "Table",
                  "full": "sqlite_utils.db.Table"
                }
              },
              {
                "kind": "function",
                "name": "upsert",
                "lineno": 3127,
                "endlineno": 3161,
                "docstring": {
                  "value": "Like ``.insert()`` but performs an ``UPSERT``, where records are inserted if they do\nnot exist and updated if they DO exist, based on matching against their primary key.\n\nSee :ref:`python_api_upsert`.",
                  "lineno": 3142,
                  "endlineno": 3147
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "record",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "column_order",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "not_null",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "defaults",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "hash_id",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "alter",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "extracts",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "conversions",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  }
                ],
                "returns": {
                  "source": "Table",
                  "full": "sqlite_utils.db.Table"
                }
              },
              {
                "kind": "function",
                "name": "upsert_all",
                "lineno": 3163,
                "endlineno": 3199,
                "docstring": {
                  "value": "Like ``.upsert()`` but can be applied to a list of records.",
                  "lineno": 3180,
                  "endlineno": 3182
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "records",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "pk",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "column_order",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "not_null",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "defaults",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "batch_size",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "hash_id",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "hash_id_columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "alter",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "extracts",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "conversions",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "columns",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "analyze",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": {
                  "source": "Table",
                  "full": "sqlite_utils.db.Table"
                }
              },
              {
                "kind": "function",
                "name": "add_missing_columns",
                "lineno": 3201,
                "endlineno": 3207,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "records",
                    "annotation": [
                      {
                        "source": "Iterable",
                        "full": "typing.Iterable"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "Table",
                  "full": "sqlite_utils.db.Table"
                }
              },
              {
                "kind": "function",
                "name": "lookup",
                "lineno": 3209,
                "endlineno": 3288,
                "docstring": {
                  "value": "Create or populate a lookup table with the specified values.\n\n``db[\"Species\"].lookup({\"name\": \"Palm\"})`` will create a table called ``Species``\n(if one does not already exist) with two columns: ``id`` and ``name``. It will\nset up a unique constraint on the ``name`` column to guarantee it will not\ncontain duplicate rows.\n\nIt will then insert a new row with the ``name`` set to ``Palm`` and return the\nnew integer primary key value.\n\nAn optional second argument can be provided with more ``name: value`` pairs to\nbe included only if the record is being created for the first time. These will\nbe ignored on subsequent lookup calls for records that already exist.\n\nAll other keyword arguments are passed through to ``.insert()``.\n\nSee :ref:`python_api_lookup_tables` for more details.\n\n:param lookup_values: Dictionary specifying column names and values to use for the lookup\n:param extra_values: Additional column values to be used only if creating a new record",
                  "lineno": 3222,
                  "endlineno": 3243
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "lookup_values",
                    "annotation": [
                      {
                        "source": "Dict",
                        "full": "typing.Dict"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        {
                          "source": "Any",
                          "full": "typing.Any"
                        }
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "extra_values",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "pk",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "'id'"
                  },
                  {
                    "name": "foreign_keys",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "ForeignKeysType",
                        "full": "sqlite_utils.db.ForeignKeysType"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "column_order",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "List",
                          "full": "typing.List"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "not_null",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Iterable",
                          "full": "typing.Iterable"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "defaults",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "extracts",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "str",
                                "full": "str"
                              }
                            ],
                            "]"
                          ],
                          ", ",
                          [
                            {
                              "source": "List",
                              "full": "typing.List"
                            },
                            "[",
                            {
                              "source": "str",
                              "full": "str"
                            },
                            "]"
                          ]
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "conversions",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "str",
                            "full": "str"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "columns",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "m2m",
                "lineno": 3290,
                "endlineno": 3376,
                "docstring": {
                  "value": "After inserting a record in a table, create one or more records in some other\ntable and then create many-to-many records linking the original record and the\nnewly created records together.\n\nFor example::\n\n    db[\"dogs\"].insert({\"id\": 1, \"name\": \"Cleo\"}, pk=\"id\").m2m(\n        \"humans\", {\"id\": 1, \"name\": \"Natalie\"}, pk=\"id\"\n    )\n\nSee :ref:`python_api_m2m` for details.\n\n:param other_table: The name of the table to insert the new records into.\n:param record_or_iterable: A single dictionary record to insert, or a list of records.\n:param pk: The primary key to use if creating ``other_table``.\n:param lookup: Same dictionary as for ``.lookup()``, to create a many-to-many lookup table.\n:param m2m_table: The string name to use for the many-to-many table, defaults to creating\n  this automatically based on the names of the two tables.\n:param alter: Set to ``True`` to add any missing columns on ``other_table`` if that table\n  already exists.",
                  "lineno": 3301,
                  "endlineno": 3322
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "other_table",
                    "annotation": [
                      {
                        "source": "Union",
                        "full": "typing.Union"
                      },
                      "[",
                      [
                        {
                          "source": "str",
                          "full": "str"
                        },
                        ", ",
                        {
                          "source": "Table",
                          "full": "sqlite_utils.db.Table"
                        }
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "record_or_iterable",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          [
                            {
                              "source": "Iterable",
                              "full": "typing.Iterable"
                            },
                            "[",
                            [
                              {
                                "source": "Dict",
                                "full": "typing.Dict"
                              },
                              "[",
                              [
                                {
                                  "source": "str",
                                  "full": "str"
                                },
                                ", ",
                                {
                                  "source": "Any",
                                  "full": "typing.Any"
                                }
                              ],
                              "]"
                            ],
                            "]"
                          ],
                          ", ",
                          [
                            {
                              "source": "Dict",
                              "full": "typing.Dict"
                            },
                            "[",
                            [
                              {
                                "source": "str",
                                "full": "str"
                              },
                              ", ",
                              {
                                "source": "Any",
                                "full": "typing.Any"
                              }
                            ],
                            "]"
                          ]
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "pk",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Union",
                          "full": "typing.Union"
                        },
                        "[",
                        [
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          },
                          ", ",
                          {
                            "source": "Default",
                            "full": "sqlite_utils.db.Default"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "DEFAULT"
                  },
                  {
                    "name": "lookup",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "Any",
                            "full": "typing.Any"
                          }
                        ],
                        "]"
                      ],
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "m2m_table",
                    "annotation": [
                      {
                        "source": "Optional",
                        "full": "typing.Optional"
                      },
                      "[",
                      {
                        "source": "str",
                        "full": "str"
                      },
                      "]"
                    ],
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "alter",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "analyze",
                "lineno": 3378,
                "endlineno": 3380,
                "docstring": {
                  "value": "Run ANALYZE against this table",
                  "lineno": 3379,
                  "endlineno": 3379
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "analyze_column",
                "lineno": 3382,
                "endlineno": 3456,
                "docstring": {
                  "value": "Return statistics about the specified column.\n\nSee :ref:`python_api_analyze_column`.\n\n:param column: Column to analyze\n:param common_limit: Show this many column values\n:param value_truncate: Truncate display of common values to this many characters\n:param total_rows: Optimization - pass the total number of rows in the table to save running a fresh ``count(*)`` query",
                  "lineno": 3385,
                  "endlineno": 3394
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "column",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "common_limit",
                    "annotation": {
                      "source": "int",
                      "full": "int"
                    },
                    "kind": "positional or keyword",
                    "default": "10"
                  },
                  {
                    "name": "value_truncate",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "None"
                  },
                  {
                    "name": "total_rows",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "None"
                  }
                ],
                "returns": {
                  "source": "ColumnDetails",
                  "full": "sqlite_utils.db.ColumnDetails"
                }
              },
              {
                "kind": "function",
                "name": "add_geometry_column",
                "lineno": 3458,
                "endlineno": 3507,
                "docstring": {
                  "value": "In SpatiaLite, a geometry column can only be added to an existing table.\nTo do so, use ``table.add_geometry_column``, passing in a geometry type.\n\nBy default, this will add a nullable column using\n`SRID 4326 <https://spatialreference.org/ref/epsg/wgs-84/>`__. This can\nbe customized using the ``column_name``, ``srid`` and ``not_null`` arguments.\n\nReturns ``True`` if the column was successfully added, ``False`` if not.\n\n.. code-block:: python\n\n    from sqlite_utils.db import Database\n    from sqlite_utils.utils import find_spatialite\n\n    db = Database(\"mydb.db\")\n    db.init_spatialite(find_spatialite())\n\n    # the table must exist before adding a geometry column\n    table = db[\"locations\"].create({\"name\": str})\n    table.add_geometry_column(\"geometry\", \"POINT\")\n\n:param column_name: Name of column to add\n:param geometry_type: Type of geometry column, for example ``\"GEOMETRY\"`` or ``\"POINT\" or ``\"POLYGON\"``\n:param srid: Integer SRID, defaults to 4326 for WGS84\n:param coord_dimension: Dimensions to use, defaults to ``\"XY\"`` - set to ``\"XYZ\"`` to work in three dimensions\n:param not_null: Should the column be ``NOT NULL``",
                  "lineno": 3466,
                  "endlineno": 3493
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "column_name",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "geometry_type",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "srid",
                    "annotation": {
                      "source": "int",
                      "full": "int"
                    },
                    "kind": "positional or keyword",
                    "default": "4326"
                  },
                  {
                    "name": "coord_dimension",
                    "annotation": {
                      "source": "str",
                      "full": "str"
                    },
                    "kind": "positional or keyword",
                    "default": "'XY'"
                  },
                  {
                    "name": "not_null",
                    "annotation": {
                      "source": "bool",
                      "full": "bool"
                    },
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              },
              {
                "kind": "function",
                "name": "create_spatial_index",
                "lineno": 3509,
                "endlineno": 3540,
                "docstring": {
                  "value": "A spatial index allows for significantly faster bounding box queries.\nTo create one, use ``create_spatial_index`` with the name of an existing geometry column.\n\nReturns ``True`` if the index was successfully created, ``False`` if not. Calling this\nfunction if an index already exists is a no-op.\n\n.. code-block:: python\n\n    # assuming SpatiaLite is loaded, create the table, add the column\n    table = db[\"locations\"].create({\"name\": str})\n    table.add_geometry_column(\"geometry\", \"POINT\")\n\n    # now we can index it\n    table.create_spatial_index(\"geometry\")\n\n    # the spatial index is a virtual table, which we can inspect\n    print(db[\"idx_locations_geometry\"].schema)\n    # outputs:\n    # CREATE VIRTUAL TABLE \"idx_locations_geometry\" USING rtree(pkid, xmin, xmax, ymin, ymax)\n\n:param column_name: Geometry column to create the spatial index against",
                  "lineno": 3510,
                  "endlineno": 3532
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "column_name",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "bool",
                  "full": "bool"
                }
              }
            ],
            "bases": [
              {
                "source": "Queryable",
                "full": "sqlite_utils.db.Queryable"
              }
            ],
            "decorators": []
          },
          {
            "kind": "class",
            "name": "View",
            "lineno": 3543,
            "endlineno": 3569,
            "labels": [],
            "members": [
              {
                "kind": "function",
                "name": "exists",
                "lineno": 3544,
                "endlineno": 3545,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "__repr__",
                "lineno": 3547,
                "endlineno": 3550,
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  }
                ],
                "returns": {
                  "source": "str",
                  "full": "str"
                }
              },
              {
                "kind": "function",
                "name": "drop",
                "lineno": 3552,
                "endlineno": 3563,
                "docstring": {
                  "value": "Drop this view.\n\n:param ignore: Set to ``True`` to ignore the error if the view does not exist",
                  "lineno": 3553,
                  "endlineno": 3557
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "ignore",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": "False"
                  }
                ],
                "returns": null
              },
              {
                "kind": "function",
                "name": "enable_fts",
                "lineno": 3565,
                "endlineno": 3569,
                "docstring": {
                  "value": "``enable_fts()`` is supported on tables but not on views.",
                  "lineno": 3566,
                  "endlineno": 3566
                },
                "labels": [],
                "members": [],
                "decorators": [],
                "parameters": [
                  {
                    "name": "self",
                    "annotation": null,
                    "kind": "positional or keyword",
                    "default": null
                  },
                  {
                    "name": "*args",
                    "annotation": null,
                    "kind": "variadic positional",
                    "default": "()"
                  },
                  {
                    "name": "**kwargs",
                    "annotation": null,
                    "kind": "variadic keyword",
                    "default": "{}"
                  }
                ],
                "returns": null
              }
            ],
            "bases": [
              {
                "source": "Queryable",
                "full": "sqlite_utils.db.Queryable"
              }
            ],
            "decorators": []
          },
          {
            "kind": "function",
            "name": "jsonify_if_needed",
            "lineno": 3572,
            "endlineno": 3582,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "value",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "resolve_extracts",
            "lineno": 3585,
            "endlineno": 3592,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "extracts",
                "annotation": [
                  {
                    "source": "Optional",
                    "full": "typing.Optional"
                  },
                  "[",
                  [
                    {
                      "source": "Union",
                      "full": "typing.Union"
                    },
                    "[",
                    [
                      [
                        {
                          "source": "Dict",
                          "full": "typing.Dict"
                        },
                        "[",
                        [
                          {
                            "source": "str",
                            "full": "str"
                          },
                          ", ",
                          {
                            "source": "str",
                            "full": "str"
                          }
                        ],
                        "]"
                      ],
                      ", ",
                      [
                        {
                          "source": "List",
                          "full": "typing.List"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ],
                      ", ",
                      [
                        {
                          "source": "Tuple",
                          "full": "typing.Tuple"
                        },
                        "[",
                        {
                          "source": "str",
                          "full": "str"
                        },
                        "]"
                      ]
                    ],
                    "]"
                  ],
                  "]"
                ],
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": {
              "source": "dict",
              "full": "dict"
            }
          },
          {
            "kind": "function",
            "name": "validate_column_names",
            "lineno": 3595,
            "endlineno": 3600,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "columns",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "fix_square_braces",
            "lineno": 3603,
            "endlineno": 3611,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "records",
                "annotation": [
                  {
                    "source": "Iterable",
                    "full": "typing.Iterable"
                  },
                  "[",
                  [
                    {
                      "source": "Dict",
                      "full": "typing.Dict"
                    },
                    "[",
                    [
                      {
                        "source": "str",
                        "full": "str"
                      },
                      ", ",
                      {
                        "source": "Any",
                        "full": "typing.Any"
                      }
                    ],
                    "]"
                  ],
                  "]"
                ],
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          },
          {
            "kind": "function",
            "name": "_decode_default_value",
            "lineno": 3614,
            "endlineno": 3630,
            "labels": [],
            "members": [],
            "decorators": [],
            "parameters": [
              {
                "name": "value",
                "annotation": null,
                "kind": "positional or keyword",
                "default": null
              }
            ],
            "returns": null
          }
        ],
        "filepath": "/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/sqlite_utils/db.py"
      }
    ],
    "filepath": "/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/sqlite_utils/__init__.py"
  }
}
