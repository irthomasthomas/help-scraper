RE-ENCRYPT-DATA()                                            RE-ENCRYPT-DATA()



NAME
       re-encrypt-data -

DESCRIPTION
       Re-encrypt ciphertext using DUKPT or Symmetric data encryption keys.

       You  can  either  generate an encryption key within Amazon Web Services
       Payment Cryptography by calling CreateKey or import your own encryption
       key  by calling ImportKey . The KeyArn for use with this operation must
       be in a compatible key state with KeyModesOfUse set to Encrypt .

       For symmetric and DUKPT encryption, Amazon Web Services  Payment  Cryp-
       tography  supports  TDES  and AES algorithms. To encrypt using DUKPT, a
       DUKPT key must already exist within your account with KeyModesOfUse set
       to DeriveKey or a new DUKPT can be generated by calling CreateKey .

       For  information about valid keys for this operation, see Understanding
       key attributes and Key types for specific data operations in the Amazon
       Web Services Payment Cryptography User Guide .
          Cross-account  use  :  This operation can't be used across different
          Amazon Web Services accounts.

          Related operations:

       o DecryptData

       o EncryptData

       o GetPublicCertificate

       o ImportKey

       See also: AWS API Documentation

SYNOPSIS
            re-encrypt-data
          --incoming-key-identifier <value>
          --outgoing-key-identifier <value>
          --cipher-text <value>
          --incoming-encryption-attributes <value>
          --outgoing-encryption-attributes <value>
          [--incoming-wrapped-key <value>]
          [--outgoing-wrapped-key <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --incoming-key-identifier (string)
          The keyARN of the encryption key of incoming ciphertext data.

          When a WrappedKeyBlock is provided, this value will be  the  identi-
          fier  to  the  key wrapping key. Otherwise, it is the key identifier
          used to perform the operation.

       --outgoing-key-identifier (string)
          The keyARN of the encryption key of outgoing ciphertext  data  after
          encryption by Amazon Web Services Payment Cryptography.

       --cipher-text (string)
          Ciphertext  to  be encrypted. The minimum allowed length is 16 bytes
          and maximum allowed length is 4096 bytes.

       --incoming-encryption-attributes (tagged union structure)
          The attributes and values for incoming ciphertext.

          NOTE:
              This is a Tagged Union structure. Only one of the following  top
              level keys can be set: Symmetric, Dukpt.

          Symmetric -> (structure)
              Parameters  that  are  required  to encrypt data using symmetric
              keys.

              Mode -> (string)
                 The block cipher method to use for encryption.

              InitializationVector -> (string)
                 An input used to provide the intial state.  If  no  value  is
                 provided,  Amazon  Web Services Payment Cryptography defaults
                 it to zero.

              PaddingType -> (string)
                 The padding to be included with the data.

          Dukpt -> (structure)
              Parameters that are required to  encrypt  plaintext  data  using
              DUKPT.

              KeySerialNumber -> (string)
                 The  unique  identifier known as Key Serial Number (KSN) that
                 comes  from  an  encrypting  device  using  DUKPT  encryption
                 method.  The KSN is derived from the encrypting device unique
                 identifier and an internal transaction counter.

              Mode -> (string)
                 The block cipher method to use for encryption.

                 The default is CBC.

              DukptKeyDerivationType -> (string)
                 The key type encrypted using DUKPT from a Base Derivation Key
                 (BDK)  and Key Serial Number (KSN). This must be less than or
                 equal to the strength of the BDK. For example, you can't  use
                 AES_128  as  a  derivation  type  for  a  BDK  of  AES_128 or
                 TDES_2KEY

              DukptKeyVariant -> (string)
                 The type of use of DUKPT, which can be incoming data  decryp-
                 tion, outgoing data encryption, or both.

              InitializationVector -> (string)
                 An  input  used  to  provide the intial state. If no value is
                 provided, Amazon Web Services Payment  Cryptography  defaults
                 it to zero.

       Shorthand Syntax:

          Symmetric={Mode=string,InitializationVector=string,PaddingType=string},Dukpt={KeySerialNumber=string,Mode=string,DukptKeyDerivationType=string,DukptKeyVariant=string,InitializationVector=string}

       JSON Syntax:

          {
            "Symmetric": {
              "Mode": "ECB"|"CBC"|"CFB"|"CFB1"|"CFB8"|"CFB64"|"CFB128"|"OFB",
              "InitializationVector": "string",
              "PaddingType": "PKCS1"|"OAEP_SHA1"|"OAEP_SHA256"|"OAEP_SHA512"
            },
            "Dukpt": {
              "KeySerialNumber": "string",
              "Mode": "ECB"|"CBC",
              "DukptKeyDerivationType": "TDES_2KEY"|"TDES_3KEY"|"AES_128"|"AES_192"|"AES_256",
              "DukptKeyVariant": "BIDIRECTIONAL"|"REQUEST"|"RESPONSE",
              "InitializationVector": "string"
            }
          }

       --outgoing-encryption-attributes (tagged union structure)
          The attributes and values for outgoing ciphertext data after encryp-
          tion by Amazon Web Services Payment Cryptography.

          NOTE:
              This is a Tagged Union structure. Only one of the following  top
              level keys can be set: Symmetric, Dukpt.

          Symmetric -> (structure)
              Parameters  that  are  required  to encrypt data using symmetric
              keys.

              Mode -> (string)
                 The block cipher method to use for encryption.

              InitializationVector -> (string)
                 An input used to provide the intial state.  If  no  value  is
                 provided,  Amazon  Web Services Payment Cryptography defaults
                 it to zero.

              PaddingType -> (string)
                 The padding to be included with the data.

          Dukpt -> (structure)
              Parameters that are required to  encrypt  plaintext  data  using
              DUKPT.

              KeySerialNumber -> (string)
                 The  unique  identifier known as Key Serial Number (KSN) that
                 comes  from  an  encrypting  device  using  DUKPT  encryption
                 method.  The KSN is derived from the encrypting device unique
                 identifier and an internal transaction counter.

              Mode -> (string)
                 The block cipher method to use for encryption.

                 The default is CBC.

              DukptKeyDerivationType -> (string)
                 The key type encrypted using DUKPT from a Base Derivation Key
                 (BDK)  and Key Serial Number (KSN). This must be less than or
                 equal to the strength of the BDK. For example, you can't  use
                 AES_128  as  a  derivation  type  for  a  BDK  of  AES_128 or
                 TDES_2KEY

              DukptKeyVariant -> (string)
                 The type of use of DUKPT, which can be incoming data  decryp-
                 tion, outgoing data encryption, or both.

              InitializationVector -> (string)
                 An  input  used  to  provide the intial state. If no value is
                 provided, Amazon Web Services Payment  Cryptography  defaults
                 it to zero.

       Shorthand Syntax:

          Symmetric={Mode=string,InitializationVector=string,PaddingType=string},Dukpt={KeySerialNumber=string,Mode=string,DukptKeyDerivationType=string,DukptKeyVariant=string,InitializationVector=string}

       JSON Syntax:

          {
            "Symmetric": {
              "Mode": "ECB"|"CBC"|"CFB"|"CFB1"|"CFB8"|"CFB64"|"CFB128"|"OFB",
              "InitializationVector": "string",
              "PaddingType": "PKCS1"|"OAEP_SHA1"|"OAEP_SHA256"|"OAEP_SHA512"
            },
            "Dukpt": {
              "KeySerialNumber": "string",
              "Mode": "ECB"|"CBC",
              "DukptKeyDerivationType": "TDES_2KEY"|"TDES_3KEY"|"AES_128"|"AES_192"|"AES_256",
              "DukptKeyVariant": "BIDIRECTIONAL"|"REQUEST"|"RESPONSE",
              "InitializationVector": "string"
            }
          }

       --incoming-wrapped-key (structure)
          The  WrappedKeyBlock  containing  the encryption key of incoming ci-
          phertext data.

          WrappedKeyMaterial -> (tagged union structure)
              Parameter information of a WrappedKeyBlock  for  encryption  key
              exchange.

              NOTE:
                 This  is  a Tagged Union structure. Only one of the following
                 top level keys can be set: Tr31KeyBlock.

              Tr31KeyBlock -> (string)
                 The TR-31 wrapped key block.

          KeyCheckValueAlgorithm -> (string)
              The algorithm that Amazon Web Services Payment Cryptography uses
              to  calculate  the key check value (KCV). It is used to validate
              the key integrity.

              For TDES keys, the KCV is computed by encrypting 8  bytes,  each
              with value of zero, with the key to be checked and retaining the
              3 highest order bytes of the encrypted result. For AES keys, the
              KCV  is  computed using a CMAC algorithm where the input data is
              16 bytes of zero and retaining the 3 highest order bytes of  the
              encrypted result.

       Shorthand Syntax:

          WrappedKeyMaterial={Tr31KeyBlock=string},KeyCheckValueAlgorithm=string

       JSON Syntax:

          {
            "WrappedKeyMaterial": {
              "Tr31KeyBlock": "string"
            },
            "KeyCheckValueAlgorithm": "CMAC"|"ANSI_X9_24"
          }

       --outgoing-wrapped-key (structure)
          The  WrappedKeyBlock  containing  the encryption key of outgoing ci-
          phertext data after encryption by Amazon Web Services Payment  Cryp-
          tography.

          WrappedKeyMaterial -> (tagged union structure)
              Parameter  information  of  a WrappedKeyBlock for encryption key
              exchange.

              NOTE:
                 This is a Tagged Union structure. Only one of  the  following
                 top level keys can be set: Tr31KeyBlock.

              Tr31KeyBlock -> (string)
                 The TR-31 wrapped key block.

          KeyCheckValueAlgorithm -> (string)
              The algorithm that Amazon Web Services Payment Cryptography uses
              to calculate the key check value (KCV). It is used  to  validate
              the key integrity.

              For  TDES  keys, the KCV is computed by encrypting 8 bytes, each
              with value of zero, with the key to be checked and retaining the
              3 highest order bytes of the encrypted result. For AES keys, the
              KCV is computed using a CMAC algorithm where the input  data  is
              16  bytes of zero and retaining the 3 highest order bytes of the
              encrypted result.

       Shorthand Syntax:

          WrappedKeyMaterial={Tr31KeyBlock=string},KeyCheckValueAlgorithm=string

       JSON Syntax:

          {
            "WrappedKeyMaterial": {
              "Tr31KeyBlock": "string"
            },
            "KeyCheckValueAlgorithm": "CMAC"|"ANSI_X9_24"
          }

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

EXAMPLES
       NOTE:
          To  use  the following examples, you must have the AWS CLI installed
          and configured. See the Getting started guide in the  AWS  CLI  User
          Guide for more information.

          Unless  otherwise  stated,  all  examples  have  unix-like quotation
          rules. These examples will need to be  adapted  to  your  terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To re-encrypt data with a different key

       The following re-encrypt-data example decrypts cipher text that was en-
       crypted  using  an AES symmetric key and re-encrypts it using a Derived
       Unique Key Per Transaction (DUKPT) key.

          aws payment-cryptography-data re-encrypt-data \
              --incoming-key-identifier arn:aws:payment-cryptography:us-west-2:111122223333:key/hyvv7ymboitd4vfy \
              --outgoing-key-identifier arn:aws:payment-cryptography:us-west-2:111122223333:key/jl6ythkcvzesbxen \
              --cipher-text 4D2B0BDBA192D5AEFEAA5B3EC28E4A65383C313FFA25140101560F75FE1B99F27192A90980AB9334 \
              --incoming-encryption-attributes "Dukpt={Mode=ECB,KeySerialNumber=0123456789111111}" \
              --outgoing-encryption-attributes '{"Symmetric": {"Mode": "ECB"}}'

       Output:

          {
              "CipherText": "F94959DA30EEFF0C035483C6067667CF6796E3C1AD28C2B61F9CFEB772A8DD41C0D6822931E0D3B1",
              "KeyArn": "arn:aws:payment-cryptography:us-west-2:111122223333:key/jl6ythkcvzesbxen",
              "KeyCheckValue": "2E8CD9"
          }

       For more information, see Encrypt and decrypt data in the  AWS  Payment
       Cryptography User Guide.

OUTPUT
       KeyArn -> (string)
          The  keyARN (Amazon Resource Name) of the encryption key that Amazon
          Web Services Payment Cryptography uses for plaintext encryption.

       KeyCheckValue -> (string)
          The key check value (KCV) of the encryption key. The KCV is used  to
          check if all parties holding a given key have the same key or to de-
          tect that a key has changed.

          Amazon Web Services Payment Cryptography computes the KCV  according
          to the CMAC specification.

       CipherText -> (string)
          The encrypted ciphertext.



                                                             RE-ENCRYPT-DATA()
