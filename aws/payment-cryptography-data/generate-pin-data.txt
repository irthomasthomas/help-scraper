GENERATE-PIN-DATA()                                        GENERATE-PIN-DATA()



NAME
       generate-pin-data -

DESCRIPTION
       Generates  pin-related  data such as PIN, PIN Verification Value (PVV),
       PIN Block, and PIN Offset during new card issuance or  reissuance.  For
       more information, see Generate PIN data in the Amazon Web Services Pay-
       ment Cryptography User Guide .

       PIN data is never transmitted in clear to or from Amazon  Web  Services
       Payment  Cryptography. This operation generates PIN, PVV, or PIN Offset
       and then encrypts it using Pin Encryption Key (PEK) to  create  an  En-
       cryptedPinBlock for transmission from Amazon Web Services Payment Cryp-
       tography. This operation uses a separate Pin Verification Key (PVK) for
       VISA PVV generation.

       Using  ECDH  key  exchange,  you can receive cardholder selectable PINs
       into Amazon Web Services Payment Cryptography.  The  ECDH  derived  key
       protects  the  incoming  PIN block. You can also use it for reveal PIN,
       wherein the generated PIN block is protected by the  ECDH  derived  key
       before  transmission from Amazon Web Services Payment Cryptography. For
       more information on establishing ECDH derived keys, see the  Generating
       keys in the Amazon Web Services Payment Cryptography User Guide .

       For  information about valid keys for this operation, see Understanding
       key attributes and Key types for specific data operations in the Amazon
       Web Services Payment Cryptography User Guide .
          Cross-account  use  :  This operation can't be used across different
          Amazon Web Services accounts.

          Related operations:

       o GenerateCardValidationData

       o TranslatePinData

       o VerifyPinData

       See also: AWS API Documentation

SYNOPSIS
            generate-pin-data
          --generation-key-identifier <value>
          --encryption-key-identifier <value>
          --generation-attributes <value>
          [--pin-data-length <value>]
          --primary-account-number <value>
          --pin-block-format <value>
          [--encryption-wrapped-key <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --generation-key-identifier (string)
          The keyARN of the PEK that Amazon Web Services Payment  Cryptography
          uses for pin data generation.

       --encryption-key-identifier (string)
          The  keyARN of the PEK that Amazon Web Services Payment Cryptography
          uses to encrypt the PIN Block. For ECDH, it is  the  keyARN  of  the
          asymmetric ECC key.

       --generation-attributes (tagged union structure)
          The attributes and values to use for PIN, PVV, or PIN Offset genera-
          tion.

          NOTE:
              This is a Tagged Union structure. Only one of the following  top
              level   keys  can  be  set:  VisaPin,  VisaPinVerificationValue,
              Ibm3624PinOffset,      Ibm3624NaturalPin,      Ibm3624RandomPin,
              Ibm3624PinFromOffset.

          VisaPin -> (structure)
              Parameters that are required to generate or verify Visa PIN.

              PinVerificationKeyIndex -> (integer)
                 The  value for PIN verification index. It is used in the Visa
                 PIN algorithm to calculate the PVV (PIN Verification Value).

          VisaPinVerificationValue -> (structure)
              Parameters that are required to generate or verify Visa PIN Ver-
              ification Value (PVV).

              EncryptedPinBlock -> (string)
                 The encrypted PIN block data to verify.

              PinVerificationKeyIndex -> (integer)
                 The  value for PIN verification index. It is used in the Visa
                 PIN algorithm to calculate the PVV (PIN Verification Value).

          Ibm3624PinOffset -> (structure)
              Parameters that are required to generate or verify  Ibm3624  PIN
              offset PIN.

              EncryptedPinBlock -> (string)
                 The encrypted PIN block data. According to ISO 9564 standard,
                 a PIN Block is an encoded representation of  a  payment  card
                 Personal  Account  Number  (PAN)  and the cardholder Personal
                 Identification Number (PIN).

              DecimalizationTable -> (string)
                 The decimalization table to use for IBM 3624  PIN  algorithm.
                 The  table  is used to convert the algorithm intermediate re-
                 sult from hexadecimal characters to decimal.

              PinValidationDataPadCharacter -> (string)
                 The padding character for validation data.

              PinValidationData -> (string)
                 The unique data for cardholder identification.

          Ibm3624NaturalPin -> (structure)
              Parameters that are required to generate or verify Ibm3624 natu-
              ral PIN.

              DecimalizationTable -> (string)
                 The  decimalization  table to use for IBM 3624 PIN algorithm.
                 The table is used to convert the algorithm  intermediate  re-
                 sult from hexadecimal characters to decimal.

              PinValidationDataPadCharacter -> (string)
                 The padding character for validation data.

              PinValidationData -> (string)
                 The unique data for cardholder identification.

          Ibm3624RandomPin -> (structure)
              Parameters  that are required to generate or verify Ibm3624 ran-
              dom PIN.

              DecimalizationTable -> (string)
                 The decimalization table to use for IBM 3624  PIN  algorithm.
                 The  table  is used to convert the algorithm intermediate re-
                 sult from hexadecimal characters to decimal.

              PinValidationDataPadCharacter -> (string)
                 The padding character for validation data.

              PinValidationData -> (string)
                 The unique data for cardholder identification.

          Ibm3624PinFromOffset -> (structure)
              Parameters that are required to generate or verify  Ibm3624  PIN
              from offset PIN.

              DecimalizationTable -> (string)
                 The  decimalization  table to use for IBM 3624 PIN algorithm.
                 The table is used to convert the algorithm  intermediate  re-
                 sult from hexadecimal characters to decimal.

              PinValidationDataPadCharacter -> (string)
                 The padding character for validation data.

              PinValidationData -> (string)
                 The unique data for cardholder identification.

              PinOffset -> (string)
                 The PIN offset value.

       Shorthand Syntax:

          VisaPin={PinVerificationKeyIndex=integer},VisaPinVerificationValue={EncryptedPinBlock=string,PinVerificationKeyIndex=integer},Ibm3624PinOffset={EncryptedPinBlock=string,DecimalizationTable=string,PinValidationDataPadCharacter=string,PinValidationData=string},Ibm3624NaturalPin={DecimalizationTable=string,PinValidationDataPadCharacter=string,PinValidationData=string},Ibm3624RandomPin={DecimalizationTable=string,PinValidationDataPadCharacter=string,PinValidationData=string},Ibm3624PinFromOffset={DecimalizationTable=string,PinValidationDataPadCharacter=string,PinValidationData=string,PinOffset=string}

       JSON Syntax:

          {
            "VisaPin": {
              "PinVerificationKeyIndex": integer
            },
            "VisaPinVerificationValue": {
              "EncryptedPinBlock": "string",
              "PinVerificationKeyIndex": integer
            },
            "Ibm3624PinOffset": {
              "EncryptedPinBlock": "string",
              "DecimalizationTable": "string",
              "PinValidationDataPadCharacter": "string",
              "PinValidationData": "string"
            },
            "Ibm3624NaturalPin": {
              "DecimalizationTable": "string",
              "PinValidationDataPadCharacter": "string",
              "PinValidationData": "string"
            },
            "Ibm3624RandomPin": {
              "DecimalizationTable": "string",
              "PinValidationDataPadCharacter": "string",
              "PinValidationData": "string"
            },
            "Ibm3624PinFromOffset": {
              "DecimalizationTable": "string",
              "PinValidationDataPadCharacter": "string",
              "PinValidationData": "string",
              "PinOffset": "string"
            }
          }

       --pin-data-length (integer)
          The length of PIN under generation.

       --primary-account-number (string)
          The  Primary Account Number (PAN), a unique identifier for a payment
          credit or debit card that associates the card with  a  specific  ac-
          count holder.

       --pin-block-format (string)
          The  PIN encoding format for pin data generation as specified in ISO
          9564. Amazon Web Services Payment Cryptography supports ISO_Format_0
          and ISO_Format_3 .

          The  ISO_Format_0  PIN  block format is equivalent to the ANSI X9.8,
          VISA-1, and ECI-1 PIN block formats. It is similar to a  VISA-4  PIN
          block format. It supports a PIN from 4 to 12 digits in length.

          The ISO_Format_3 PIN block format is the same as ISO_Format_0 except
          that the fill digits are random values from 10 to 15.

          Possible values:

          o ISO_FORMAT_0

          o ISO_FORMAT_3

          o ISO_FORMAT_4

       --encryption-wrapped-key (structure)
          Parameter information of a WrappedKeyBlock for  encryption  key  ex-
          change.

          WrappedKeyMaterial -> (tagged union structure)
              Parameter  information  of  a WrappedKeyBlock for encryption key
              exchange.

              NOTE:
                 This is a Tagged Union structure. Only one of  the  following
                 top level keys can be set: Tr31KeyBlock, DiffieHellmanSymmet-
                 ricKey.

              Tr31KeyBlock -> (string)
                 The TR-31 wrapped key block.

              DiffieHellmanSymmetricKey -> (structure)
                 The parameter information for deriving a ECDH shared key.

                 CertificateAuthorityPublicKeyIdentifier -> (string)
                     The keyArn of the certificate that  signed  the  client's
                     PublicKeyCertificate .

                 PublicKeyCertificate -> (string)
                     The client's public key certificate in PEM format (base64
                     encoded) to use for ECDH key derivation.

                 KeyAlgorithm -> (string)
                     The key algorithm of the derived ECDH key.

                 KeyDerivationFunction -> (string)
                     The key derivation function to use for deriving a key us-
                     ing ECDH.

                 KeyDerivationHashAlgorithm -> (string)
                     The hash type to use for deriving a key using ECDH.

                 SharedInformation -> (string)
                     A  byte string containing information that binds the ECDH
                     derived key to the two parties involved or to the context
                     of the key.

                     It may include details like identities of the two parties
                     deriving the key, context of the operation, session  IDs,
                     and  optionally  a nonce. It must not contain zero bytes,
                     and re-using shared information  for  multiple  ECDH  key
                     derivations is not recommended.

          KeyCheckValueAlgorithm -> (string)
              The algorithm that Amazon Web Services Payment Cryptography uses
              to calculate the key check value (KCV). It is used  to  validate
              the key integrity.

              For  TDES  keys, the KCV is computed by encrypting 8 bytes, each
              with value of zero, with the key to be checked and retaining the
              3 highest order bytes of the encrypted result. For AES keys, the
              KCV is computed using a CMAC algorithm where the input  data  is
              16  bytes of zero and retaining the 3 highest order bytes of the
              encrypted result.

       Shorthand Syntax:

          WrappedKeyMaterial={Tr31KeyBlock=string,DiffieHellmanSymmetricKey={CertificateAuthorityPublicKeyIdentifier=string,PublicKeyCertificate=string,KeyAlgorithm=string,KeyDerivationFunction=string,KeyDerivationHashAlgorithm=string,SharedInformation=string}},KeyCheckValueAlgorithm=string

       JSON Syntax:

          {
            "WrappedKeyMaterial": {
              "Tr31KeyBlock": "string",
              "DiffieHellmanSymmetricKey": {
                "CertificateAuthorityPublicKeyIdentifier": "string",
                "PublicKeyCertificate": "string",
                "KeyAlgorithm": "TDES_2KEY"|"TDES_3KEY"|"AES_128"|"AES_192"|"AES_256",
                "KeyDerivationFunction": "NIST_SP800"|"ANSI_X963",
                "KeyDerivationHashAlgorithm": "SHA_256"|"SHA_384"|"SHA_512",
                "SharedInformation": "string"
              }
            },
            "KeyCheckValueAlgorithm": "CMAC"|"ANSI_X9_24"
          }

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable  automatic pagination. If automatic pagination is disabled, the
       AWS CLI will only make one call, for the first page of results.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

EXAMPLES
       NOTE:
          To use the following examples, you must have the AWS  CLI  installed
          and  configured.  See  the Getting started guide in the AWS CLI User
          Guide for more information.

          Unless otherwise  stated,  all  examples  have  unix-like  quotation
          rules.  These  examples  will  need to be adapted to your terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To generate a PIN

       The following generate-card-validation-data example generate a new ran-
       dom PIN using the Visa PIN scheme.

          aws payment-cryptography-data generate-pin-data \
              --generation-key-identifier arn:aws:payment-cryptography:us-east-2:111122223333:key/37y2tsl45p5zjbh2 \
              --encryption-key-identifier arn:aws:payment-cryptography:us-east-2:111122223333:key/ivi5ksfsuplneuyt \
              --primary-account-number 171234567890123 \
              --pin-block-format ISO_FORMAT_0 \
              --generation-attributes VisaPin={PinVerificationKeyIndex=1}

       Output:

          {
              "GenerationKeyArn": "arn:aws:payment-cryptography:us-east-2:111122223333:key/37y2tsl45p5zjbh2",
              "GenerationKeyCheckValue": "7F2363",
              "EncryptionKeyArn": "arn:aws:payment-cryptography:us-east-2:111122223333:key/ivi5ksfsuplneuyt",
              "EncryptionKeyCheckValue": "7CC9E2",
              "EncryptedPinBlock": "AC17DC148BDA645E",
              "PinData": {
                  "VerificationValue": "5507"
              }
          }

       For more information, see Generate PIN data in the AWS Payment Cryptog-
       raphy User Guide.

OUTPUT
       GenerationKeyArn -> (string)
          The  keyARN  of the pin data generation key that Amazon Web Services
          Payment Cryptography uses for PIN, PVV or PIN Offset generation.

       GenerationKeyCheckValue -> (string)
          The key check value (KCV) of the encryption key. The KCV is used  to
          check if all parties holding a given key have the same key or to de-
          tect that a key has changed.

          Amazon Web Services Payment Cryptography computes the KCV  according
          to the CMAC specification.

       EncryptionKeyArn -> (string)
          The  keyARN of the PEK that Amazon Web Services Payment Cryptography
          uses for encrypted pin block generation. For ECDH, it is the  keyARN
          of the asymmetric ECC key.

       EncryptionKeyCheckValue -> (string)
          The  key check value (KCV) of the encryption key. The KCV is used to
          check if all parties holding a given key have the same key or to de-
          tect that a key has changed.

          Amazon  Web Services Payment Cryptography computes the KCV according
          to the CMAC specification.

       EncryptedPinBlock -> (string)
          The PIN block encrypted under PEK from Amazon Web  Services  Payment
          Cryptography. The encrypted PIN block is a composite of PAN (Primary
          Account Number) and PIN (Personal Identification Number),  generated
          in accordance with ISO 9564 standard.

       PinData -> (tagged union structure)
          The  attributes  and values Amazon Web Services Payment Cryptography
          uses for pin data generation.

          NOTE:
              This is a Tagged Union structure. Only one of the following  top
              level keys can be set: PinOffset, VerificationValue.

          PinOffset -> (string)
              The PIN offset value.

          VerificationValue -> (string)
              The unique data to identify a cardholder. In most cases, this is
              the same as cardholder's Primary  Account  Number  (PAN).  If  a
              value is not provided, it defaults to PAN.



                                                           GENERATE-PIN-DATA()
