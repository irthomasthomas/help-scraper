VERIFY-MAC()                                                      VERIFY-MAC()



NAME
       verify-mac -

DESCRIPTION
       Verifies a Message Authentication Code (MAC).

       You can use this operation when keys won't be shared but mutual data is
       present on both ends for validation. In this case,  known  data  values
       are  used to generate a MAC on both ends for verification without send-
       ing or receiving data in ciphertext or plaintext. You can use this  op-
       eration  to  verify  a DUPKT, HMAC or EMV MAC by setting generation at-
       tributes and algorithm to the associated values. Use the  same  encryp-
       tion key for MAC verification as you use for  GenerateMac .

       For  information about valid keys for this operation, see Understanding
       key attributes and Key types for specific data operations in the Amazon
       Web Services Payment Cryptography User Guide .
          Cross-account  use  :  This operation can't be used across different
          Amazon Web Services accounts.

          Related operations:

       o GenerateMac

       See also: AWS API Documentation

SYNOPSIS
            verify-mac
          --key-identifier <value>
          --mac <value>
          [--mac-length <value>]
          --message-data <value>
          --verification-attributes <value>
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --key-identifier (string)
          The keyARN of the encryption key that Amazon  Web  Services  Payment
          Cryptography uses to verify MAC data.

       --mac (string)
          The MAC being verified.

       --mac-length (integer)
          The length of the MAC.

       --message-data (string)
          The data on for which MAC is under verification.

       --verification-attributes (tagged union structure)
          The  attributes  and  data values to use for MAC verification within
          Amazon Web Services Payment Cryptography.

          NOTE:
              This is a Tagged Union structure. Only one of the following  top
              level  keys  can be set: Algorithm, DukptCmac, DukptIso9797Algo-
              rithm1, DukptIso9797Algorithm3, EmvMac.

          Algorithm -> (string)
              The encryption algorithm for MAC generation or verification.

          DukptCmac -> (structure)
              Parameters that are required for MAC generation or  verification
              using DUKPT CMAC algorithm.

              DukptDerivationType -> (string)
                 The  key  type derived using DUKPT from a Base Derivation Key
                 (BDK) and Key Serial Number (KSN). This must be less than  or
                 equal  to the strength of the BDK. For example, you can't use
                 AES_128 as  a  derivation  type  for  a  BDK  of  AES_128  or
                 TDES_2KEY .

              DukptKeyVariant -> (string)
                 The  type  of  use of DUKPT, which can be MAC generation, MAC
                 verification, or both.

              KeySerialNumber -> (string)
                 The unique identifier known as Key Serial Number  (KSN)  that
                 comes  from  an  encrypting  device  using  DUKPT  encryption
                 method. The KSN is derived from the encrypting device  unique
                 identifier and an internal transaction counter.

          DukptIso9797Algorithm1 -> (structure)
              Parameters  that are required for MAC generation or verification
              using DUKPT ISO 9797 algorithm1.

              DukptDerivationType -> (string)
                 The key type derived using DUKPT from a Base  Derivation  Key
                 (BDK)  and Key Serial Number (KSN). This must be less than or
                 equal to the strength of the BDK. For example, you can't  use
                 AES_128  as  a  derivation  type  for  a  BDK  of  AES_128 or
                 TDES_2KEY .

              DukptKeyVariant -> (string)
                 The type of use of DUKPT, which can be  MAC  generation,  MAC
                 verification, or both.

              KeySerialNumber -> (string)
                 The  unique  identifier known as Key Serial Number (KSN) that
                 comes  from  an  encrypting  device  using  DUKPT  encryption
                 method.  The KSN is derived from the encrypting device unique
                 identifier and an internal transaction counter.

          DukptIso9797Algorithm3 -> (structure)
              Parameters that are required for MAC generation or  verification
              using DUKPT ISO 9797 algorithm2.

              DukptDerivationType -> (string)
                 The  key  type derived using DUKPT from a Base Derivation Key
                 (BDK) and Key Serial Number (KSN). This must be less than  or
                 equal  to the strength of the BDK. For example, you can't use
                 AES_128 as  a  derivation  type  for  a  BDK  of  AES_128  or
                 TDES_2KEY .

              DukptKeyVariant -> (string)
                 The  type  of  use of DUKPT, which can be MAC generation, MAC
                 verification, or both.

              KeySerialNumber -> (string)
                 The unique identifier known as Key Serial Number  (KSN)  that
                 comes  from  an  encrypting  device  using  DUKPT  encryption
                 method. The KSN is derived from the encrypting device  unique
                 identifier and an internal transaction counter.

          EmvMac -> (structure)
              Parameters  that are required for MAC generation or verification
              using EMV MAC algorithm.

              MajorKeyDerivationMode -> (string)
                 The method to use when deriving the master key  for  EMV  MAC
                 generation or verification.

              PanSequenceNumber -> (string)
                 A  number  that  identifies  and differentiates payment cards
                 with the same Primary Account Number (PAN).

              PrimaryAccountNumber -> (string)
                 The Primary Account Number (PAN), a unique identifier  for  a
                 payment  credit  or  debit  card and associates the card to a
                 specific account holder.

              SessionKeyDerivationMode -> (string)
                 The method of deriving a session key for EMV  MAC  generation
                 or verification.

              SessionKeyDerivationValue -> (tagged union structure)
                 Parameters  that are required to generate session key for EMV
                 generation and verification.

                 NOTE:
                     This is a Tagged Union structure. Only one of the follow-
                     ing top level keys can be set: ApplicationCryptogram, Ap-
                     plicationTransactionCounter.

                 ApplicationCryptogram -> (string)
                     The cryptogram provided by the terminal  during  transac-
                     tion processing.

                 ApplicationTransactionCounter -> (string)
                     The  transaction counter that is provided by the terminal
                     during transaction processing.

       Shorthand Syntax:

          Algorithm=string,DukptCmac={DukptDerivationType=string,DukptKeyVariant=string,KeySerialNumber=string},DukptIso9797Algorithm1={DukptDerivationType=string,DukptKeyVariant=string,KeySerialNumber=string},DukptIso9797Algorithm3={DukptDerivationType=string,DukptKeyVariant=string,KeySerialNumber=string},EmvMac={MajorKeyDerivationMode=string,PanSequenceNumber=string,PrimaryAccountNumber=string,SessionKeyDerivationMode=string,SessionKeyDerivationValue={ApplicationCryptogram=string,ApplicationTransactionCounter=string}}

       JSON Syntax:

          {
            "Algorithm": "ISO9797_ALGORITHM1"|"ISO9797_ALGORITHM3"|"CMAC"|"HMAC_SHA224"|"HMAC_SHA256"|"HMAC_SHA384"|"HMAC_SHA512",
            "DukptCmac": {
              "DukptDerivationType": "TDES_2KEY"|"TDES_3KEY"|"AES_128"|"AES_192"|"AES_256",
              "DukptKeyVariant": "BIDIRECTIONAL"|"REQUEST"|"RESPONSE",
              "KeySerialNumber": "string"
            },
            "DukptIso9797Algorithm1": {
              "DukptDerivationType": "TDES_2KEY"|"TDES_3KEY"|"AES_128"|"AES_192"|"AES_256",
              "DukptKeyVariant": "BIDIRECTIONAL"|"REQUEST"|"RESPONSE",
              "KeySerialNumber": "string"
            },
            "DukptIso9797Algorithm3": {
              "DukptDerivationType": "TDES_2KEY"|"TDES_3KEY"|"AES_128"|"AES_192"|"AES_256",
              "DukptKeyVariant": "BIDIRECTIONAL"|"REQUEST"|"RESPONSE",
              "KeySerialNumber": "string"
            },
            "EmvMac": {
              "MajorKeyDerivationMode": "EMV_OPTION_A"|"EMV_OPTION_B",
              "PanSequenceNumber": "string",
              "PrimaryAccountNumber": "string",
              "SessionKeyDerivationMode": "EMV_COMMON_SESSION_KEY"|"EMV2000"|"AMEX"|"MASTERCARD_SESSION_KEY"|"VISA",
              "SessionKeyDerivationValue": {
                "ApplicationCryptogram": "string",
                "ApplicationTransactionCounter": "string"
              }
            }
          }

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

EXAMPLES
       NOTE:
          To  use  the following examples, you must have the AWS CLI installed
          and configured. See the Getting started guide in the  AWS  CLI  User
          Guide for more information.

          Unless  otherwise  stated,  all  examples  have  unix-like quotation
          rules. These examples will need to be  adapted  to  your  terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To verify a MAC

       The following verify-mac example verifies a Hash-Based Message  Authen-
       tication  Code  (HMAC) for card data authentication using the algorithm
       HMAC_SHA256 and an HMAC encryption key.

          aws payment-cryptography-data verify-mac \
              --key-identifier arn:aws:payment-cryptography:us-east-2:111122223333:key/qnobl5lghrzunce6 \
              --message-data "3b343038383439303031303733393431353d32343038323236303030373030303f33" \
              --verification-attributes='Algorithm=HMAC_SHA256' \
              --mac ED87F26E961C6D0DDB78DA5038AA2BDDEA0DCE03E5B5E96BDDD494F4A7AA470C

       Output:

          {
              "KeyArn": "arn:aws:payment-cryptography:us-east-2:111122223333:key/qnobl5lghrzunce6,
              "KeyCheckValue": "2976E7",
          }

       For more information, see Verify MAC in the  AWS  Payment  Cryptography
       User Guide.

OUTPUT
       KeyArn -> (string)
          The  keyARN  of  the encryption key that Amazon Web Services Payment
          Cryptography uses for MAC verification.

       KeyCheckValue -> (string)
          The key check value (KCV) of the encryption key. The KCV is used  to
          check if all parties holding a given key have the same key or to de-
          tect that a key has changed. Amazon Web Services Payment  Cryptogra-
          phy  calculates  the  KCV by using standard algorithms, typically by
          encrypting 8 or 16 bytes or "00" or "01" and then truncating the re-
          sult to the first 3 bytes, or 6 hex digits, of the resulting crypto-
          gram.



                                                                  VERIFY-MAC()
