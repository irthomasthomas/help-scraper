CREATE-TARGET-GROUP()                                    CREATE-TARGET-GROUP()



NAME
       create-target-group -

DESCRIPTION
       Creates  a  target group. A target group is a collection of targets, or
       compute resources, that run your application or service. A target group
       can only be used by a single service.

       For  more information, see Target groups in the Amazon VPC Lattice User
       Guide .

       See also: AWS API Documentation

SYNOPSIS
            create-target-group
          [--client-token <value>]
          [--config <value>]
          --name <value>
          [--tags <value>]
          --type <value>
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --client-token (string)
          A unique, case-sensitive identifier that you provide to  ensure  the
          idempotency  of  the  request. If you retry a request that completed
          successfully using the same client token and parameters,  the  retry
          succeeds  without  performing  any actions. If the parameters aren't
          identical, the retry fails.

       --config (structure)
          The target group configuration. If type is set to LAMBDA , this  pa-
          rameter doesn't apply.

          healthCheck -> (structure)
              The health check configuration.

              enabled -> (boolean)
                 Indicates whether health checking is enabled.

              healthCheckIntervalSeconds -> (integer)
                 The  approximate  amount  of time, in seconds, between health
                 checks of an individual target. The range  is  5300  seconds.
                 The default is 30 seconds.

              healthCheckTimeoutSeconds -> (integer)
                 The  amount  of  time, in seconds, to wait before reporting a
                 target as unhealthy. The range is 1120 seconds.  The  default
                 is 5 seconds.

              healthyThresholdCount -> (integer)
                 The  number  of consecutive successful health checks required
                 before considering an unhealthy target healthy. The range  is
                 210. The default is 5.

              matcher -> (tagged union structure)
                 The codes to use when checking for a successful response from
                 a target. These are called Success codes in the console.

                 NOTE:
                     This is a Tagged Union structure. Only one of the follow-
                     ing top level keys can be set: httpCode.

                 httpCode -> (string)
                     The  HTTP  code to use when checking for a successful re-
                     sponse from a target.

              path -> (string)
                 The destination for health checks on the targets. If the pro-
                 tocol  version  is  HTTP/1.1  or HTTP/2 , specify a valid URI
                 (for example, /path?query ). The default path is /  .  Health
                 checks  are  not  supported if the protocol version is gRPC ,
                 however, you can choose HTTP/1.1  or  HTTP/2  and  specify  a
                 valid URI.

              port -> (integer)
                 The  port  used when performing health checks on targets. The
                 default setting is the port that a  target  receives  traffic
                 on.

              protocol -> (string)
                 The  protocol  used when performing health checks on targets.
                 The possible protocols are HTTP and HTTPS .  The  default  is
                 HTTP .

              protocolVersion -> (string)
                 The  protocol  version  used when performing health checks on
                 targets. The possible protocol versions are HTTP1 and HTTP2 .

              unhealthyThresholdCount -> (integer)
                 The number of consecutive failed health checks  required  be-
                 fore  considering  a  target unhealthy. The range is 210. The
                 default is 2.

          ipAddressType -> (string)
              The type of IP address used for the target group.  The  possible
              values are ipv4 and ipv6 . This is an optional parameter. If not
              specified, the IP address type defaults to ipv4 .

          port -> (integer)
              The port on which the targets are listening. For HTTP,  the  de-
              fault is 80 . For HTTPS, the default is 443

          protocol -> (string)
              The  protocol to use for routing traffic to the targets. Default
              is the protocol of a target group.

          protocolVersion -> (string)
              The protocol version. Default value is HTTP1 .

          vpcIdentifier -> (string)
              The ID of the VPC.

       Shorthand Syntax:

          healthCheck={enabled=boolean,healthCheckIntervalSeconds=integer,healthCheckTimeoutSeconds=integer,healthyThresholdCount=integer,matcher={httpCode=string},path=string,port=integer,protocol=string,protocolVersion=string,unhealthyThresholdCount=integer},ipAddressType=string,port=integer,protocol=string,protocolVersion=string,vpcIdentifier=string

       JSON Syntax:

          {
            "healthCheck": {
              "enabled": true|false,
              "healthCheckIntervalSeconds": integer,
              "healthCheckTimeoutSeconds": integer,
              "healthyThresholdCount": integer,
              "matcher": {
                "httpCode": "string"
              },
              "path": "string",
              "port": integer,
              "protocol": "HTTP"|"HTTPS",
              "protocolVersion": "HTTP1"|"HTTP2",
              "unhealthyThresholdCount": integer
            },
            "ipAddressType": "IPV4"|"IPV6",
            "port": integer,
            "protocol": "HTTP"|"HTTPS",
            "protocolVersion": "HTTP1"|"HTTP2"|"GRPC",
            "vpcIdentifier": "string"
          }

       --name (string)
          The name of the target group. The name must be unique within the ac-
          count. The valid characters are a-z, 0-9, and hyphens (-). You can't
          use a hyphen as the first or last character,  or  immediately  after
          another hyphen.

       --tags (map)
          The tags for the target group.

          key -> (string)
              The key of the tag.

              Constraints: Tag keys are case-sensitive and accept a maximum of
              128 Unicode characters. Valid characters  are  Unicode  letters,
              digits, white space, and any of the following symbols: _ . : / =
              + - @ May not begin with aws: .

          value -> (string)
              The value of the tag.

              Constraints: Tag values are case-sensitive and accept a  maximum
              of 256 Unicode characters. Valid characters are Unicode letters,
              digits, white space, and any of the following symbols: _ . : / =
              + - @

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --type (string)
          The type of target group.

          Possible values:

          o IP

          o LAMBDA

          o INSTANCE

          o ALB

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

EXAMPLES
       NOTE:
          To use the following examples, you must have the AWS  CLI  installed
          and  configured.  See  the Getting started guide in the AWS CLI User
          Guide for more information.

          Unless otherwise  stated,  all  examples  have  unix-like  quotation
          rules.  These  examples  will  need to be adapted to your terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       Example 1: To create a target group of type INSTANCE

       The  following  create-target-group example creates a target group with
       the specified name, type, and configuration.

          aws vpc-lattice create-target-group \
              --name my-lattice-target-group-instance \
              --type INSTANCE \
              --config file://tg-config.json

       Contents of tg-config.json:

          {
              "port": 443,
              "protocol": "HTTPS",
              "protocolVersion": "HTTP1",
              "vpcIdentifier": "vpc-f1663d9868EXAMPLE"
          }

       Output:

          {
              "arn": "arn:aws:vpc-lattice:us-east-2:123456789012:targetgroup/tg-0eaa4b9ab4EXAMPLE",
              "config": {
                  "healthCheck": {
                      "enabled": true,
                      "healthCheckIntervalSeconds": 30,
                      "healthCheckTimeoutSeconds": 5,
                      "healthyThresholdCount": 5,
                      "matcher": {
                          "httpCode": "200"
                      },
                      "path": "/",
                      "protocol": "HTTPS",
                      "protocolVersion": "HTTP1",
                      "unhealthyThresholdCount": 2
                  },
                  "port": 443,
                  "protocol": "HTTPS",
                  "protocolVersion": "HTTP1",
                  "vpcIdentifier": "vpc-f1663d9868EXAMPLE"
              },
              "id": "tg-0eaa4b9ab4EXAMPLE",
              "name": "my-lattice-target-group-instance",
              "status": "CREATE_IN_PROGRESS",
              "type": "INSTANCE"
          }

       Example 2: To create a target group of type IP

       The following create-target-group example creates a target  group  with
       the specified name, type, and configuration.

          aws vpc-lattice create-target-group \
              --name my-lattice-target-group-ip \
              --type IP \
              --config file://tg-config.json

       Contents of tg-config.json:

          {
              "ipAddressType": "IPV4",
              "port": 443,
              "protocol": "HTTPS",
              "protocolVersion": "HTTP1",
              "vpcIdentifier": "vpc-f1663d9868EXAMPLE"
          }

       Output:

          {
              "arn": "arn:aws:vpc-lattice:us-east-2:123456789012:targetgroup/tg-0eaa4b9ab4EXAMPLE",
              "config": {
                  "healthCheck": {
                      "enabled": true,
                      "healthCheckIntervalSeconds": 30,
                      "healthCheckTimeoutSeconds": 5,
                      "healthyThresholdCount": 5,
                      "matcher": {
                          "httpCode": "200"
                      },
                      "path": "/",
                      "protocol": "HTTPS",
                      "protocolVersion": "HTTP1",
                      "unhealthyThresholdCount": 2
                  },
                  "ipAddressType": "IPV4",
                  "port": 443,
                  "protocol": "HTTPS",
                  "protocolVersion": "HTTP1",
                  "vpcIdentifier": "vpc-f1663d9868EXAMPLE"
              },
              "id": "tg-0eaa4b9ab4EXAMPLE",
              "name": "my-lattice-target-group-ip",
              "status": "CREATE_IN_PROGRESS",
              "type": "IP"
          }

       Example 3: To create a target group of type LAMBDA

       The  following  create-target-group example creates a target group with
       the specified name, type, and configuration.

          aws vpc-lattice create-target-group \
              --name my-lattice-target-group-lambda \
              --type LAMBDA

       Output:

          {
              "arn": "arn:aws:vpc-lattice:us-east-2:123456789012:targetgroup/tg-0eaa4b9ab4EXAMPLE",
              "id": "tg-0eaa4b9ab4EXAMPLE",
              "name": "my-lattice-target-group-lambda",
              "status": "CREATE_IN_PROGRESS",
              "type": "LAMBDA"
          }

       Example 4: To create a target group of type ALB

       The following create-target-group example creates a target  group  with
       the specified name, type, and configuration.

          aws vpc-lattice create-target-group \
              --name my-lattice-target-group-alb \
              --type ALB \
              --config file://tg-config.json

       Contents of tg-config.json:

          {
              "port": 443,
              "protocol": "HTTPS",
              "protocolVersion": "HTTP1",
              "vpcIdentifier": "vpc-f1663d9868EXAMPLE"
          }

       Output:

          {
              "arn": "arn:aws:vpc-lattice:us-east-2:123456789012:targetgroup/tg-0eaa4b9ab4EXAMPLE",
              "config": {
                  "port": 443,
                  "protocol": "HTTPS",
                  "protocolVersion": "HTTP1",
                  "vpcIdentifier": "vpc-f1663d9868EXAMPLE"
              },
              "id": "tg-0eaa4b9ab4EXAMPLE",
              "name": "my-lattice-target-group-alb",
              "status": "CREATE_IN_PROGRESS",
              "type": "ALB"
          }

       For  more information, see Target groups in the Amazon VPC Lattice User
       Guide.

OUTPUT
       arn -> (string)
          The Amazon Resource Name (ARN) of the target group.

       config -> (structure)
          The target group configuration. If type is set to LAMBDA , this  pa-
          rameter doesn't apply.

          healthCheck -> (structure)
              The health check configuration.

              enabled -> (boolean)
                 Indicates whether health checking is enabled.

              healthCheckIntervalSeconds -> (integer)
                 The  approximate  amount  of time, in seconds, between health
                 checks of an individual target. The range  is  5300  seconds.
                 The default is 30 seconds.

              healthCheckTimeoutSeconds -> (integer)
                 The  amount  of  time, in seconds, to wait before reporting a
                 target as unhealthy. The range is 1120 seconds.  The  default
                 is 5 seconds.

              healthyThresholdCount -> (integer)
                 The  number  of consecutive successful health checks required
                 before considering an unhealthy target healthy. The range  is
                 210. The default is 5.

              matcher -> (tagged union structure)
                 The codes to use when checking for a successful response from
                 a target. These are called Success codes in the console.

                 NOTE:
                     This is a Tagged Union structure. Only one of the follow-
                     ing top level keys can be set: httpCode.

                 httpCode -> (string)
                     The  HTTP  code to use when checking for a successful re-
                     sponse from a target.

              path -> (string)
                 The destination for health checks on the targets. If the pro-
                 tocol  version  is  HTTP/1.1  or HTTP/2 , specify a valid URI
                 (for example, /path?query ). The default path is /  .  Health
                 checks  are  not  supported if the protocol version is gRPC ,
                 however, you can choose HTTP/1.1  or  HTTP/2  and  specify  a
                 valid URI.

              port -> (integer)
                 The  port  used when performing health checks on targets. The
                 default setting is the port that a  target  receives  traffic
                 on.

              protocol -> (string)
                 The  protocol  used when performing health checks on targets.
                 The possible protocols are HTTP and HTTPS .  The  default  is
                 HTTP .

              protocolVersion -> (string)
                 The  protocol  version  used when performing health checks on
                 targets. The possible protocol versions are HTTP1 and HTTP2 .

              unhealthyThresholdCount -> (integer)
                 The number of consecutive failed health checks  required  be-
                 fore  considering  a  target unhealthy. The range is 210. The
                 default is 2.

          ipAddressType -> (string)
              The type of IP address used for the target group.  The  possible
              values are ipv4 and ipv6 . This is an optional parameter. If not
              specified, the IP address type defaults to ipv4 .

          port -> (integer)
              The port on which the targets are listening. For HTTP,  the  de-
              fault is 80 . For HTTPS, the default is 443

          protocol -> (string)
              The  protocol to use for routing traffic to the targets. Default
              is the protocol of a target group.

          protocolVersion -> (string)
              The protocol version. Default value is HTTP1 .

          vpcIdentifier -> (string)
              The ID of the VPC.

       id -> (string)
          The ID of the target group.

       name -> (string)
          The name of the target group.

       status -> (string)
          The operation's status. You can retry the operation if the status is
          CREATE_FAILED  .  However,  if you retry it while the status is CRE-
          ATE_IN_PROGRESS , there is no change in the status.

       type -> (string)
          The type of target group.



                                                         CREATE-TARGET-GROUP()
