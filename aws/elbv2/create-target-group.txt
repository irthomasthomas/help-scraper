CREATE-TARGET-GROUP()                                    CREATE-TARGET-GROUP()



NAME
       create-target-group -

DESCRIPTION
       Creates a target group.

       For more information, see the following:

       o Target groups for your Application Load Balancers

       o Target groups for your Network Load Balancers

       o Target groups for your Gateway Load Balancers

       This operation is idempotent, which means that it completes at most one
       time. If you attempt to create multiple target  groups  with  the  same
       settings, each call succeeds.

       See also: AWS API Documentation

SYNOPSIS
            create-target-group
          --name <value>
          [--protocol <value>]
          [--protocol-version <value>]
          [--port <value>]
          [--vpc-id <value>]
          [--health-check-protocol <value>]
          [--health-check-port <value>]
          [--health-check-enabled | --no-health-check-enabled]
          [--health-check-path <value>]
          [--health-check-interval-seconds <value>]
          [--health-check-timeout-seconds <value>]
          [--healthy-threshold-count <value>]
          [--unhealthy-threshold-count <value>]
          [--matcher <value>]
          [--target-type <value>]
          [--tags <value>]
          [--ip-address-type <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --name (string)
          The name of the target group.

          This  name must be unique per region per account, can have a maximum
          of 32 characters, must contain only alphanumeric characters  or  hy-
          phens, and must not begin or end with a hyphen.

       --protocol (string)
          The protocol to use for routing traffic to the targets. For Applica-
          tion Load Balancers, the supported protocols are HTTP and HTTPS. For
          Network  Load  Balancers, the supported protocols are TCP, TLS, UDP,
          or TCP_UDP. For Gateway Load Balancers, the  supported  protocol  is
          GENEVE.  A TCP_UDP listener must be associated with a TCP_UDP target
          group. If the target is a Lambda function, this parameter  does  not
          apply.

          Possible values:

          o HTTP

          o HTTPS

          o TCP

          o TLS

          o UDP

          o TCP_UDP

          o GENEVE

       --protocol-version (string)
          [HTTP/HTTPS protocol] The protocol version. Specify GRPC to send re-
          quests to targets using gRPC. Specify HTTP2 to send requests to tar-
          gets  using  HTTP/2.  The default is HTTP1 , which sends requests to
          targets using HTTP/1.1.

       --port (integer)
          The port on which the targets receive traffic. This port is used un-
          less you specify a port override when registering the target. If the
          target is a Lambda function, this parameter does not apply.  If  the
          protocol is GENEVE, the supported port is 6081.

       --vpc-id (string)
          The  identifier of the virtual private cloud (VPC). If the target is
          a Lambda function, this parameter does not  apply.  Otherwise,  this
          parameter is required.

       --health-check-protocol (string)
          The protocol the load balancer uses when performing health checks on
          targets. For Application Load Balancers, the default  is  HTTP.  For
          Network  Load  Balancers  and Gateway Load Balancers, the default is
          TCP. The TCP protocol is not supported for health checks if the pro-
          tocol  of  the  target group is HTTP or HTTPS. The GENEVE, TLS, UDP,
          and TCP_UDP protocols are not supported for health checks.

          Possible values:

          o HTTP

          o HTTPS

          o TCP

          o TLS

          o UDP

          o TCP_UDP

          o GENEVE

       --health-check-port (string)
          The port the load balancer uses when  performing  health  checks  on
          targets.  If the protocol is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP,
          the default is traffic-port , which is the port on which each target
          receives  traffic from the load balancer. If the protocol is GENEVE,
          the default is port 80.

       --health-check-enabled | --no-health-check-enabled (boolean)
          Indicates whether health checks are enabled. If the target  type  is
          lambda  ,  health checks are disabled by default but can be enabled.
          If the target type is instance , ip , or alb , health checks are al-
          ways enabled and cannot be disabled.

       --health-check-path (string)
          [HTTP/HTTPS  health checks] The destination for health checks on the
          targets.

          [HTTP1 or HTTP2 protocol version] The ping path. The default is /.

          [GRPC protocol version] The path of a  custom  health  check  method
          with  the format /package.service/method. The default is /Amazon Web
          Services.ALB/healthcheck.

       --health-check-interval-seconds (integer)
          The approximate amount of time, in seconds, between health checks of
          an individual target. The range is 5-300. If the target group proto-
          col is TCP, TLS, UDP, TCP_UDP, HTTP or HTTPS, the default is 30 sec-
          onds. If the target group protocol is GENEVE, the default is 10 sec-
          onds. If the target type is lambda , the default is 35 seconds.

       --health-check-timeout-seconds (integer)
          The amount of time, in seconds, during which no response from a tar-
          get means a failed health check. The range is 2120 seconds. For tar-
          get groups with a protocol of HTTP, the default is  6  seconds.  For
          target  groups  with a protocol of TCP, TLS or HTTPS, the default is
          10 seconds. For target groups with a protocol of GENEVE, the default
          is  5 seconds. If the target type is lambda , the default is 30 sec-
          onds.

       --healthy-threshold-count (integer)
          The number of consecutive health  check  successes  required  before
          considering a target healthy. The range is 2-10. If the target group
          protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 5.
          For  target  groups  with a protocol of GENEVE, the default is 5. If
          the target type is lambda , the default is 5.

       --unhealthy-threshold-count (integer)
          The number of consecutive health check failures required before con-
          sidering  a target unhealthy. The range is 2-10. If the target group
          protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 2.
          For  target  groups  with a protocol of GENEVE, the default is 2. If
          the target type is lambda , the default is 5.

       --matcher (structure)
          [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when check-
          ing  for a successful response from a target. For target groups with
          a protocol of TCP, TCP_UDP, UDP or TLS the  range  is  200-599.  For
          target  groups  with  a  protocol  of  HTTP  or  HTTPS, the range is
          200-499. For target groups with a protocol of GENEVE, the  range  is
          200-399.

          HttpCode -> (string)
              For  Application  Load Balancers, you can specify values between
              200 and 499, with the default value being 200. You  can  specify
              multiple  values  (for  example, "200,202") or a range of values
              (for example, "200-299").

              For Network Load Balancers, you can specify values  between  200
              and  599,  with the default value being 200-399. You can specify
              multiple values (for example, "200,202") or a  range  of  values
              (for example, "200-299").

              For Gateway Load Balancers, this must be "200399".

              Note  that when using shorthand syntax, some values such as com-
              mas need to be escaped.

          GrpcCode -> (string)
              You can specify values between 0 and 99. You can specify  multi-
              ple  values (for example, "0,1") or a range of values (for exam-
              ple, "0-5"). The default value is 12.

       Shorthand Syntax:

          HttpCode=string,GrpcCode=string

       JSON Syntax:

          {
            "HttpCode": "string",
            "GrpcCode": "string"
          }

       --target-type (string)
          The type of target that you must specify  when  registering  targets
          with this target group. You can't specify targets for a target group
          using more than one target type.

          o instance - Register targets by instance ID. This  is  the  default
            value.

          o ip  - Register targets by IP address. You can specify IP addresses
            from the subnets of the virtual private cloud (VPC) for the target
            group,   the   RFC  1918  range  (10.0.0.0/8,  172.16.0.0/12,  and
            192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't
            specify publicly routable IP addresses.

          o lambda - Register a single Lambda function as a target.

          o alb - Register a single Application Load Balancer as a target.

          Possible values:

          o instance

          o ip

          o lambda

          o alb

       --tags (list)
          The tags to assign to the target group.

          (structure)
              Information about a tag.

              Key -> (string)
                 The key of the tag.

              Value -> (string)
                 The value of the tag.

       Shorthand Syntax:

          Key=string,Value=string ...

       JSON Syntax:

          [
            {
              "Key": "string",
              "Value": "string"
            }
            ...
          ]

       --ip-address-type (string)
          The type of IP address used for this target group. The possible val-
          ues are ipv4 and ipv6 . This is an optional parameter. If not speci-
          fied, the IP address type defaults to ipv4 .

          Possible values:

          o ipv4

          o ipv6

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

EXAMPLES
       NOTE:
          To use the following examples, you must have the AWS  CLI  installed
          and  configured.  See  the Getting started guide in the AWS CLI User
          Guide for more information.

          Unless otherwise  stated,  all  examples  have  unix-like  quotation
          rules.  These  examples  will  need to be adapted to your terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       Example 1: To create a target group for an Application Load Balancer

       The following create-target-group example creates a target group for an
       Application Load Balancer where you register  targets  by  instance  ID
       (the  target  type is instance). This target group uses the HTTP proto-
       col, port 80, and the default health check settings for an HTTP  target
       group.

          aws elbv2 create-target-group \
              --name my-targets \
              --protocol HTTP \
              --port 80 \
              --target-type instance \
              --vpc-id vpc-3ac0fb5f

       Output:

          {
              "TargetGroups": [
                  {
                      "TargetGroupArn": "arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067",
                      "TargetGroupName": "my-targets",
                      "Protocol": "HTTP",
                      "Port": 80,
                      "VpcId": "vpc-3ac0fb5f",
                      "HealthCheckProtocol": "HTTP",
                      "HealthCheckPort": "traffic-port",
                      "HealthCheckEnabled": true,
                      "HealthCheckIntervalSeconds": 30,
                      "HealthCheckTimeoutSeconds": 5,
                      "HealthyThresholdCount": 5,
                      "UnhealthyThresholdCount": 2,
                      "HealthCheckPath": "/",
                      "Matcher": {
                          "HttpCode": "200"
                      },
                      "TargetType": "instance",
                      "ProtocolVersion": "HTTP1",
                      "IpAddressType": "ipv4"
                  }
              ]
          }

       For  more  information, see Create a target group in the User Guide for
       Application Load Balancers.

       Example 2: To create a target group to route traffic from  an  Applica-
       tion Load Balancer to a Lambda function

       The following create-target-group example creates a target group for an
       Application Load Balancer where the target is a  Lambda  function  (the
       target  type  is  lambda).  Health  checks are disabled for this target
       group by default.

          aws elbv2 create-target-group \
              --name my-lambda-target \
              --target-type lambda

       Output:

          {
              "TargetGroups": [
                  {
                      "TargetGroupArn": "arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-lambda-target/a3003e085dbb8ddc",
                      "TargetGroupName": "my-lambda-target",
                      "HealthCheckEnabled": false,
                      "HealthCheckIntervalSeconds": 35,
                      "HealthCheckTimeoutSeconds": 30,
                      "HealthyThresholdCount": 5,
                      "UnhealthyThresholdCount": 2,
                      "HealthCheckPath": "/",
                      "Matcher": {
                          "HttpCode": "200"
                      },
                      "TargetType": "lambda",
                      "IpAddressType": "ipv4"
                  }
              ]
          }

       For more information, see Lambda functions as targets in the User Guide
       for Application Load Balancers.

       Example 3: To create a target group for a Network Load Balancer

       The  following create-target-group example creates a target group for a
       Network Load Balancer where you register targets  by  IP  address  (the
       target  type  is ip). This target group uses the TCP protocol, port 80,
       and the default health check settings for a TCP target group.

          aws elbv2 create-target-group \
              --name my-ip-targets \
              --protocol TCP \
              --port 80 \
              --target-type ip \
              --vpc-id vpc-3ac0fb5f

       Output:

          {
              "TargetGroups": [
                  {
                      "TargetGroupArn": "arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-ip-targets/b6bba954d1361c78",
                      "TargetGroupName": "my-ip-targets",
                      "Protocol": "TCP",
                      "Port": 80,
                      "VpcId": "vpc-3ac0fb5f",
                      "HealthCheckEnabled": true,
                      "HealthCheckProtocol": "TCP",
                      "HealthCheckPort": "traffic-port",
                      "HealthCheckIntervalSeconds": 30,
                      "HealthCheckTimeoutSeconds": 10,
                      "HealthyThresholdCount": 5,
                      "UnhealthyThresholdCount": 2,
                      "TargetType": "ip",
                      "IpAddressType": "ipv4"
                  }
              ]
          }

       For more information, see Create a target group in the User  Guide  for
       Network Load Balancers.

       Example  4:  To  create  a target group to route traffic from a Network
       Load Balancer to an Application Load Balancer

       The following create-target-group example creates a target group for  a
       Network  Load  Balancer where you register an Application Load Balancer
       as a target (the target type is alb).

          aws elbv2 create-target-group
                 --name my-alb-target --protocol TCP --port  80  --target-type
                 alb --vpc-id vpc-3ac0fb5f

       Output:

          {
              "TargetGroups": [
                  {
                      "TargetGroupArn": "arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-alb-target/a3003e085dbb8ddc",
                      "TargetGroupName": "my-alb-target",
                      "Protocol": "TCP",
                      "Port": 80,
                      "VpcId": "vpc-838475fe",
                      "HealthCheckProtocol": "HTTP",
                      "HealthCheckPort": "traffic-port",
                      "HealthCheckEnabled": true,
                      "HealthCheckIntervalSeconds": 30,
                      "HealthCheckTimeoutSeconds": 6,
                      "HealthyThresholdCount": 5,
                      "UnhealthyThresholdCount": 2,
                      "HealthCheckPath": "/",
                      "Matcher": {
                          "HttpCode": "200-399"
                      },
                      "TargetType": "alb",
                      "IpAddressType": "ipv4"
                  }
              ]
          }

       For  more  information,  see  Create a target group with an Application
       Load Balancer as the target in the User Guide  for  Network  Load  Bal-
       ancers.

       Example 5: To create a target group for a Gateway Load Balancer

       The  following create-target-group example creates a target group for a
       Gateway Load Balancer where the target is an instance, and  the  target
       group protocol is GENEVE.

          aws elbv2 create-target-group \
              --name my-glb-targetgroup \
              --protocol GENEVE \
              --port 6081 \
              --target-type instance \
              --vpc-id vpc-838475fe

       Output:

          {
              "TargetGroups": [
                  {
                      "TargetGroupArn": "arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-glb-targetgroup/00c3d57eacd6f40b6f",
                      "TargetGroupName": "my-glb-targetgroup",
                      "Protocol": "GENEVE",
                      "Port": 6081,
                      "VpcId": "vpc-838475fe",
                      "HealthCheckProtocol": "TCP",
                      "HealthCheckPort": "80",
                      "HealthCheckEnabled": true,
                      "HealthCheckIntervalSeconds": 10,
                      "HealthCheckTimeoutSeconds": 5,
                      "HealthyThresholdCount": 5,
                      "UnhealthyThresholdCount": 2,
                      "TargetType": "instance"
                  }
              ]
          }

       For    more    information,    see    Create    a   target   group   <-
       https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/cre-
       ate-target-group.html>`__ in the Gateway Load Balancer User Guide.

OUTPUT
       TargetGroups -> (list)
          Information about the target group.

          (structure)
              Information about a target group.

              TargetGroupArn -> (string)
                 The Amazon Resource Name (ARN) of the target group.

              TargetGroupName -> (string)
                 The name of the target group.

              Protocol -> (string)
                 The protocol to use for routing traffic to the targets.

              Port -> (integer)
                 The  port  on which the targets are listening. This parameter
                 is not used if the target is a Lambda function.

              VpcId -> (string)
                 The ID of the VPC for the targets.

              HealthCheckProtocol -> (string)
                 The protocol to use to connect with the target.  The  GENEVE,
                 TLS,  UDP, and TCP_UDP protocols are not supported for health
                 checks.

              HealthCheckPort -> (string)
                 The port to use to connect with the target.

              HealthCheckEnabled -> (boolean)
                 Indicates whether health checks are enabled.

              HealthCheckIntervalSeconds -> (integer)
                 The approximate amount of time, in  seconds,  between  health
                 checks of an individual target.

              HealthCheckTimeoutSeconds -> (integer)
                 The  amount  of  time,  in  seconds, during which no response
                 means a failed health check.

              HealthyThresholdCount -> (integer)
                 The number of consecutive health  checks  successes  required
                 before considering an unhealthy target healthy.

              UnhealthyThresholdCount -> (integer)
                 The  number of consecutive health check failures required be-
                 fore considering the target unhealthy.

              HealthCheckPath -> (string)
                 The destination for health checks on the targets.

              Matcher -> (structure)
                 The HTTP or gRPC codes to use when checking for a  successful
                 response from a target.

                 HttpCode -> (string)
                     For  Application  Load  Balancers, you can specify values
                     between 200 and 499, with the default  value  being  200.
                     You  can specify multiple values (for example, "200,202")
                     or a range of values (for example, "200-299").

                     For Network Load Balancers, you can  specify  values  be-
                     tween  200 and 599, with the default value being 200-399.
                     You can specify multiple values (for example,  "200,202")
                     or a range of values (for example, "200-299").

                     For Gateway Load Balancers, this must be "200399".

                     Note  that  when using shorthand syntax, some values such
                     as commas need to be escaped.

                 GrpcCode -> (string)
                     You can specify values between 0 and 99. You can  specify
                     multiple values (for example, "0,1") or a range of values
                     (for example, "0-5"). The default value is 12.

              LoadBalancerArns -> (list)
                 The Amazon Resource Name (ARN)  of  the  load  balancer  that
                 routes  traffic to this target group. You can use each target
                 group with only one load balancer.

                 (string)

              TargetType -> (string)
                 The type of target that you  must  specify  when  registering
                 targets  with  this target group. The possible values are in-
                 stance (register targets by instance ID), ip  (register  tar-
                 gets  by  IP address), lambda (register a single Lambda func-
                 tion as a target), or alb (register a single Application Load
                 Balancer as a target).

              ProtocolVersion -> (string)
                 [HTTP/HTTPS protocol] The protocol version. The possible val-
                 ues are GRPC , HTTP1 , and HTTP2 .

              IpAddressType -> (string)
                 The type of IP address used for this target group. The possi-
                 ble values are ipv4 and ipv6 . This is an optional parameter.
                 If not specified, the IP address type defaults to ipv4 .



                                                         CREATE-TARGET-GROUP()
