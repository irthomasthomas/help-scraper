CREATE-DECODER-MANIFEST()                            CREATE-DECODER-MANIFEST()



NAME
       create-decoder-manifest -

DESCRIPTION
       Creates  the decoder manifest associated with a model manifest. To cre-
       ate a decoder manifest, the following must be true:

       o Every signal decoder has a unique name.

       o Each signal decoder is associated with a network interface.

       o Each network interface has a unique ID.

       o The signal decoders are specified in the model manifest.

       See also: AWS API Documentation

SYNOPSIS
            create-decoder-manifest
          --name <value>
          [--description <value>]
          --model-manifest-arn <value>
          [--signal-decoders <value>]
          [--network-interfaces <value>]
          [--tags <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --name (string)
          The unique name of the decoder manifest to create.

       --description (string)
          A brief description of the decoder manifest.

       --model-manifest-arn (string)
          The Amazon Resource Name (ARN) of the  vehicle  model  (model  mani-
          fest).

       --signal-decoders (list)
          A list of information about signal decoders.

          (structure)
              Information about a signal decoder.

              fullyQualifiedName -> (string)
                 The  fully qualified name of a signal decoder as defined in a
                 vehicle model.

              type -> (string)
                 The network protocol for the vehicle. For example, CAN_SIGNAL
                 specifies  a  protocol  that defines how data is communicated
                 between electronic control units (ECUs). OBD_SIGNAL specifies
                 a  protocol that defines how self-diagnostic data is communi-
                 cated between ECUs.

              interfaceId -> (string)
                 The ID of a network interface  that  specifies  what  network
                 protocol a vehicle follows.

              canSignal -> (structure)
                 Information  about  signal  decoder using the Controller Area
                 Network (CAN) protocol.

                 messageId -> (integer)
                     The ID of the message.

                 isBigEndian -> (boolean)
                     Whether the byte ordering of a CAN message is big-endian.

                 isSigned -> (boolean)
                     Whether the message data is specified as a signed value.

                 startBit -> (integer)
                     Indicates the beginning of the CAN message.

                 offset -> (double)
                     Indicates where data appears in the CAN message.

                 factor -> (double)
                     A multiplier used to decode the CAN message.

                 length -> (integer)
                     How many bytes of data are in the message.

                 name -> (string)
                     The name of the signal.

              obdSignal -> (structure)
                 Information about signal decoder using the On-board  diagnos-
                 tic (OBD) II protocol.

                 pidResponseLength -> (integer)
                     The length of the requested data.

                 serviceMode -> (integer)
                     The mode of operation (diagnostic service) in a message.

                 pid -> (integer)
                     The  diagnostic  code used to request data from a vehicle
                     for this signal.

                 scaling -> (double)
                     A multiplier used to decode the message.

                 offset -> (double)
                     Indicates where data appears in the message.

                 startByte -> (integer)
                     Indicates the beginning of the message.

                 byteLength -> (integer)
                     The length of a message.

                 bitRightShift -> (integer)
                     The number of positions to shift bits in the message.

                 bitMaskLength -> (integer)
                     The number of bits to mask in a message.

       Shorthand Syntax:

          fullyQualifiedName=string,type=string,interfaceId=string,canSignal={messageId=integer,isBigEndian=boolean,isSigned=boolean,startBit=integer,offset=double,factor=double,length=integer,name=string},obdSignal={pidResponseLength=integer,serviceMode=integer,pid=integer,scaling=double,offset=double,startByte=integer,byteLength=integer,bitRightShift=integer,bitMaskLength=integer} ...

       JSON Syntax:

          [
            {
              "fullyQualifiedName": "string",
              "type": "CAN_SIGNAL"|"OBD_SIGNAL",
              "interfaceId": "string",
              "canSignal": {
                "messageId": integer,
                "isBigEndian": true|false,
                "isSigned": true|false,
                "startBit": integer,
                "offset": double,
                "factor": double,
                "length": integer,
                "name": "string"
              },
              "obdSignal": {
                "pidResponseLength": integer,
                "serviceMode": integer,
                "pid": integer,
                "scaling": double,
                "offset": double,
                "startByte": integer,
                "byteLength": integer,
                "bitRightShift": integer,
                "bitMaskLength": integer
              }
            }
            ...
          ]

       --network-interfaces (list)
          A list of information about available network interfaces.

          (structure)
              Represents a node and its specifications in an in-vehicle commu-
              nication  network. All signal decoders must be associated with a
              network node.

              To return this information  about  all  the  network  interfaces
              specified in a decoder manifest, use the API operation.

              interfaceId -> (string)
                 The ID of the network interface.

              type -> (string)
                 The network protocol for the vehicle. For example, CAN_SIGNAL
                 specifies a protocol that defines how  data  is  communicated
                 between electronic control units (ECUs). OBD_SIGNAL specifies
                 a protocol that defines how self-diagnostic data is  communi-
                 cated between ECUs.

              canInterface -> (structure)
                 Information  about  a network interface specified by the Con-
                 troller Area Network (CAN) protocol.

                 name -> (string)
                     The unique name of the interface.

                 protocolName -> (string)
                     The name of the communication protocol for the interface.

                 protocolVersion -> (string)
                     The version of the communication protocol for the  inter-
                     face.

              obdInterface -> (structure)
                 Information  about  a  network  interface  specified  by  the
                 On-board diagnostic (OBD) II protocol.

                 name -> (string)
                     The name of the interface.

                 requestMessageId -> (integer)
                     The ID of the message requesting vehicle data.

                 obdStandard -> (string)
                     The standard OBD II PID.

                 pidRequestIntervalSeconds -> (integer)
                     The maximum number message requests per second.

                 dtcRequestIntervalSeconds -> (integer)
                     The maximum number message requests per diagnostic  trou-
                     ble code per second.

                 useExtendedIds -> (boolean)
                     Whether to use extended IDs in the message.

                 hasTransmissionEcu -> (boolean)
                     Whether  the  vehicle  has  a transmission control module
                     (TCM).

       Shorthand Syntax:

          interfaceId=string,type=string,canInterface={name=string,protocolName=string,protocolVersion=string},obdInterface={name=string,requestMessageId=integer,obdStandard=string,pidRequestIntervalSeconds=integer,dtcRequestIntervalSeconds=integer,useExtendedIds=boolean,hasTransmissionEcu=boolean} ...

       JSON Syntax:

          [
            {
              "interfaceId": "string",
              "type": "CAN_INTERFACE"|"OBD_INTERFACE",
              "canInterface": {
                "name": "string",
                "protocolName": "string",
                "protocolVersion": "string"
              },
              "obdInterface": {
                "name": "string",
                "requestMessageId": integer,
                "obdStandard": "string",
                "pidRequestIntervalSeconds": integer,
                "dtcRequestIntervalSeconds": integer,
                "useExtendedIds": true|false,
                "hasTransmissionEcu": true|false
              }
            }
            ...
          ]

       --tags (list)
          Metadata that can be used to manage the decoder manifest.

          (structure)
              A set of key/value pairs that are used to manage the resource.

              Key -> (string)
                 The tag's key.

              Value -> (string)
                 The tag's value.

       Shorthand Syntax:

          Key=string,Value=string ...

       JSON Syntax:

          [
            {
              "Key": "string",
              "Value": "string"
            }
            ...
          ]

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

OUTPUT
       name -> (string)
          The name of the created decoder manifest.

       arn -> (string)
          The ARN of the created decoder manifest.



                                                     CREATE-DECODER-MANIFEST()
