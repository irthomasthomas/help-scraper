CREATE-DECODER-MANIFEST()                            CREATE-DECODER-MANIFEST()



NAME
       create-decoder-manifest -

DESCRIPTION
       Creates  the decoder manifest associated with a model manifest. To cre-
       ate a decoder manifest, the following must be true:

       o Every signal decoder has a unique name.

       o Each signal decoder is associated with a network interface.

       o Each network interface has a unique ID.

       o The signal decoders are specified in the model manifest.

       See also: AWS API Documentation

SYNOPSIS
            create-decoder-manifest
          --name <value>
          [--description <value>]
          --model-manifest-arn <value>
          [--signal-decoders <value>]
          [--network-interfaces <value>]
          [--tags <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --name (string)
          The unique name of the decoder manifest to create.

       --description (string)
          A brief description of the decoder manifest.

       --model-manifest-arn (string)
          The Amazon Resource Name (ARN) of the  vehicle  model  (model  mani-
          fest).

       --signal-decoders (list)
          A list of information about signal decoders.

          (structure)
              Information about a signal decoder.

              fullyQualifiedName -> (string)
                 The  fully qualified name of a signal decoder as defined in a
                 vehicle model.

              type -> (string)
                 The network protocol for the vehicle. For example, CAN_SIGNAL
                 specifies  a  protocol  that defines how data is communicated
                 between electronic control units (ECUs). OBD_SIGNAL specifies
                 a  protocol that defines how self-diagnostic data is communi-
                 cated between ECUs.

              interfaceId -> (string)
                 The ID of a network interface  that  specifies  what  network
                 protocol a vehicle follows.

              canSignal -> (structure)
                 Information  about  signal  decoder using the Controller Area
                 Network (CAN) protocol.

                 messageId -> (integer)
                     The ID of the message.

                 isBigEndian -> (boolean)
                     Whether the byte ordering of a CAN message is big-endian.

                 isSigned -> (boolean)
                     Whether the message data is specified as a signed value.

                 startBit -> (integer)
                     Indicates the beginning of the CAN  signal.  This  should
                     always be the least significant bit (LSB).

                     This  value  might  be  different from the value in a DBC
                     file. For little endian signals,  startBit  is  the  same
                     value as in the DBC file. For big endian signals in a DBC
                     file, the start bit is the most  significant  bit  (MSB).
                     You will have to calculate the LSB instead and pass it as
                     the startBit .

                 offset -> (double)
                     The offset used to calculate the signal  value.  Combined
                     with  factor, the calculation is value = raw_value * fac-
                     tor + offset .

                 factor -> (double)
                     A multiplier used to decode the CAN message.

                 length -> (integer)
                     How many bytes of data are in the message.

                 name -> (string)
                     The name of the signal.

              obdSignal -> (structure)
                 Information about signal decoder using the On-board  diagnos-
                 tic (OBD) II protocol.

                 pidResponseLength -> (integer)
                     The length of the requested data.

                 serviceMode -> (integer)
                     The mode of operation (diagnostic service) in a message.

                 pid -> (integer)
                     The  diagnostic  code used to request data from a vehicle
                     for this signal.

                 scaling -> (double)
                     A multiplier used to decode the message.

                 offset -> (double)
                     The offset used to calculate the signal  value.  Combined
                     with  scaling,  the  calculation  is  value = raw_value *
                     scaling + offset .

                 startByte -> (integer)
                     Indicates the beginning of the message.

                 byteLength -> (integer)
                     The length of a message.

                 bitRightShift -> (integer)
                     The number of positions to shift bits in the message.

                 bitMaskLength -> (integer)
                     The number of bits to mask in a message.

              messageSignal -> (structure)
                 The decoding information for a specific  message  which  sup-
                 ports higher order data types.

                 topicName -> (string)
                     The  topic name for the message signal. It corresponds to
                     topics in ROS 2.

                 structuredMessage -> (tagged union structure)
                     The structured message for the message signal. It can  be
                     defined with either a primitiveMessageDefinition , struc-
                     turedMessageListDefinition , or  structuredMessageDefini-
                     tion recursively.

                     NOTE:
                        This is a Tagged Union structure. Only one of the fol-
                        lowing top level keys can be set: primitiveMessageDef-
                        inition,    structuredMessageListDefinition,    struc-
                        turedMessageDefinition.

                     primitiveMessageDefinition -> (tagged union structure)
                        Represents a primitive type node of the  complex  data
                        structure.

                        NOTE:
                            This  is a Tagged Union structure. Only one of the
                            following top level keys can  be  set:  ros2Primi-
                            tiveMessageDefinition.

                        ros2PrimitiveMessageDefinition -> (structure)
                            Information about a PrimitiveMessage using a ROS 2
                            compliant primitive type message  of  the  complex
                            data structure.

                            primitiveType -> (string)
                               The  primitive  type  (integer, floating point,
                               boolean, etc.) for the ROS 2 primitive  message
                               definition.

                            offset -> (double)
                               The  offset used to calculate the signal value.
                               Combined with scaling, the calculation is value
                               = raw_value * scaling + offset .

                            scaling -> (double)
                               A multiplier used to decode the message.

                            upperBound -> (long)
                               An  optional  attribute  specifying  the  upper
                               bound for STRING and WSTRING .

                     structuredMessageListDefinition -> (structure)
                        Represents a list type node of the complex data struc-
                        ture.

                        name -> (string)
                            The  name  of  the structured message list defini-
                            tion.

                        memberType -> (tagged union structure)
                            The member type of  the  structured  message  list
                            definition.

                            NOTE:
                               This  is  a Tagged Union structure. Only one of
                               the following top level keys can be set: primi-
                               tiveMessageDefinition,   structuredMessageList-
                               Definition, structuredMessageDefinition.

                            primitiveMessageDefinition -> (tagged union struc-
                            ture)
                               Represents a primitive type node of the complex
                               data structure.

                               NOTE:
                                   This is a Tagged Union structure. Only  one
                                   of the following top level keys can be set:
                                   ros2PrimitiveMessageDefinition.

                               ros2PrimitiveMessageDefinition -> (structure)
                                   Information about a PrimitiveMessage  using
                                   a ROS 2 compliant primitive type message of
                                   the complex data structure.

                                   primitiveType -> (string)
                                      The primitive  type  (integer,  floating
                                      point,  boolean,  etc.)  for  the  ROS 2
                                      primitive message definition.

                                   offset -> (double)
                                      The offset used to calculate the  signal
                                      value. Combined with scaling, the calcu-
                                      lation is value = raw_value * scaling  +
                                      offset .

                                   scaling -> (double)
                                      A multiplier used to decode the message.

                                   upperBound -> (long)
                                      An optional attribute specifying the up-
                                      per bound for STRING and WSTRING .

                            structuredMessageListDefinition -> (structure)
                               Represents a list type node of the complex data
                               structure.

                               name -> (string)
                                   The  name  of  the  structured message list
                                   definition.

                               ( ... recursive ... )listType -> (string)
                                   The type of list of the structured  message
                                   list definition.

                               capacity -> (integer)
                                   The capacity of the structured message list
                                   definition when the list type is  FIXED_CA-
                                   PACITY or DYNAMIC_BOUNDED_CAPACITY .

                            structuredMessageDefinition -> (list)
                               Represents  a  struct  type node of the complex
                               data structure.

                               (structure)
                                   Represents   a   StructureMessageName    to
                                   DataType map element.

                                   fieldName -> (string)
                                      The  field  name  of the structured mes-
                                      sage. It determines how a data value  is
                                      referenced in the target language.

                                   ( ... recursive ... )

                        listType -> (string)
                            The  type  of  list of the structured message list
                            definition.

                        capacity -> (integer)
                            The capacity of the structured message list  defi-
                            nition when the list type is FIXED_CAPACITY or DY-
                            NAMIC_BOUNDED_CAPACITY .

                     structuredMessageDefinition -> (list)
                        Represents a struct type  node  of  the  complex  data
                        structure.

                        (structure)
                            Represents  a StructureMessageName to DataType map
                            element.

                            fieldName -> (string)
                               The field name of the  structured  message.  It
                               determines  how  a  data value is referenced in
                               the target language.

                            dataType -> (tagged union structure)
                               The data type.

                               NOTE:
                                   This is a Tagged Union structure. Only  one
                                   of the following top level keys can be set:
                                   primitiveMessageDefinition,  structuredMes-
                                   sageListDefinition,  structuredMessageDefi-
                                   nition.

                               primitiveMessageDefinition  ->  (tagged   union
                               structure)
                                   Represents  a  primitive  type  node of the
                                   complex data structure.

                                   NOTE:
                                      This is a Tagged Union  structure.  Only
                                      one  of the following top level keys can
                                      be set: ros2PrimitiveMessageDefinition.

                                   ros2PrimitiveMessageDefinition  ->  (struc-
                                   ture)
                                      Information about a PrimitiveMessage us-
                                      ing a ROS  2  compliant  primitive  type
                                      message of the complex data structure.

                                      primitiveType -> (string)
                                          The  primitive type (integer, float-
                                          ing point, boolean,  etc.)  for  the
                                          ROS 2 primitive message definition.

                                      offset -> (double)
                                          The  offset  used  to  calculate the
                                          signal value. Combined with scaling,
                                          the calculation is value = raw_value
                                          * scaling + offset .

                                      scaling -> (double)
                                          A multiplier used to decode the mes-
                                          sage.

                                      upperBound -> (long)
                                          An optional attribute specifying the
                                          upper bound for STRING and WSTRING .

                               structuredMessageListDefinition -> (structure)
                                   Represents a list type node of the  complex
                                   data structure.

                                   name -> (string)
                                      The  name of the structured message list
                                      definition.

                                   ( ... recursive ... )listType -> (string)
                                      The type of list of the structured  mes-
                                      sage list definition.

                                   capacity -> (integer)
                                      The  capacity  of the structured message
                                      list definition when the  list  type  is
                                      FIXED_CAPACITY or DYNAMIC_BOUNDED_CAPAC-
                                      ITY .

                               structuredMessageDefinition -> (list)
                                   Represents a struct type node of  the  com-
                                   plex data structure.

                                   (structure)
                                      Represents   a  StructureMessageName  to
                                      DataType map element.

                                      fieldName -> (string)
                                          The field  name  of  the  structured
                                          message.  It  determines  how a data
                                          value is referenced  in  the  target
                                          language.

                                      ( ... recursive ... )

       JSON Syntax:

          [
            {
              "fullyQualifiedName": "string",
              "type": "CAN_SIGNAL"|"OBD_SIGNAL"|"MESSAGE_SIGNAL"|"CUSTOMER_DECODED_SIGNAL",
              "interfaceId": "string",
              "canSignal": {
                "messageId": integer,
                "isBigEndian": true|false,
                "isSigned": true|false,
                "startBit": integer,
                "offset": double,
                "factor": double,
                "length": integer,
                "name": "string"
              },
              "obdSignal": {
                "pidResponseLength": integer,
                "serviceMode": integer,
                "pid": integer,
                "scaling": double,
                "offset": double,
                "startByte": integer,
                "byteLength": integer,
                "bitRightShift": integer,
                "bitMaskLength": integer
              },
              "messageSignal": {
                "topicName": "string",
                "structuredMessage": {
                  "primitiveMessageDefinition": {
                    "ros2PrimitiveMessageDefinition": {
                      "primitiveType": "BOOL"|"BYTE"|"CHAR"|"FLOAT32"|"FLOAT64"|"INT8"|"UINT8"|"INT16"|"UINT16"|"INT32"|"UINT32"|"INT64"|"UINT64"|"STRING"|"WSTRING",
                      "offset": double,
                      "scaling": double,
                      "upperBound": long
                    }
                  },
                  "structuredMessageListDefinition": {
                    "name": "string",
                    "memberType": {
                      "primitiveMessageDefinition": {
                        "ros2PrimitiveMessageDefinition": {
                          "primitiveType": "BOOL"|"BYTE"|"CHAR"|"FLOAT32"|"FLOAT64"|"INT8"|"UINT8"|"INT16"|"UINT16"|"INT32"|"UINT32"|"INT64"|"UINT64"|"STRING"|"WSTRING",
                          "offset": double,
                          "scaling": double,
                          "upperBound": long
                        }
                      },
                      "structuredMessageListDefinition": {
                        "name": "string",
                        "memberType": { ... recursive ... },
                        "listType": "FIXED_CAPACITY"|"DYNAMIC_UNBOUNDED_CAPACITY"|"DYNAMIC_BOUNDED_CAPACITY",
                        "capacity": integer
                      },
                      "structuredMessageDefinition": [
                        {
                          "fieldName": "string",
                          "dataType": { ... recursive ... }
                        }
                        ...
                      ]
                    },
                    "listType": "FIXED_CAPACITY"|"DYNAMIC_UNBOUNDED_CAPACITY"|"DYNAMIC_BOUNDED_CAPACITY",
                    "capacity": integer
                  },
                  "structuredMessageDefinition": [
                    {
                      "fieldName": "string",
                      "dataType": {
                        "primitiveMessageDefinition": {
                          "ros2PrimitiveMessageDefinition": {
                            "primitiveType": "BOOL"|"BYTE"|"CHAR"|"FLOAT32"|"FLOAT64"|"INT8"|"UINT8"|"INT16"|"UINT16"|"INT32"|"UINT32"|"INT64"|"UINT64"|"STRING"|"WSTRING",
                            "offset": double,
                            "scaling": double,
                            "upperBound": long
                          }
                        },
                        "structuredMessageListDefinition": {
                          "name": "string",
                          "memberType": { ... recursive ... },
                          "listType": "FIXED_CAPACITY"|"DYNAMIC_UNBOUNDED_CAPACITY"|"DYNAMIC_BOUNDED_CAPACITY",
                          "capacity": integer
                        },
                        "structuredMessageDefinition": [
                          {
                            "fieldName": "string",
                            "dataType": { ... recursive ... }
                          }
                          ...
                        ]
                      }
                    }
                    ...
                  ]
                }
              }
            }
            ...
          ]

       --network-interfaces (list)
          A list of information about available network interfaces.

          (structure)
              Represents a node and its specifications in an in-vehicle commu-
              nication network. All signal decoders must be associated with  a
              network node.

              To  return  this  information  about  all the network interfaces
              specified in a decoder manifest, use the API operation.

              interfaceId -> (string)
                 The ID of the network interface.

              type -> (string)
                 The network protocol for the vehicle. For example, CAN_SIGNAL
                 specifies  a  protocol  that defines how data is communicated
                 between electronic control units (ECUs). OBD_SIGNAL specifies
                 a  protocol that defines how self-diagnostic data is communi-
                 cated between ECUs.

              canInterface -> (structure)
                 Information about a network interface specified by  the  Con-
                 troller Area Network (CAN) protocol.

                 name -> (string)
                     The unique name of the interface.

                 protocolName -> (string)
                     The name of the communication protocol for the interface.

                 protocolVersion -> (string)
                     The  version of the communication protocol for the inter-
                     face.

              obdInterface -> (structure)
                 Information  about  a  network  interface  specified  by  the
                 On-board diagnostic (OBD) II protocol.

                 name -> (string)
                     The name of the interface.

                 requestMessageId -> (integer)
                     The ID of the message requesting vehicle data.

                 obdStandard -> (string)
                     The standard OBD II PID.

                 pidRequestIntervalSeconds -> (integer)
                     The maximum number message requests per second.

                 dtcRequestIntervalSeconds -> (integer)
                     The  maximum number message requests per diagnostic trou-
                     ble code per second.

                 useExtendedIds -> (boolean)
                     Whether to use extended IDs in the message.

                 hasTransmissionEcu -> (boolean)
                     Whether the vehicle has  a  transmission  control  module
                     (TCM).

              vehicleMiddleware -> (structure)
                 The  vehicle  middleware  defined as a type of network inter-
                 face. Examples of vehicle middleware include ROS2 and SOME/IP
                 .

                 name -> (string)
                     The name of the vehicle middleware.

                 protocolName -> (string)
                     The protocol name of the vehicle middleware.

       Shorthand Syntax:

          interfaceId=string,type=string,canInterface={name=string,protocolName=string,protocolVersion=string},obdInterface={name=string,requestMessageId=integer,obdStandard=string,pidRequestIntervalSeconds=integer,dtcRequestIntervalSeconds=integer,useExtendedIds=boolean,hasTransmissionEcu=boolean},vehicleMiddleware={name=string,protocolName=string} ...

       JSON Syntax:

          [
            {
              "interfaceId": "string",
              "type": "CAN_INTERFACE"|"OBD_INTERFACE"|"VEHICLE_MIDDLEWARE"|"CUSTOMER_DECODED_INTERFACE",
              "canInterface": {
                "name": "string",
                "protocolName": "string",
                "protocolVersion": "string"
              },
              "obdInterface": {
                "name": "string",
                "requestMessageId": integer,
                "obdStandard": "string",
                "pidRequestIntervalSeconds": integer,
                "dtcRequestIntervalSeconds": integer,
                "useExtendedIds": true|false,
                "hasTransmissionEcu": true|false
              },
              "vehicleMiddleware": {
                "name": "string",
                "protocolName": "ROS_2"
              }
            }
            ...
          ]

       --tags (list)
          Metadata that can be used to manage the decoder manifest.

          (structure)
              A set of key/value pairs that are used to manage the resource.

              Key -> (string)
                 The tag's key.

              Value -> (string)
                 The tag's value.

       Shorthand Syntax:

          Key=string,Value=string ...

       JSON Syntax:

          [
            {
              "Key": "string",
              "Value": "string"
            }
            ...
          ]

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

OUTPUT
       name -> (string)
          The name of the created decoder manifest.

       arn -> (string)
          The ARN of the created decoder manifest.



                                                     CREATE-DECODER-MANIFEST()
