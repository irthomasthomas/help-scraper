UPDATE-DECODER-MANIFEST()                            UPDATE-DECODER-MANIFEST()



NAME
       update-decoder-manifest -

DESCRIPTION
       Updates a decoder manifest.

       A  decoder manifest can only be updated when the status is DRAFT . Only
       ACTIVE decoder manifests can be associated with vehicles.

       See also: AWS API Documentation

SYNOPSIS
            update-decoder-manifest
          --name <value>
          [--description <value>]
          [--signal-decoders-to-add <value>]
          [--signal-decoders-to-update <value>]
          [--signal-decoders-to-remove <value>]
          [--network-interfaces-to-add <value>]
          [--network-interfaces-to-update <value>]
          [--network-interfaces-to-remove <value>]
          [--status <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --name (string)
          The name of the decoder manifest to update.

       --description (string)
          A brief description of the decoder manifest to update.

       --signal-decoders-to-add (list)
          A list of information about decoding additional signals  to  add  to
          the decoder manifest.

          (structure)
              Information about a signal decoder.

              fullyQualifiedName -> (string)
                 The  fully qualified name of a signal decoder as defined in a
                 vehicle model.

              type -> (string)
                 The network protocol for the vehicle. For example, CAN_SIGNAL
                 specifies  a  protocol  that defines how data is communicated
                 between electronic control units (ECUs). OBD_SIGNAL specifies
                 a  protocol that defines how self-diagnostic data is communi-
                 cated between ECUs.

              interfaceId -> (string)
                 The ID of a network interface  that  specifies  what  network
                 protocol a vehicle follows.

              canSignal -> (structure)
                 Information  about  signal  decoder using the Controller Area
                 Network (CAN) protocol.

                 messageId -> (integer)
                     The ID of the message.

                 isBigEndian -> (boolean)
                     Whether the byte ordering of a CAN message is big-endian.

                 isSigned -> (boolean)
                     Whether the message data is specified as a signed value.

                 startBit -> (integer)
                     Indicates the beginning of the CAN  signal.  This  should
                     always be the least significant bit (LSB).

                     This  value  might  be  different from the value in a DBC
                     file. For little endian signals,  startBit  is  the  same
                     value as in the DBC file. For big endian signals in a DBC
                     file, the start bit is the most  significant  bit  (MSB).
                     You will have to calculate the LSB instead and pass it as
                     the startBit .

                 offset -> (double)
                     The offset used to calculate the signal  value.  Combined
                     with  factor, the calculation is value = raw_value * fac-
                     tor + offset .

                 factor -> (double)
                     A multiplier used to decode the CAN message.

                 length -> (integer)
                     How many bytes of data are in the message.

                 name -> (string)
                     The name of the signal.

              obdSignal -> (structure)
                 Information about signal decoder using the On-board  diagnos-
                 tic (OBD) II protocol.

                 pidResponseLength -> (integer)
                     The length of the requested data.

                 serviceMode -> (integer)
                     The mode of operation (diagnostic service) in a message.

                 pid -> (integer)
                     The  diagnostic  code used to request data from a vehicle
                     for this signal.

                 scaling -> (double)
                     A multiplier used to decode the message.

                 offset -> (double)
                     The offset used to calculate the signal  value.  Combined
                     with  scaling,  the  calculation  is  value = raw_value *
                     scaling + offset .

                 startByte -> (integer)
                     Indicates the beginning of the message.

                 byteLength -> (integer)
                     The length of a message.

                 bitRightShift -> (integer)
                     The number of positions to shift bits in the message.

                 bitMaskLength -> (integer)
                     The number of bits to mask in a message.

       Shorthand Syntax:

          fullyQualifiedName=string,type=string,interfaceId=string,canSignal={messageId=integer,isBigEndian=boolean,isSigned=boolean,startBit=integer,offset=double,factor=double,length=integer,name=string},obdSignal={pidResponseLength=integer,serviceMode=integer,pid=integer,scaling=double,offset=double,startByte=integer,byteLength=integer,bitRightShift=integer,bitMaskLength=integer} ...

       JSON Syntax:

          [
            {
              "fullyQualifiedName": "string",
              "type": "CAN_SIGNAL"|"OBD_SIGNAL",
              "interfaceId": "string",
              "canSignal": {
                "messageId": integer,
                "isBigEndian": true|false,
                "isSigned": true|false,
                "startBit": integer,
                "offset": double,
                "factor": double,
                "length": integer,
                "name": "string"
              },
              "obdSignal": {
                "pidResponseLength": integer,
                "serviceMode": integer,
                "pid": integer,
                "scaling": double,
                "offset": double,
                "startByte": integer,
                "byteLength": integer,
                "bitRightShift": integer,
                "bitMaskLength": integer
              }
            }
            ...
          ]

       --signal-decoders-to-update (list)
          A list of updated information about decoding signals  to  update  in
          the decoder manifest.

          (structure)
              Information about a signal decoder.

              fullyQualifiedName -> (string)
                 The  fully qualified name of a signal decoder as defined in a
                 vehicle model.

              type -> (string)
                 The network protocol for the vehicle. For example, CAN_SIGNAL
                 specifies  a  protocol  that defines how data is communicated
                 between electronic control units (ECUs). OBD_SIGNAL specifies
                 a  protocol that defines how self-diagnostic data is communi-
                 cated between ECUs.

              interfaceId -> (string)
                 The ID of a network interface  that  specifies  what  network
                 protocol a vehicle follows.

              canSignal -> (structure)
                 Information  about  signal  decoder using the Controller Area
                 Network (CAN) protocol.

                 messageId -> (integer)
                     The ID of the message.

                 isBigEndian -> (boolean)
                     Whether the byte ordering of a CAN message is big-endian.

                 isSigned -> (boolean)
                     Whether the message data is specified as a signed value.

                 startBit -> (integer)
                     Indicates the beginning of the CAN  signal.  This  should
                     always be the least significant bit (LSB).

                     This  value  might  be  different from the value in a DBC
                     file. For little endian signals,  startBit  is  the  same
                     value as in the DBC file. For big endian signals in a DBC
                     file, the start bit is the most  significant  bit  (MSB).
                     You will have to calculate the LSB instead and pass it as
                     the startBit .

                 offset -> (double)
                     The offset used to calculate the signal  value.  Combined
                     with  factor, the calculation is value = raw_value * fac-
                     tor + offset .

                 factor -> (double)
                     A multiplier used to decode the CAN message.

                 length -> (integer)
                     How many bytes of data are in the message.

                 name -> (string)
                     The name of the signal.

              obdSignal -> (structure)
                 Information about signal decoder using the On-board  diagnos-
                 tic (OBD) II protocol.

                 pidResponseLength -> (integer)
                     The length of the requested data.

                 serviceMode -> (integer)
                     The mode of operation (diagnostic service) in a message.

                 pid -> (integer)
                     The  diagnostic  code used to request data from a vehicle
                     for this signal.

                 scaling -> (double)
                     A multiplier used to decode the message.

                 offset -> (double)
                     The offset used to calculate the signal  value.  Combined
                     with  scaling,  the  calculation  is  value = raw_value *
                     scaling + offset .

                 startByte -> (integer)
                     Indicates the beginning of the message.

                 byteLength -> (integer)
                     The length of a message.

                 bitRightShift -> (integer)
                     The number of positions to shift bits in the message.

                 bitMaskLength -> (integer)
                     The number of bits to mask in a message.

       Shorthand Syntax:

          fullyQualifiedName=string,type=string,interfaceId=string,canSignal={messageId=integer,isBigEndian=boolean,isSigned=boolean,startBit=integer,offset=double,factor=double,length=integer,name=string},obdSignal={pidResponseLength=integer,serviceMode=integer,pid=integer,scaling=double,offset=double,startByte=integer,byteLength=integer,bitRightShift=integer,bitMaskLength=integer} ...

       JSON Syntax:

          [
            {
              "fullyQualifiedName": "string",
              "type": "CAN_SIGNAL"|"OBD_SIGNAL",
              "interfaceId": "string",
              "canSignal": {
                "messageId": integer,
                "isBigEndian": true|false,
                "isSigned": true|false,
                "startBit": integer,
                "offset": double,
                "factor": double,
                "length": integer,
                "name": "string"
              },
              "obdSignal": {
                "pidResponseLength": integer,
                "serviceMode": integer,
                "pid": integer,
                "scaling": double,
                "offset": double,
                "startByte": integer,
                "byteLength": integer,
                "bitRightShift": integer,
                "bitMaskLength": integer
              }
            }
            ...
          ]

       --signal-decoders-to-remove (list)
          A list of signal decoders to remove from the decoder manifest.

          (string)

       Syntax:

          "string" "string" ...

       --network-interfaces-to-add (list)
          A list of information about the network interfaces to add to the de-
          coder manifest.

          (structure)
              Represents a node and its specifications in an in-vehicle commu-
              nication network. All signal decoders must be associated with  a
              network node.

              To  return  this  information  about  all the network interfaces
              specified in a decoder manifest, use the API operation.

              interfaceId -> (string)
                 The ID of the network interface.

              type -> (string)
                 The network protocol for the vehicle. For example, CAN_SIGNAL
                 specifies  a  protocol  that defines how data is communicated
                 between electronic control units (ECUs). OBD_SIGNAL specifies
                 a  protocol that defines how self-diagnostic data is communi-
                 cated between ECUs.

              canInterface -> (structure)
                 Information about a network interface specified by  the  Con-
                 troller Area Network (CAN) protocol.

                 name -> (string)
                     The unique name of the interface.

                 protocolName -> (string)
                     The name of the communication protocol for the interface.

                 protocolVersion -> (string)
                     The  version of the communication protocol for the inter-
                     face.

              obdInterface -> (structure)
                 Information  about  a  network  interface  specified  by  the
                 On-board diagnostic (OBD) II protocol.

                 name -> (string)
                     The name of the interface.

                 requestMessageId -> (integer)
                     The ID of the message requesting vehicle data.

                 obdStandard -> (string)
                     The standard OBD II PID.

                 pidRequestIntervalSeconds -> (integer)
                     The maximum number message requests per second.

                 dtcRequestIntervalSeconds -> (integer)
                     The  maximum number message requests per diagnostic trou-
                     ble code per second.

                 useExtendedIds -> (boolean)
                     Whether to use extended IDs in the message.

                 hasTransmissionEcu -> (boolean)
                     Whether the vehicle has  a  transmission  control  module
                     (TCM).

       Shorthand Syntax:

          interfaceId=string,type=string,canInterface={name=string,protocolName=string,protocolVersion=string},obdInterface={name=string,requestMessageId=integer,obdStandard=string,pidRequestIntervalSeconds=integer,dtcRequestIntervalSeconds=integer,useExtendedIds=boolean,hasTransmissionEcu=boolean} ...

       JSON Syntax:

          [
            {
              "interfaceId": "string",
              "type": "CAN_INTERFACE"|"OBD_INTERFACE",
              "canInterface": {
                "name": "string",
                "protocolName": "string",
                "protocolVersion": "string"
              },
              "obdInterface": {
                "name": "string",
                "requestMessageId": integer,
                "obdStandard": "string",
                "pidRequestIntervalSeconds": integer,
                "dtcRequestIntervalSeconds": integer,
                "useExtendedIds": true|false,
                "hasTransmissionEcu": true|false
              }
            }
            ...
          ]

       --network-interfaces-to-update (list)
          A  list of information about the network interfaces to update in the
          decoder manifest.

          (structure)
              Represents a node and its specifications in an in-vehicle commu-
              nication  network. All signal decoders must be associated with a
              network node.

              To return this information  about  all  the  network  interfaces
              specified in a decoder manifest, use the API operation.

              interfaceId -> (string)
                 The ID of the network interface.

              type -> (string)
                 The network protocol for the vehicle. For example, CAN_SIGNAL
                 specifies a protocol that defines how  data  is  communicated
                 between electronic control units (ECUs). OBD_SIGNAL specifies
                 a protocol that defines how self-diagnostic data is  communi-
                 cated between ECUs.

              canInterface -> (structure)
                 Information  about  a network interface specified by the Con-
                 troller Area Network (CAN) protocol.

                 name -> (string)
                     The unique name of the interface.

                 protocolName -> (string)
                     The name of the communication protocol for the interface.

                 protocolVersion -> (string)
                     The version of the communication protocol for the  inter-
                     face.

              obdInterface -> (structure)
                 Information  about  a  network  interface  specified  by  the
                 On-board diagnostic (OBD) II protocol.

                 name -> (string)
                     The name of the interface.

                 requestMessageId -> (integer)
                     The ID of the message requesting vehicle data.

                 obdStandard -> (string)
                     The standard OBD II PID.

                 pidRequestIntervalSeconds -> (integer)
                     The maximum number message requests per second.

                 dtcRequestIntervalSeconds -> (integer)
                     The maximum number message requests per diagnostic  trou-
                     ble code per second.

                 useExtendedIds -> (boolean)
                     Whether to use extended IDs in the message.

                 hasTransmissionEcu -> (boolean)
                     Whether  the  vehicle  has  a transmission control module
                     (TCM).

       Shorthand Syntax:

          interfaceId=string,type=string,canInterface={name=string,protocolName=string,protocolVersion=string},obdInterface={name=string,requestMessageId=integer,obdStandard=string,pidRequestIntervalSeconds=integer,dtcRequestIntervalSeconds=integer,useExtendedIds=boolean,hasTransmissionEcu=boolean} ...

       JSON Syntax:

          [
            {
              "interfaceId": "string",
              "type": "CAN_INTERFACE"|"OBD_INTERFACE",
              "canInterface": {
                "name": "string",
                "protocolName": "string",
                "protocolVersion": "string"
              },
              "obdInterface": {
                "name": "string",
                "requestMessageId": integer,
                "obdStandard": "string",
                "pidRequestIntervalSeconds": integer,
                "dtcRequestIntervalSeconds": integer,
                "useExtendedIds": true|false,
                "hasTransmissionEcu": true|false
              }
            }
            ...
          ]

       --network-interfaces-to-remove (list)
          A list of network interfaces to remove from the decoder manifest.

          (string)

       Syntax:

          "string" "string" ...

       --status (string)
          The state of the decoder manifest. If the status is ACTIVE , the de-
          coder  manifest  can't  be  edited. If the status is DRAFT , you can
          edit the decoder manifest.

          Possible values:

          o ACTIVE

          o DRAFT

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

OUTPUT
       name -> (string)
          The name of the updated decoder manifest.

       arn -> (string)
          The Amazon Resource Name (ARN) of the updated decoder manifest.



                                                     UPDATE-DECODER-MANIFEST()
