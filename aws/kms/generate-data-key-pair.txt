GENERATE-DATA-KEY-PAIR()                              GENERATE-DATA-KEY-PAIR()



NAME
       generate-data-key-pair -

DESCRIPTION
       Returns  a unique asymmetric data key pair for use outside of KMS. This
       operation returns a plaintext public key, a plaintext private key,  and
       a copy of the private key that is encrypted under the symmetric encryp-
       tion KMS key you specify. You can use the  data  key  pair  to  perform
       asymmetric  cryptography  and  implement  digital signatures outside of
       KMS. The bytes in the keys are random; they  are  not  related  to  the
       caller or to the KMS key that is used to encrypt the private key.

       You  can use the public key that GenerateDataKeyPair returns to encrypt
       data or verify a signature outside of KMS. Then,  store  the  encrypted
       private key with the data. When you are ready to decrypt data or sign a
       message, you can use the  Decrypt operation to  decrypt  the  encrypted
       private key.

       To  generate  a  data key pair, you must specify a symmetric encryption
       KMS key to encrypt the private key in a data key pair. You  cannot  use
       an  asymmetric  KMS  key or a KMS key in a custom key store. To get the
       type and origin of your KMS key, use the  DescribeKey operation.

       Use the KeyPairSpec parameter to choose an RSA or Elliptic Curve  (ECC)
       data  key  pair.  In China Regions, you can also choose an SM2 data key
       pair. KMS recommends that you use ECC key pairs for  signing,  and  use
       RSA  and  SM2 key pairs for either encryption or signing, but not both.
       However, KMS cannot enforce any restrictions on the  use  of  data  key
       pairs outside of KMS.

       If  you  are using the data key pair to encrypt data, or for any opera-
       tion where you don't immediately need a private key, consider using the
       GenerateDataKeyPairWithoutPlaintext operation. GenerateDataKeyPairWith-
       outPlaintext returns a plaintext public key and  an  encrypted  private
       key,  but omits the plaintext private key that you need only to decrypt
       ciphertext or sign a message. Later, when you need to decrypt the  data
       or  sign a message, use the  Decrypt operation to decrypt the encrypted
       private key in the data key pair.
          GenerateDataKeyPair returns a unique data key pair for each request.
          The bytes in the keys are random; they are not related to the caller
          or the KMS key that is used to encrypt the private key.  The  public
          key is a DER-encoded X.509 SubjectPublicKeyInfo, as specified in RFC
          5280 . The private key is a  DER-encoded  PKCS8  PrivateKeyInfo,  as
          specified in RFC 5958 .

          GenerateDataKeyPair also supports Amazon Web Services Nitro Enclaves
          , which provide an isolated compute environment in  Amazon  EC2.  To
          call  GenerateDataKeyPair  for an Amazon Web Services Nitro enclave,
          use the Amazon Web Services Nitro Enclaves SDK  or  any  Amazon  Web
          Services SDK. Use the Recipient parameter to provide the attestation
          document for the enclave.  GenerateDataKeyPair  returns  the  public
          data  key  and  a  copy  of the private data key encrypted under the
          specified KMS key, as usual. But instead of a plaintext copy of  the
          private  data  key  (PrivateKeyPlaintext  ), the response includes a
          copy of the private data key encrypted under the public key from the
          attestation  document  (CiphertextForRecipient  ).  For  information
          about the interaction between KMS and Amazon Web Services Nitro  En-
          claves,  see  How Amazon Web Services Nitro Enclaves uses KMS in the
          Key Management Service Developer Guide ..

       You can use an optional encryption context to add  additional  security
       to  the encryption operation. If you specify an EncryptionContext , you
       must specify the same encryption context (a case-sensitive exact match)
       when  decrypting  the encrypted data key. Otherwise, the request to de-
       crypt fails with an InvalidCiphertextException . For more  information,
       see Encryption Context in the Key Management Service Developer Guide .

       The KMS key that you use for this operation must be in a compatible key
       state. For details, see Key states of KMS keys in  the  Key  Management
       Service Developer Guide .
          Cross-account use : Yes. To perform this operation with a KMS key in
          a different Amazon Web Services account,  specify  the  key  ARN  or
          alias ARN in the value of the KeyId parameter.

          Required permissions : kms:GenerateDataKeyPair (key policy)

          Related operations:

       o Decrypt

       o Encrypt

       o GenerateDataKey

       o GenerateDataKeyPairWithoutPlaintext

       o GenerateDataKeyWithoutPlaintext
          Eventual  consistency  : The KMS API follows an eventual consistency
          model. For more information, see KMS eventual consistency .

       See also: AWS API Documentation

SYNOPSIS
            generate-data-key-pair
          [--encryption-context <value>]
          --key-id <value>
          --key-pair-spec <value>
          [--grant-tokens <value>]
          [--recipient <value>]
          [--dry-run | --no-dry-run]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --encryption-context (map)
          Specifies the encryption context that will be used  when  encrypting
          the private key in the data key pair.

          WARNING:
              Do  not  include  confidential  or sensitive information in this
              field. This field may be displayed in  plaintext  in  CloudTrail
              logs and other output.

          An  encryption context is a collection of non-secret key-value pairs
          that represent additional authenticated data. When you  use  an  en-
          cryption  context to encrypt data, you must specify the same (an ex-
          act case-sensitive match) encryption context to decrypt the data. An
          encryption  context  is  supported only on operations with symmetric
          encryption KMS keys. On operations  with  symmetric  encryption  KMS
          keys,  an  encryption context is optional, but it is strongly recom-
          mended.

          For more information, see Encryption context in the  Key  Management
          Service Developer Guide .

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --key-id (string)
          Specifies the symmetric encryption KMS key that encrypts the private
          key in the data key pair. You cannot specify an asymmetric  KMS  key
          or  a  KMS  key in a custom key store. To get the type and origin of
          your KMS key, use the  DescribeKey operation.

          To specify a KMS key, use its key ID, key ARN, alias name, or  alias
          ARN.  When using an alias name, prefix it with "alias/" . To specify
          a KMS key in a different Amazon Web Services account, you  must  use
          the key ARN or alias ARN.

          For example:

          o Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab

          o Key                                                           ARN:
            arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab

          o Alias name: alias/ExampleAlias

          o Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias

          To  get  the key ID and key ARN for a KMS key, use  ListKeys or  De-
          scribeKey . To get the alias name and alias ARN, use  ListAliases .

       --key-pair-spec (string)
          Determines the type of data key pair that is generated.

          The KMS rule that restricts the use of asymmetric RSA  and  SM2  KMS
          keys  to  encrypt  and decrypt or to sign and verify (but not both),
          and the rule that permits you to use ECC KMS keys only to  sign  and
          verify,  are not effective on data key pairs, which are used outside
          of KMS. The SM2 key spec is only available in China Regions.

          Possible values:

          o RSA_2048

          o RSA_3072

          o RSA_4096

          o ECC_NIST_P256

          o ECC_NIST_P384

          o ECC_NIST_P521

          o ECC_SECG_P256K1

          o SM2

       --grant-tokens (list)
          A list of grant tokens.

          Use a grant token when your permission to call this operation  comes
          from  a  new  grant that has not yet achieved eventual consistency .
          For more information, see Grant token and Using a grant token in the
          Key Management Service Developer Guide .

          (string)

       Syntax:

          "string" "string" ...

       --recipient (structure)
          A  signed attestation document from an Amazon Web Services Nitro en-
          clave and the encryption algorithm to use with the enclave's  public
          key. The only valid encryption algorithm is RSAES_OAEP_SHA_256 .

          This  parameter  only  supports attestation documents for Amazon Web
          Services Nitro Enclaves. To call DeriveSharedSecret  for  an  Amazon
          Web  Services  Nitro Enclaves, use the Amazon Web Services Nitro En-
          claves SDK to generate the attestation document and then use the Re-
          cipient  parameter  from  any Amazon Web Services SDK to provide the
          attestation document for the enclave.

          When you use this parameter, instead of returning a  plaintext  copy
          of the private data key, KMS encrypts the plaintext private data key
          under the public key in the attestation document,  and  returns  the
          resulting  ciphertext in the CiphertextForRecipient field in the re-
          sponse. This ciphertext can be decrypted only with the  private  key
          in  the enclave. The CiphertextBlob field in the response contains a
          copy of the private data key encrypted under the KMS  key  specified
          by  the  KeyId  parameter.  The PrivateKeyPlaintext field in the re-
          sponse is null or empty.

          For information about the interaction between  KMS  and  Amazon  Web
          Services  Nitro Enclaves, see How Amazon Web Services Nitro Enclaves
          uses KMS in the Key Management Service Developer Guide .

          KeyEncryptionAlgorithm -> (string)
              The encryption algorithm that KMS should use with the public key
              for  an  Amazon  Web Services Nitro Enclave to encrypt plaintext
              values   for   the   response.   The   only   valid   value   is
              RSAES_OAEP_SHA_256 .

          AttestationDocument -> (blob)
              The  attestation  document  for an Amazon Web Services Nitro En-
              clave. This document includes the enclave's public key.

       Shorthand Syntax:

          KeyEncryptionAlgorithm=string,AttestationDocument=blob

       JSON Syntax:

          {
            "KeyEncryptionAlgorithm": "RSAES_OAEP_SHA_256",
            "AttestationDocument": blob
          }

       --dry-run | --no-dry-run (boolean)
          Checks if your request will succeed. DryRun is an  optional  parame-
          ter.

          To  learn more about how to use this parameter, see Testing your KMS
          API calls in the Key Management Service Developer Guide .

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable  automatic pagination. If automatic pagination is disabled, the
       AWS CLI will only make one call, for the first page of results.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

EXAMPLES
       NOTE:
          To use the following examples, you must have the AWS  CLI  installed
          and  configured.  See  the Getting started guide in the AWS CLI User
          Guide for more information.

          Unless otherwise  stated,  all  examples  have  unix-like  quotation
          rules.  These  examples  will  need to be adapted to your terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To generate an 2048-bit RSA asymmetric data key pair

       The  following  generate-data-key-pair  example requests a 2048-bit RSA
       asymmetric data key pair for use outside of AWS. The command returns  a
       plaintext  public key and a plaintext private key for immediate use and
       deletion, and a copy of the private key encrypted under  the  specified
       KMS  key.  You  can safely store the encrypted private key with the en-
       crypted data.

       To  request  a  2048-bit  RSA  asymmetric  data  key  pair,   use   the
       key-pair-spec parameter with a value of RSA_2048.

       The  KMS  key  you specify must be a symmetric encryption KMS key, that
       is, a KMS key with a KeySpec value of SYMMETRIC_DEFAULT.

       NOTE: The values in the output of this example are truncated  for  dis-
       play.

          aws kms generate-data-key-pair \
              --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \
              --key-pair-spec RSA_2048

       Output:

          {
              "PrivateKeyCiphertextBlob": "AQIDAHi6LtupRpdKl2aJTzkK6FbhOtQkMlQJJH3PdtHvS/y+hAFFxmiD134doUDzMGmfCEtcAAAHaTCCB2UGCSqGSIb3DQEHBqCCB1...",
              "PrivateKeyPlaintext": "MIIG/QIBADANBgkqhkiG9w0BAQEFAASCBucwggbjAgEAAoIBgQDcDd4YzI+u9Kfv4t2UkTWhShBXkekS4cBVt07I0P42ZgMf+YvU5IgS4ut...",
              "PublicKey": "MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEA3A3eGMyPrvSn7+LdlJE1oUoQV5HpEuHAVbdOyND+NmYDH/mL1OSIEuLrcdZ5hrMH4pk83r40l...",
              "KeyId": "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab",
              "KeyPairSpec": "RSA_2048"
          }

       The  PublicKey,  PrivateKeyPlaintext,  and PrivateKeyCiphertextBlob are
       returned in base64-encoded format.

       For more information, see Data key pairs in the AWS Key Management Ser-
       vice Developer Guide.

OUTPUT
       PrivateKeyCiphertextBlob -> (blob)
          The  encrypted copy of the private key. When you use the HTTP API or
          the Amazon Web Services CLI, the value is Base64-encoded. Otherwise,
          it is not Base64-encoded.

       PrivateKeyPlaintext -> (blob)
          The  plaintext copy of the private key. When you use the HTTP API or
          the Amazon Web Services CLI, the value is Base64-encoded. Otherwise,
          it is not Base64-encoded.

          If  the response includes the CiphertextForRecipient field, the Pri-
          vateKeyPlaintext field is null or empty.

       PublicKey -> (blob)
          The public key (in plaintext). When you use the HTTP API or the Ama-
          zon  Web Services CLI, the value is Base64-encoded. Otherwise, it is
          not Base64-encoded.

       KeyId -> (string)
          The Amazon Resource Name (key ARN ) of the KMS  key  that  encrypted
          the private key.

       KeyPairSpec -> (string)
          The type of data key pair that was generated.

       CiphertextForRecipient -> (blob)
          The  plaintext  private  data key encrypted with the public key from
          the Nitro enclave. This ciphertext can be decrypted only by using  a
          private key in the Nitro enclave.

          This  field  is included in the response only when the Recipient pa-
          rameter in the request includes a valid attestation document from an
          Amazon  Web Services Nitro enclave. For information about the inter-
          action between KMS and Amazon Web Services Nitro Enclaves,  see  How
          Amazon  Web  Services  Nitro Enclaves uses KMS in the Key Management
          Service Developer Guide .



                                                      GENERATE-DATA-KEY-PAIR()
