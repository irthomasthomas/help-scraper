DECRYPT()                                                            DECRYPT()



NAME
       decrypt -

DESCRIPTION
       Decrypts  ciphertext  that  was encrypted by a KMS key using any of the
       following operations:

       o Encrypt

       o GenerateDataKey

       o GenerateDataKeyPair

       o GenerateDataKeyWithoutPlaintext

       o GenerateDataKeyPairWithoutPlaintext

       You can use this operation to decrypt ciphertext that was encrypted un-
       der a symmetric encryption KMS key or an asymmetric encryption KMS key.
       When the KMS key is asymmetric, you must specify the KMS  key  and  the
       encryption  algorithm  that was used to encrypt the ciphertext. For in-
       formation about asymmetric KMS keys, see Asymmetric KMS keys in the Key
       Management Service Developer Guide .

       The  Decrypt operation also decrypts ciphertext that was encrypted out-
       side of KMS by the public key in an KMS asymmetric KMS key. However, it
       cannot  decrypt  symmetric ciphertext produced by other libraries, such
       as the Amazon Web Services Encryption SDK or Amazon S3 client-side  en-
       cryption . These libraries return a ciphertext format that is incompat-
       ible with KMS.

       If the ciphertext was encrypted under a symmetric encryption  KMS  key,
       the  KeyId  parameter  is  optional.  KMS can get this information from
       metadata that it adds to the symmetric ciphertext  blob.  This  feature
       adds  durability  to  your  implementation  by ensuring that authorized
       users can decrypt ciphertext decades after it was  encrypted,  even  if
       they've  lost  track  of the key ID. However, specifying the KMS key is
       always recommended as a best practice. When you use the KeyId parameter
       to specify a KMS key, KMS only uses the KMS key you specify. If the ci-
       phertext was encrypted under a different KMS key, the Decrypt operation
       fails. This practice ensures that you use the KMS key that you intend.

       Whenever  possible,  use  key policies to give users permission to call
       the Decrypt operation on a particular KMS key,  instead  of  using  IAM
       policies. Otherwise, you might create an IAM user policy that gives the
       user Decrypt permission on all KMS keys. This user  could  decrypt  ci-
       phertext  that  was  encrypted by KMS keys in other accounts if the key
       policy for the cross-account KMS key permits it. If you must use an IAM
       policy  for  Decrypt permissions, limit the user to particular KMS keys
       or particular trusted accounts. For details, see Best practices for IAM
       policies in the Key Management Service Developer Guide .

       Applications in Amazon Web Services Nitro Enclaves can call this opera-
       tion by using the Amazon Web Services Nitro Enclaves Development Kit  .
       For  information  about  the  supporting parameters, see How Amazon Web
       Services Nitro Enclaves use KMS in the Key Management Service Developer
       Guide .

       The KMS key that you use for this operation must be in a compatible key
       state. For details, see Key states of KMS keys in  the  Key  Management
       Service Developer Guide .
          Cross-account use : Yes. To perform this operation with a KMS key in
          a different Amazon Web Services account,  specify  the  key  ARN  or
          alias ARN in the value of the KeyId parameter.

          Required permissions : kms:Decrypt (key policy)

          Related operations:

       o Encrypt

       o GenerateDataKey

       o GenerateDataKeyPair

       o ReEncrypt

       See also: AWS API Documentation

SYNOPSIS
            decrypt
          --ciphertext-blob <value>
          [--encryption-context <value>]
          [--grant-tokens <value>]
          [--key-id <value>]
          [--encryption-algorithm <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --ciphertext-blob (blob)
          Ciphertext to be decrypted. The blob includes metadata.

       --encryption-context (map)
          Specifies the encryption context to use when decrypting the data. An
          encryption context is valid only for cryptographic operations with a
          symmetric encryption KMS key. The standard asymmetric encryption al-
          gorithms and HMAC algorithms that KMS uses do not support an encryp-
          tion context.

          An  encryption context is a collection of non-secret key-value pairs
          that represent additional authenticated data. When you  use  an  en-
          cryption  context to encrypt data, you must specify the same (an ex-
          act case-sensitive match) encryption context to decrypt the data. An
          encryption  context  is  supported only on operations with symmetric
          encryption KMS keys. On operations  with  symmetric  encryption  KMS
          keys,  an  encryption context is optional, but it is strongly recom-
          mended.

          For more information, see Encryption context in the  Key  Management
          Service Developer Guide .

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --grant-tokens (list)
          A list of grant tokens.

          Use  a grant token when your permission to call this operation comes
          from a new grant that has not yet achieved  eventual  consistency  .
          For more information, see Grant token and Using a grant token in the
          Key Management Service Developer Guide .

          (string)

       Syntax:

          "string" "string" ...

       --key-id (string)
          Specifies the KMS key that KMS uses to decrypt the ciphertext.

          Enter a key ID of the KMS key that was used to encrypt  the  cipher-
          text.  If  you  identify  a different KMS key, the Decrypt operation
          throws an IncorrectKeyException .

          This parameter is required only when the  ciphertext  was  encrypted
          under  an asymmetric KMS key. If you used a symmetric encryption KMS
          key, KMS can get the KMS key from metadata that it adds to the  sym-
          metric  ciphertext blob. However, it is always recommended as a best
          practice. This practice ensures that you use the KMS  key  that  you
          intend.

          To  specify a KMS key, use its key ID, key ARN, alias name, or alias
          ARN. When using an alias name, prefix it with "alias/" . To  specify
          a  KMS  key in a different Amazon Web Services account, you must use
          the key ARN or alias ARN.

          For example:

          o Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab

          o Key                                                           ARN:
            arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab

          o Alias name: alias/ExampleAlias

          o Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias

          To get the key ID and key ARN for a KMS key, use  ListKeys  or   De-
          scribeKey . To get the alias name and alias ARN, use  ListAliases .

       --encryption-algorithm (string)
          Specifies  the encryption algorithm that will be used to decrypt the
          ciphertext. Specify the same algorithm that was used to encrypt  the
          data.  If  you  specify a different algorithm, the Decrypt operation
          fails.

          This parameter is required only when the  ciphertext  was  encrypted
          under  an asymmetric KMS key. The default value, SYMMETRIC_DEFAULT ,
          represents the only supported algorithm that is valid for  symmetric
          encryption KMS keys.

          Possible values:

          o SYMMETRIC_DEFAULT

          o RSAES_OAEP_SHA_1

          o RSAES_OAEP_SHA_256

          o SM2PKE

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

EXAMPLES
       NOTE:
          To use the following examples, you must have the AWS  CLI  installed
          and  configured.  See  the Getting started guide in the AWS CLI User
          Guide for more information.

          Unless otherwise  stated,  all  examples  have  unix-like  quotation
          rules.  These  examples  will  need to be adapted to your terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       Example  1:  To  decrypt  an encrypted message with a symmetric KMS key
       (Linux and macOS)

       The following decrypt command example demonstrates the recommended  way
       to  decrypt  data  with  the AWS CLI. This version shows how to decrypt
       data under a symmetric KMS key.

       o Provide the ciphertext in a file.
            In the value of the --ciphertext-blob parameter, use the  fileb://
            prefix,  which  tells the CLI to read the data from a binary file.
            If the file is not in the current directory, type the full path to
            file.  For more information about reading AWS CLI parameter values
            from  a  file,  see  Loading  AWS  CLI  parameters  from  a   file
            <https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-param-
            eters-file.html> in the AWS Command Line Interface User Guide  and
            Best   Practices   for   Local   File  Parameters<https://aws.ama-
            zon.com/blogs/developer/best-practices-for-local-file-parameters/>
            in the AWS Command Line Tool Blog.

       o Specify the KMS key to decrypt the ciphertext.
            The --key-id parameter is not required when decrypting with a sym-
            metric KMS key. AWS KMS can get the key ID of the KMS key that was
            used  to encrypt the data from the metadata in the ciphertext. But
            it's always a best practice to specify the KMS key you are  using.
            This  practice  ensures  that you use the KMS key that you intend,
            and prevents you from inadvertently decrypting a ciphertext  using
            a KMS key you do not trust.

       o Request the plaintext output as a text value.
            The  --query  parameter tells the CLI to get only the value of the
            Plaintext field from the output. The  --output  parameter  returns
            the output as text.

       o Base64-decode the plaintext and save it in a file.
            The  following example pipes (|) the value of the Plaintext param-
            eter to the Base64 utility, which decodes it. Then,  it  redirects
            (>) the decoded output to the ExamplePlaintext file.

       Before  running  this  command, replace the example key ID with a valid
       key ID from your AWS account.

          aws kms decrypt \
              --ciphertext-blob fileb://ExampleEncryptedFile \
              --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \
              --output text \
              --query Plaintext | base64 \
              --decode > ExamplePlaintextFile

       This command produces no output. The output from the decrypt command is
       base64-decoded and saved in a file.

       For more information, see Decrypt in the AWS Key Management Service API
       Reference.

       Example 2: To decrypt an encrypted message with  a  symmetric  KMS  key
       (Windows command prompt)

       The  following  example  is the same as the previous one except that it
       uses the certutil utility to Base64-decode  the  plaintext  data.  This
       procedure requires two commands, as shown in the following examples.

       Before  running  this  command, replace the example key ID with a valid
       key ID from your AWS account.

          aws kms decrypt ^
              --ciphertext-blob fileb://ExampleEncryptedFile ^
              --key-id 1234abcd-12ab-34cd-56ef-1234567890ab ^
              --output text ^
              --query Plaintext > ExamplePlaintextFile.base64

       Run the certutil command.

          certutil -decode ExamplePlaintextFile.base64 ExamplePlaintextFile

       Output:

          Input Length = 18
          Output Length = 12
          CertUtil: -decode command completed successfully.

       For more information, see Decrypt in the AWS Key Management Service API
       Reference.

       Example  3:  To decrypt an encrypted message with an asymmetric KMS key
       (Linux and macOS)

       The following decrypt command example shows how  to  decrypt  data  en-
       crypted under an RSA asymmetric KMS key.

       When  using  an asymmetric KMS key, the encryption-algorithm parameter,
       which specifies the algorithm used to encrypt  the  plaintext,  is  re-
       quired.

       Before  running  this  command, replace the example key ID with a valid
       key ID from your AWS account.

          aws kms decrypt \
              --ciphertext-blob fileb://ExampleEncryptedFile \
              --key-id 0987dcba-09fe-87dc-65ba-ab0987654321 \
              --encryption-algorithm RSAES_OAEP_SHA_256 \
              --output text \
              --query Plaintext | base64 \
              --decode > ExamplePlaintextFile

       This command produces no output. The output from the decrypt command is
       base64-decoded and saved in a file.

       For  more  information,  see  Asymmetric keys in AWS KMS in the AWS Key
       Management Service Developer Guide.

OUTPUT
       KeyId -> (string)
          The Amazon Resource Name (key ARN ) of the KMS key that was used  to
          decrypt the ciphertext.

       Plaintext -> (blob)
          Decrypted  plaintext  data.  When you use the HTTP API or the Amazon
          Web Services CLI, the value is Base64-encoded. Otherwise, it is  not
          Base64-encoded.

       EncryptionAlgorithm -> (string)
          The encryption algorithm that was used to decrypt the ciphertext.



                                                                     DECRYPT()
