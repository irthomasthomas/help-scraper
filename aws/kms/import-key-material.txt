IMPORT-KEY-MATERIAL()                                    IMPORT-KEY-MATERIAL()



NAME
       import-key-material -

DESCRIPTION
       Imports key material into an existing symmetric encryption KMS key that
       was created without key material. After you successfully import key ma-
       terial into a KMS key, you can reimport the same key material into that
       KMS key, but you cannot import different key material.

       You cannot perform this operation on an asymmetric KMS key, an HMAC KMS
       key,  or on any KMS key in a different Amazon Web Services account. For
       more information about creating KMS keys with no key material and  then
       importing  key  material, see Importing Key Material in the Key Manage-
       ment Service Developer Guide .

       Before using this operation, call   GetParametersForImport  .  Its  re-
       sponse includes a public key and an import token. Use the public key to
       encrypt the key material. Then, submit the import token from  the  same
       GetParametersForImport response.

       When calling this operation, you must specify the following values:

       o The  key  ID or key ARN of a KMS key with no key material. Its Origin
         must be EXTERNAL . To create a KMS key with  no  key  material,  call
         CreateKey  and set the value of its Origin parameter to EXTERNAL . To
         get the Origin of a KMS key, call  DescribeKey .)

       o The encrypted key material. To get the public key to encrypt the  key
         material, call  GetParametersForImport .

       o The  import token that  GetParametersForImport returned. You must use
         a public key and token from the same GetParametersForImport response.

       o Whether the key material expires (ExpirationModel ) and, if so,  when
         (ValidTo ). If you set an expiration date, on the specified date, KMS
         deletes the key material from the KMS key, making the KMS  key  unus-
         able.  To use the KMS key in cryptographic operations again, you must
         reimport the same key material. The only way to change the expiration
         model  or expiration date is by reimporting the same key material and
         specifying a new expiration date.

       When this operation is successful, the key state of the KMS key changes
       from PendingImport to Enabled , and you can use the KMS key.

       If  this operation fails, use the exception to help determine the prob-
       lem. If the error is related to the key material, the import token,  or
       wrapping  key,  use  GetParametersForImport to get a new public key and
       import token for the KMS key and repeat the import procedure. For help,
       see  How To Import Key Material in the Key Management Service Developer
       Guide .

       The KMS key that you use for this operation must be in a compatible key
       state.  For  details,  see Key states of KMS keys in the Key Management
       Service Developer Guide .
          Cross-account use : No. You cannot perform this operation on  a  KMS
          key in a different Amazon Web Services account.

          Required permissions : kms:ImportKeyMaterial (key policy)

          Related operations:

       o DeleteImportedKeyMaterial

       o GetParametersForImport

       See also: AWS API Documentation

SYNOPSIS
            import-key-material
          --key-id <value>
          --import-token <value>
          --encrypted-key-material <value>
          [--valid-to <value>]
          [--expiration-model <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --key-id (string)
          The identifier of the symmetric encryption KMS key that receives the
          imported key material. This must be the same KMS  key  specified  in
          the KeyID parameter of the corresponding  GetParametersForImport re-
          quest. The Origin of the KMS key must be EXTERNAL . You cannot  per-
          form this operation on an asymmetric KMS key, an HMAC KMS key, a KMS
          key in a custom key store, or on a KMS key in a different Amazon Web
          Services account

          Specify the key ID or key ARN of the KMS key.

          For example:

          o Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab

          o Key                                                           ARN:
            arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab

          To  get  the key ID and key ARN for a KMS key, use  ListKeys or  De-
          scribeKey .

       --import-token (blob)
          The import token that you received in the  response  to  a  previous
          GetParametersForImport  request.  It  must be from the same response
          that contained the public key that you used to encrypt the key mate-
          rial.

       --encrypted-key-material (blob)
          The  encrypted  key material to import. The key material must be en-
          crypted with the public wrapping  key  that   GetParametersForImport
          returned,  using  the  wrapping  algorithm that you specified in the
          same GetParametersForImport request.

       --valid-to (timestamp)
          The date and time when the imported key material expires.  This  pa-
          rameter  is required when the value of the ExpirationModel parameter
          is KEY_MATERIAL_EXPIRES . Otherwise it is not valid.

          The value of this parameter must be a future date and time. The max-
          imum value is 365 days from the request date.

          When the key material expires, KMS deletes the key material from the
          KMS key. Without its key material, the KMS key is unusable.  To  use
          the  KMS key in cryptographic operations, you must reimport the same
          key material.

          You cannot change the ExpirationModel or ValidTo values for the cur-
          rent import after the request completes. To change either value, you
          must delete ( DeleteImportedKeyMaterial ) and reimport the key mate-
          rial.

       --expiration-model (string)
          Specifies whether the key material expires. The default is KEY_MATE-
          RIAL_EXPIRES .

          When the value of ExpirationModel is KEY_MATERIAL_EXPIRES , you must
          specify  a  value for the ValidTo parameter. When value is KEY_MATE-
          RIAL_DOES_NOT_EXPIRE , you must omit the ValidTo parameter.

          You cannot change the ExpirationModel or ValidTo values for the cur-
          rent import after the request completes. To change either value, you
          must delete ( DeleteImportedKeyMaterial ) and reimport the key mate-
          rial.

          Possible values:

          o KEY_MATERIAL_EXPIRES

          o KEY_MATERIAL_DOES_NOT_EXPIRE

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

EXAMPLES
       NOTE:
          To use the following examples, you must have the AWS  CLI  installed
          and  configured.  See  the Getting started guide in the AWS CLI User
          Guide for more information.

          Unless otherwise  stated,  all  examples  have  unix-like  quotation
          rules.  These  examples  will  need to be adapted to your terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To import key material into a KMS key

       The  following  import-key-material example uploads key material into a
       KMS key that was created with no key material. The key state of the KMS
       key must be PendingImport.

       This  command  uses key material that you encrypted with the public key
       that the get-parameters-for-import command returned. It also  uses  the
       import token from the same get-parameters-for-import command.

       The expiration-model parameter indicates that the key material automat-
       ically expires on the date and time specified by the  valid-to  parame-
       ter.  When  the key material expires, AWS KMS deletes the key material,
       the key state of the KMS key changes to Pending import and the KMS  key
       becomes  unusable.  To  restore the KMS key, you must reimport the same
       key material. To use different key material, you must create a new  KMS
       key.

       Before  running  this  command, replace the example key ID with a valid
       key ID or key ARN from your AWS account.

          aws kms import-key-material \
              --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \
              --encrypted-key-material fileb://EncryptedKeyMaterial.bin \
              --import-token fileb://ImportToken.bin \
              --expiration-model KEY_MATERIAL_EXPIRES \
              --valid-to 2021-09-21T19:00:00Z

       This command produces no output.

       For more information about importing key material,  see  Importing  Key
       Material in the AWS Key Management Service Developer Guide.

OUTPUT
       None



                                                         IMPORT-KEY-MATERIAL()
