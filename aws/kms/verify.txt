VERIFY()                                                              VERIFY()



NAME
       verify -

DESCRIPTION
       Verifies a digital signature that was generated by the  Sign operation.

       Verification  confirms  that an authorized user signed the message with
       the specified KMS key and signing algorithm,  and  the  message  hasn't
       changed since it was signed. If the signature is verified, the value of
       the SignatureValid field in the response is True  .  If  the  signature
       verification fails, the Verify operation fails with an KMSInvalidSigna-
       tureException exception.

       A digital signature is generated by using the private key in  an  asym-
       metric  KMS  key.  The signature is verified by using the public key in
       the same asymmetric KMS key. For information about asymmetric KMS keys,
       see Asymmetric KMS keys in the Key Management Service Developer Guide .

       To  use the Verify operation, specify the same asymmetric KMS key, mes-
       sage, and signing algorithm that were used to  produce  the  signature.
       The message type does not need to be the same as the one used for sign-
       ing, but it must indicate whether the value of  the  Message  parameter
       should be hashed as part of the verification process.

       You  can  also  verify the digital signature by using the public key of
       the KMS key outside of KMS. Use the  GetPublicKey operation to download
       the public key in the asymmetric KMS key and then use the public key to
       verify the signature outside of KMS. The advantage of using the  Verify
       operation is that it is performed within KMS. As a result, it's easy to
       call, the operation is performed within the FIPS boundary, it is logged
       in  CloudTrail,  and you can use key policy and IAM policy to determine
       who is authorized to use the KMS key to verify signatures.

       To verify a signature outside of KMS with an SM2 public key (China  Re-
       gions  only),  you  must specify the distinguishing ID. By default, KMS
       uses 1234567812345678 as the distinguishing ID. For  more  information,
       see Offline verification with SM2 key pairs .

       The KMS key that you use for this operation must be in a compatible key
       state. For details, see Key states of KMS keys in  the  Key  Management
       Service Developer Guide .
          Cross-account use : Yes. To perform this operation with a KMS key in
          a different Amazon Web Services account,  specify  the  key  ARN  or
          alias ARN in the value of the KeyId parameter.

          Required permissions : kms:Verify (key policy)

          Related operations :  Sign

          Eventual  consistency  : The KMS API follows an eventual consistency
          model. For more information, see KMS eventual consistency .

       See also: AWS API Documentation

SYNOPSIS
            verify
          --key-id <value>
          --message <value>
          [--message-type <value>]
          --signature <value>
          --signing-algorithm <value>
          [--grant-tokens <value>]
          [--dry-run | --no-dry-run]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --key-id (string)
          Identifies the asymmetric KMS key that will be used  to  verify  the
          signature.  This  must be the same KMS key that was used to generate
          the signature. If you specify a different  KMS  key,  the  signature
          verification fails.

          To  specify a KMS key, use its key ID, key ARN, alias name, or alias
          ARN. When using an alias name, prefix it with "alias/" . To  specify
          a  KMS  key in a different Amazon Web Services account, you must use
          the key ARN or alias ARN.

          For example:

          o Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab

          o Key                                                           ARN:
            arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab

          o Alias name: alias/ExampleAlias

          o Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias

          To get the key ID and key ARN for a KMS key, use  ListKeys  or   De-
          scribeKey . To get the alias name and alias ARN, use  ListAliases .

       --message (blob)
          Specifies  the message that was signed. You can submit a raw message
          of up to 4096 bytes, or a hash digest of the message. If you  submit
          a digest, use the MessageType parameter with a value of DIGEST .

          If the message specified here is different from the message that was
          signed, the signature verification fails. A message and its hash di-
          gest are considered to be the same message.

       --message-type (string)
          Tells  KMS  whether  the  value  of  the Message parameter should be
          hashed as part of the signing algorithm. Use RAW for  unhashed  mes-
          sages; use DIGEST for message digests, which are already hashed.

          When the value of MessageType is RAW , KMS uses the standard signing
          algorithm, which begins with a hash function. When the value is  DI-
          GEST , KMS skips the hashing step in the signing algorithm.

          WARNING:
              Use  the DIGEST value only when the value of the Message parame-
              ter is a message digest. If you use the DIGEST value with an un-
              hashed  message,  the security of the verification operation can
              be compromised.

          When the value of MessageType is DIGEST , the length of the  Message
          value  must  match  the  length of hashed messages for the specified
          signing algorithm.

          You can submit a message digest and omit the MessageType or  specify
          RAW  so  the  digest  is hashed again while signing. However, if the
          signed message is hashed once while signing, but twice while verify-
          ing, verification fails, even when the message hasn't changed.

          The hashing algorithm in that Verify uses is based on the SigningAl-
          gorithm value.

          o Signing algorithms that end in SHA_256 use the SHA_256 hashing al-
            gorithm.

          o Signing algorithms that end in SHA_384 use the SHA_384 hashing al-
            gorithm.

          o Signing algorithms that end in SHA_512 use the SHA_512 hashing al-
            gorithm.

          o SM2DSA  uses  the  SM3 hashing algorithm. For details, see Offline
            verification with SM2 key pairs .

          Possible values:

          o RAW

          o DIGEST

       --signature (blob)
          The signature that the Sign operation generated.

       --signing-algorithm (string)
          The signing algorithm that was used to sign the message. If you sub-
          mit a different algorithm, the signature verification fails.

          Possible values:

          o RSASSA_PSS_SHA_256

          o RSASSA_PSS_SHA_384

          o RSASSA_PSS_SHA_512

          o RSASSA_PKCS1_V1_5_SHA_256

          o RSASSA_PKCS1_V1_5_SHA_384

          o RSASSA_PKCS1_V1_5_SHA_512

          o ECDSA_SHA_256

          o ECDSA_SHA_384

          o ECDSA_SHA_512

          o SM2DSA

       --grant-tokens (list)
          A list of grant tokens.

          Use  a grant token when your permission to call this operation comes
          from a new grant that has not yet achieved  eventual  consistency  .
          For more information, see Grant token and Using a grant token in the
          Key Management Service Developer Guide .

          (string)

       Syntax:

          "string" "string" ...

       --dry-run | --no-dry-run (boolean)
          Checks if your request will succeed. DryRun is an  optional  parame-
          ter.

          To  learn more about how to use this parameter, see Testing your KMS
          API calls in the Key Management Service Developer Guide .

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable  automatic pagination. If automatic pagination is disabled, the
       AWS CLI will only make one call, for the first page of results.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

EXAMPLES
       NOTE:
          To use the following examples, you must have the AWS  CLI  installed
          and  configured.  See  the Getting started guide in the AWS CLI User
          Guide for more information.

          Unless otherwise  stated,  all  examples  have  unix-like  quotation
          rules.  These  examples  will  need to be adapted to your terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To verify a digital signature

       The  following  verify example verifies a cryptographic signature for a
       short, Base64-encoded message. The key ID, message, message  type,  and
       signing algorithm must be same ones that were used to sign the message.
       The signature that you specify cannot be base64-encoded. For  help  de-
       coding  the  signature that the sign command returns, see the sign com-
       mand examples.

       The output of the command includes a Boolean SignatureValid field  that
       indicates  that the signature was verified. If the signature validation
       fails, the verify command fails, too.

       Before running this command, replace the example key ID  with  a  valid
       key ID from your AWS account.

          aws kms verify \
              --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \
              --message fileb://EncodedMessage \
              --message-type RAW \
              --signing-algorithm RSASSA_PKCS1_V1_5_SHA_256 \
              --signature fileb://ExampleSignature

       Output:

          {
              "KeyId": "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab",
              "SignatureValid": true,
              "SigningAlgorithm": "RSASSA_PKCS1_V1_5_SHA_256"
          }

       For  more  information  about using asymmetric KMS keys in AWS KMS, see
       Using asymmetric keys in  the  AWS  Key  Management  Service  Developer
       Guide.

OUTPUT
       KeyId -> (string)
          The  Amazon  Resource Name (key ARN ) of the asymmetric KMS key that
          was used to verify the signature.

       SignatureValid -> (boolean)
          A Boolean value that indicates whether the signature was verified. A
          value  of  True indicates that the Signature was produced by signing
          the Message with the specified KeyID and  SigningAlgorithm.  If  the
          signature  is not verified, the Verify operation fails with a KMSIn-
          validSignatureException exception.

       SigningAlgorithm -> (string)
          The signing algorithm that was used to verify the signature.



                                                                      VERIFY()
