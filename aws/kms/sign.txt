SIGN()                                                                  SIGN()



NAME
       sign -

DESCRIPTION
       Creates  a  digital  signature for a message or message digest by using
       the private key in an asymmetric signing KMS key. To verify the  signa-
       ture,  use  the   Verify  operation,  or use the public key in the same
       asymmetric KMS key outside of KMS. For information about asymmetric KMS
       keys,  see  Asymmetric KMS keys in the Key Management Service Developer
       Guide .

       Digital signatures are generated and verified by using  asymmetric  key
       pair,  such  as an RSA or ECC pair that is represented by an asymmetric
       KMS key. The key owner (or an authorized user) uses their  private  key
       to  sign a message. Anyone with the public key can verify that the mes-
       sage was signed with that particular private key and that  the  message
       hasn't changed since it was signed.

       To use the Sign operation, provide the following information:

       o Use  the  KeyId  parameter  to  identify an asymmetric KMS key with a
         KeyUsage value of SIGN_VERIFY . To get the KeyUsage value  of  a  KMS
         key,  use  the   DescribeKey operation. The caller must have kms:Sign
         permission on the KMS key.

       o Use the Message parameter to specify the message or message digest to
         sign.  You  can submit messages of up to 4096 bytes. To sign a larger
         message, generate a hash digest of the message, and then provide  the
         hash digest in the Message parameter. To indicate whether the message
         is a full message or a digest, use the MessageType parameter.

       o Choose a signing algorithm that is compatible with the KMS key.

       WARNING:
          When signing a message, be sure to record the KMS key and the  sign-
          ing algorithm. This information is required to verify the signature.

       NOTE:
          Best  practices  recommend  that you limit the time during which any
          signature is effective. This deters an attack where the actor uses a
          signed  message  to  establish validity repeatedly or long after the
          message is superseded. Signatures do not include  a  timestamp,  but
          you can include a timestamp in the signed message to help you detect
          when its time to refresh the signature.

       To verify the signature that this operation generates, use the   Verify
       operation.  Or  use  the  GetPublicKey operation to download the public
       key and then use the public key to verify the signature outside of KMS.

       The KMS key that you use for this operation must be in a compatible key
       state.  For  details,  see Key states of KMS keys in the Key Management
       Service Developer Guide .
          Cross-account use : Yes. To perform this operation with a KMS key in
          a  different  Amazon  Web  Services  account, specify the key ARN or
          alias ARN in the value of the KeyId parameter.

          Required permissions : kms:Sign (key policy)

          Related operations :  Verify

       See also: AWS API Documentation

SYNOPSIS
            sign
          --key-id <value>
          --message <value>
          [--message-type <value>]
          [--grant-tokens <value>]
          --signing-algorithm <value>
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --key-id (string)
          Identifies an asymmetric KMS key. KMS uses the private  key  in  the
          asymmetric KMS key to sign the message. The KeyUsage type of the KMS
          key must be SIGN_VERIFY . To find the KeyUsage of a KMS key, use the
          DescribeKey operation.

          To  specify a KMS key, use its key ID, key ARN, alias name, or alias
          ARN. When using an alias name, prefix it with "alias/" . To  specify
          a  KMS  key in a different Amazon Web Services account, you must use
          the key ARN or alias ARN.

          For example:

          o Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab

          o Key                                                           ARN:
            arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab

          o Alias name: alias/ExampleAlias

          o Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias

          To get the key ID and key ARN for a KMS key, use  ListKeys  or   De-
          scribeKey . To get the alias name and alias ARN, use  ListAliases .

       --message (blob)
          Specifies  the  message  or  message digest to sign. Messages can be
          0-4096 bytes. To sign a larger message, provide a message digest.

          If you provide a message digest, use the DIGEST value of MessageType
          to prevent the digest from being hashed again while signing.

       --message-type (string)
          Tells  KMS  whether  the  value  of  the Message parameter should be
          hashed as part of the signing algorithm. Use RAW for  unhashed  mes-
          sages; use DIGEST for message digests, which are already hashed.

          When the value of MessageType is RAW , KMS uses the standard signing
          algorithm, which begins with a hash function. When the value is  DI-
          GEST , KMS skips the hashing step in the signing algorithm.

          WARNING:
              Use  the DIGEST value only when the value of the Message parame-
              ter is a message digest. If you use the DIGEST value with an un-
              hashed  message,  the  security  of the signing operation can be
              compromised.

          When the value of MessageType is DIGEST , the length of the  Message
          value  must  match  the  length of hashed messages for the specified
          signing algorithm.

          You can submit a message digest and omit the MessageType or  specify
          RAW  so  the digest is hashed again while signing. However, this can
          cause verification failures when verifying with a  system  that  as-
          sumes a single hash.

          The hashing algorithm in that Sign uses is based on the SigningAlgo-
          rithm value.

          o Signing algorithms that end in SHA_256 use the SHA_256 hashing al-
            gorithm.

          o Signing algorithms that end in SHA_384 use the SHA_384 hashing al-
            gorithm.

          o Signing algorithms that end in SHA_512 use the SHA_512 hashing al-
            gorithm.

          o SM2DSA  uses  the  SM3 hashing algorithm. For details, see Offline
            verification with SM2 key pairs .

          Possible values:

          o RAW

          o DIGEST

       --grant-tokens (list)
          A list of grant tokens.

          Use a grant token when your permission to call this operation  comes
          from  a  new  grant that has not yet achieved eventual consistency .
          For more information, see Grant token and Using a grant token in the
          Key Management Service Developer Guide .

          (string)

       Syntax:

          "string" "string" ...

       --signing-algorithm (string)
          Specifies the signing algorithm to use when signing the message.

          Choose an algorithm that is compatible with the type and size of the
          specified asymmetric KMS key.  When  signing  with  RSA  key  pairs,
          RSASSA-PSS  algorithms  are  preferred. We include RSASSA-PKCS1-v1_5
          algorithms for compatibility with existing applications.

          Possible values:

          o RSASSA_PSS_SHA_256

          o RSASSA_PSS_SHA_384

          o RSASSA_PSS_SHA_512

          o RSASSA_PKCS1_V1_5_SHA_256

          o RSASSA_PKCS1_V1_5_SHA_384

          o RSASSA_PKCS1_V1_5_SHA_512

          o ECDSA_SHA_256

          o ECDSA_SHA_384

          o ECDSA_SHA_512

          o SM2DSA

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

EXAMPLES
       NOTE:
          To  use  the following examples, you must have the AWS CLI installed
          and configured. See the Getting started guide in the  AWS  CLI  User
          Guide for more information.

          Unless  otherwise  stated,  all  examples  have  unix-like quotation
          rules. These examples will need to be  adapted  to  your  terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       Example 1: To generate a digital signature for a message

       The following sign example generates a cryptographic  signature  for  a
       short  message.  The  output  of the command includes a base-64 encoded
       Signature field that you can verify by using the verify command.

       You must specify a message to sign and a signing  algorithm  that  your
       asymmetric KMS key supports. To get the signing algorithms for your KMS
       key, use the describe-key command.

       In AWS CLI 2.0, the value of the message parameter must  be  Base64-en-
       coded. Or, you can save the message in a file and use the fileb:// pre-
       fix, which tells the AWS CLI to read binary data from the file.

       Before running this command, replace the example key ID  with  a  valid
       key  ID  from your AWS account. The key ID must represent an asymmetric
       KMS key with a key usage of SIGN_VERIFY.

          msg=(echo 'Hello World' | base64)

          aws kms sign \
              --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \
              --message fileb://UnsignedMessage \
              --message-type RAW \
              --signing-algorithm RSASSA_PKCS1_V1_5_SHA_256

       Output:

          {
              "KeyId": "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab",
              "Signature": "ABCDEFhpyVYyTxbafE74ccSvEJLJr3zuoV1Hfymz4qv+/fxmxNLA7SE1SiF8lHw80fKZZ3bJ...",
              "SigningAlgorithm": "RSASSA_PKCS1_V1_5_SHA_256"
          }

       For more information about using asymmetric KMS keys in  AWS  KMS,  see
       Asymmetric  keys in AWS KMS in the AWS Key Management Service Developer
       Guide.

       Example 2: To save a digital signature in a file (Linux and macOs)

       The following sign example generates a cryptographic  signature  for  a
       short  message stored in a local file. The command also gets the Signa-
       ture property from the response, Base64-decodes it and saves it in  the
       ExampleSignature  file. You can use the signature file in a verify com-
       mand that verifies the signature.

       The sign command requires a Base64-encoded message and a signing  algo-
       rithm  that  your asymmetric KMS key supports. To get the signing algo-
       rithms that your KMS key supports, use the describe-key command.

       Before running this command, replace the example key ID  with  a  valid
       key  ID  from your AWS account. The key ID must represent an asymmetric
       KMS key with a key usage of SIGN_VERIFY.

          echo 'hello world' | base64 > EncodedMessage

          aws kms sign \
              --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \
              --message fileb://EncodedMessage \
              --message-type RAW \
              --signing-algorithm RSASSA_PKCS1_V1_5_SHA_256 \
              --output text \
              --query Signature | base64 --decode > ExampleSignature

       This command produces no output. This example  extracts  the  Signature
       property of the output and saves it in a file.

       For  more  information  about using asymmetric KMS keys in AWS KMS, see
       Asymmetric keys in AWS KMS in the AWS Key Management Service  Developer
       Guide.

OUTPUT
       KeyId -> (string)
          The  Amazon  Resource Name (key ARN ) of the asymmetric KMS key that
          was used to sign the message.

       Signature -> (blob)
          The cryptographic signature that was generated for the message.

          o When used with the supported RSA signing algorithms, the  encoding
            of this value is defined by PKCS #1 in RFC 8017 .

          o When   used   with   the   ECDSA_SHA_256   ,  ECDSA_SHA_384  ,  or
            ECDSA_SHA_512 signing algorithms, this value is a DER-encoded  ob-
            ject  as  defined  by  ANSI X9.622005 and RFC 3279 Section 2.2.3 .
            This is the most commonly used signature format and is appropriate
            for most uses.

          When  you use the HTTP API or the Amazon Web Services CLI, the value
          is Base64-encoded. Otherwise, it is not Base64-encoded.

       SigningAlgorithm -> (string)
          The signing algorithm that was used to sign the message.



                                                                        SIGN()
