GENERATE-DATA-KEY-PAIR-WITHOUT-PLAINGENERATE-DATA-KEY-PAIR-WITHOUT-PLAINTEXT()



NAME
       generate-data-key-pair-without-plaintext -

DESCRIPTION
       Returns  a unique asymmetric data key pair for use outside of KMS. This
       operation returns a plaintext public key and a copy of the private  key
       that  is  encrypted under the symmetric encryption KMS key you specify.
       Unlike  GenerateDataKeyPair , this operation does not return  a  plain-
       text  private  key.  The bytes in the keys are random; they are not re-
       lated to the caller or to the KMS key that is used to encrypt the  pri-
       vate key.

       You can use the public key that GenerateDataKeyPairWithoutPlaintext re-
       turns to encrypt data or verify a signature outside of KMS. Then, store
       the  encrypted private key with the data. When you are ready to decrypt
       data or sign a message, you can use the  Decrypt operation  to  decrypt
       the encrypted private key.

       To  generate  a  data key pair, you must specify a symmetric encryption
       KMS key to encrypt the private key in a data key pair. You  cannot  use
       an  asymmetric  KMS  key or a KMS key in a custom key store. To get the
       type and origin of your KMS key, use the  DescribeKey operation.

       Use the KeyPairSpec parameter to choose an RSA or Elliptic Curve  (ECC)
       data  key  pair.  In China Regions, you can also choose an SM2 data key
       pair. KMS recommends that you use ECC key pairs for  signing,  and  use
       RSA  and  SM2 key pairs for either encryption or signing, but not both.
       However, KMS cannot enforce any restrictions on the  use  of  data  key
       pairs outside of KMS.
          GenerateDataKeyPairWithoutPlaintext  returns  a unique data key pair
          for each request. The bytes in the key are not related to the caller
          or  KMS  key that is used to encrypt the private key. The public key
          is a DER-encoded X.509 SubjectPublicKeyInfo,  as  specified  in  RFC
          5280 .

       You  can  use an optional encryption context to add additional security
       to the encryption operation. If you specify an EncryptionContext ,  you
       must specify the same encryption context (a case-sensitive exact match)
       when decrypting the encrypted data key. Otherwise, the request  to  de-
       crypt  fails with an InvalidCiphertextException . For more information,
       see Encryption Context in the Key Management Service Developer Guide .

       The KMS key that you use for this operation must be in a compatible key
       state.  For  details,  see Key states of KMS keys in the Key Management
       Service Developer Guide .
          Cross-account use : Yes. To perform this operation with a KMS key in
          a  different  Amazon  Web  Services  account, specify the key ARN or
          alias ARN in the value of the KeyId parameter.

          Required permissions : kms:GenerateDataKeyPairWithoutPlaintext  (key
          policy)

          Related operations:

       o Decrypt

       o Encrypt

       o GenerateDataKey

       o GenerateDataKeyPair

       o GenerateDataKeyWithoutPlaintext
          Eventual  consistency  : The KMS API follows an eventual consistency
          model. For more information, see KMS eventual consistency .

       See also: AWS API Documentation

SYNOPSIS
            generate-data-key-pair-without-plaintext
          [--encryption-context <value>]
          --key-id <value>
          --key-pair-spec <value>
          [--grant-tokens <value>]
          [--dry-run | --no-dry-run]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --encryption-context (map)
          Specifies the encryption context that will be used  when  encrypting
          the private key in the data key pair.

          WARNING:
              Do  not  include  confidential  or sensitive information in this
              field. This field may be displayed in  plaintext  in  CloudTrail
              logs and other output.

          An  encryption context is a collection of non-secret key-value pairs
          that represent additional authenticated data. When you  use  an  en-
          cryption  context to encrypt data, you must specify the same (an ex-
          act case-sensitive match) encryption context to decrypt the data. An
          encryption  context  is  supported only on operations with symmetric
          encryption KMS keys. On operations  with  symmetric  encryption  KMS
          keys,  an  encryption context is optional, but it is strongly recom-
          mended.

          For more information, see Encryption context in the  Key  Management
          Service Developer Guide .

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --key-id (string)
          Specifies the symmetric encryption KMS key that encrypts the private
          key in the data key pair. You cannot specify an asymmetric  KMS  key
          or  a  KMS  key in a custom key store. To get the type and origin of
          your KMS key, use the  DescribeKey operation.

          To specify a KMS key, use its key ID, key ARN, alias name, or  alias
          ARN.  When using an alias name, prefix it with "alias/" . To specify
          a KMS key in a different Amazon Web Services account, you  must  use
          the key ARN or alias ARN.

          For example:

          o Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab

          o Key                                                           ARN:
            arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab

          o Alias name: alias/ExampleAlias

          o Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias

          To  get  the key ID and key ARN for a KMS key, use  ListKeys or  De-
          scribeKey . To get the alias name and alias ARN, use  ListAliases .

       --key-pair-spec (string)
          Determines the type of data key pair that is generated.

          The KMS rule that restricts the use of asymmetric RSA  and  SM2  KMS
          keys  to  encrypt  and decrypt or to sign and verify (but not both),
          and the rule that permits you to use ECC KMS keys only to  sign  and
          verify,  are not effective on data key pairs, which are used outside
          of KMS. The SM2 key spec is only available in China Regions.

          Possible values:

          o RSA_2048

          o RSA_3072

          o RSA_4096

          o ECC_NIST_P256

          o ECC_NIST_P384

          o ECC_NIST_P521

          o ECC_SECG_P256K1

          o SM2

       --grant-tokens (list)
          A list of grant tokens.

          Use a grant token when your permission to call this operation  comes
          from  a  new  grant that has not yet achieved eventual consistency .
          For more information, see Grant token and Using a grant token in the
          Key Management Service Developer Guide .

          (string)

       Syntax:

          "string" "string" ...

       --dry-run | --no-dry-run (boolean)
          Checks  if  your request will succeed. DryRun is an optional parame-
          ter.

          To learn more about how to use this parameter, see Testing your  KMS
          API calls in the Key Management Service Developer Guide .

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

EXAMPLES
       NOTE:
          To use the following examples, you must have the AWS  CLI  installed
          and  configured.  See  the Getting started guide in the AWS CLI User
          Guide for more information.

          Unless otherwise  stated,  all  examples  have  unix-like  quotation
          rules.  These  examples  will  need to be adapted to your terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To generate an ECC NIST P384 asymmetric data key pair

       The following generate-data-key-pair-without-plaintext example requests
       an ECC NIST P384 key pair for use outside of AWS.

       The command returns a plaintext public key and a copy  of  the  private
       key  encrypted under the specified KMS key. It does not return a plain-
       text private key. You can safely store the encrypted private  key  with
       the  encrypted  data,  and call AWS KMS to decrypt the private key when
       you need to use it.

       To request  an  ECC  NIST  P384  asymmetric  data  key  pair,  use  the
       key-pair-spec parameter with a value of ECC_NIST_P384.

       The  KMS  key  you specify must be a symmetric encryption KMS key, that
       is, a KMS key with a KeySpec value of SYMMETRIC_DEFAULT.

       NOTE: The values in the output of this example are truncated  for  dis-
       play.

          aws kms generate-data-key-pair-without-plaintext \
              --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \
              --key-pair-spec ECC_NIST_P384

       Output:

          {
              "PrivateKeyCiphertextBlob": "AQIDAHi6LtupRpdKl2aJTzkK6FbhOtQkMlQJJH3PdtHvS/y+hAFFxmiD134doUDzMGmfCEtcAAAHaTCCB2UGCSqGSIb3DQEHBqCCB1...",
              "PublicKey": "MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEA3A3eGMyPrvSn7+LdlJE1oUoQV5HpEuHAVbdOyND+NmYDH/mL1OSIEuLrcdZ5hrMH4pk83r40l...",
              "KeyId": "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab",
              "KeyPairSpec": "ECC_NIST_P384"
          }

       The  PublicKey  and PrivateKeyCiphertextBlob are returned in base64-en-
       coded format.

       For more information, see Data key pairs in the AWS Key Management Ser-
       vice Developer Guide.

OUTPUT
       PrivateKeyCiphertextBlob -> (blob)
          The  encrypted copy of the private key. When you use the HTTP API or
          the Amazon Web Services CLI, the value is Base64-encoded. Otherwise,
          it is not Base64-encoded.

       PublicKey -> (blob)
          The public key (in plaintext). When you use the HTTP API or the Ama-
          zon Web Services CLI, the value is Base64-encoded. Otherwise, it  is
          not Base64-encoded.

       KeyId -> (string)
          The  Amazon  Resource  Name (key ARN ) of the KMS key that encrypted
          the private key.

       KeyPairSpec -> (string)
          The type of data key pair that was generated.



                                    GENERATE-DATA-KEY-PAIR-WITHOUT-PLAINTEXT()
