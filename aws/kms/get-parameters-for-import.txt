GET-PARAMETERS-FOR-IMPORT()                        GET-PARAMETERS-FOR-IMPORT()



NAME
       get-parameters-for-import -

DESCRIPTION
       Returns  the public key and an import token you need to import or reim-
       port key material for a KMS key.

       By default, KMS keys are created with key material that KMS  generates.
       This  operation  supports  Importing key material , an advanced feature
       that lets you generate and import the cryptographic key material for  a
       KMS  key.  For  more information about importing key material into KMS,
       see Importing key material in  the  Key  Management  Service  Developer
       Guide .

       Before  calling  GetParametersForImport  , use the  CreateKey operation
       with an Origin value of EXTERNAL to create a KMS key with no key  mate-
       rial.  You  can import key material for a symmetric encryption KMS key,
       HMAC KMS key, asymmetric encryption KMS key, or asymmetric signing  KMS
       key.  You  can  also import key material into a multi-Region key of any
       supported type. However, you can't import key material into a  KMS  key
       in  a custom key store . You can also use GetParametersForImport to get
       a public key and import token to reimport  the  original  key  material
       into a KMS key whose key material expired or was deleted.
          GetParametersForImport  returns  the  items  that you need to import
          your key material.

       o The public key (or "wrapping key") of an RSA key pair that KMS gener-
         ates. You will use this public key to encrypt ("wrap") your key mate-
         rial while it's in transit to KMS.

       o A import token that ensures that KMS can decrypt  your  key  material
         and associate it with the correct KMS key.

       The  public key and its import token are permanently linked and must be
       used together. Each public key and import token set  is  valid  for  24
       hours.  The  expiration  date  and time appear in the ParametersValidTo
       field in the GetParametersForImport response. You cannot use an expired
       public  key  or  import token in an  ImportKeyMaterial request. If your
       key and token expire, send another GetParametersForImport request.
          GetParametersForImport requires the following information:

       o The key ID of the KMS key for which you are importing the  key  mate-
         rial.

       o The  key spec of the public key ("wrapping key") that you will use to
         encrypt your key material during import.

       o The wrapping algorithm that you will use with the public key  to  en-
         crypt your key material.

       You  can use the same or a different public key spec and wrapping algo-
       rithm each time you import or reimport the same key material.

       The KMS key that you use for this operation must be in a compatible key
       state.  For  details,  see Key states of KMS keys in the Key Management
       Service Developer Guide .
          Cross-account use : No. You cannot perform this operation on  a  KMS
          key in a different Amazon Web Services account.

          Required permissions : kms:GetParametersForImport (key policy)

          Related operations:

       o ImportKeyMaterial

       o DeleteImportedKeyMaterial
          Eventual  consistency  : The KMS API follows an eventual consistency
          model. For more information, see KMS eventual consistency .

       See also: AWS API Documentation

SYNOPSIS
            get-parameters-for-import
          --key-id <value>
          --wrapping-algorithm <value>
          --wrapping-key-spec <value>
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --key-id (string)
          The identifier of the KMS key that will be associated with  the  im-
          ported key material. The Origin of the KMS key must be EXTERNAL .

          All  KMS  key types are supported, including multi-Region keys. How-
          ever, you cannot import key material into a KMS key in a custom  key
          store.

          Specify the key ID or key ARN of the KMS key.

          For example:

          o Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab

          o Key                                                           ARN:
            arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab

          To  get  the key ID and key ARN for a KMS key, use  ListKeys or  De-
          scribeKey .

       --wrapping-algorithm (string)
          The algorithm you will use with the RSA public key (PublicKey  )  in
          the  response  to  protect your key material during import. For more
          information, see Select a wrapping algorithm in the  Key  Management
          Service Developer Guide .

          For  RSA_AES wrapping algorithms, you encrypt your key material with
          an AES key that you generate, then encrypt your AES key with the RSA
          public key from KMS. For RSAES wrapping algorithms, you encrypt your
          key material directly with the RSA public key from KMS.

          The wrapping algorithms that you can use depend on the type  of  key
          material  that  you are importing. To import an RSA private key, you
          must use an RSA_AES wrapping algorithm.

          o RSA_AES_KEY_WRAP_SHA_256  Supported for wrapping RSA and  ECC  key
            material.

          o RSA_AES_KEY_WRAP_SHA_1  Supported for wrapping RSA and ECC key ma-
            terial.

          o RSAES_OAEP_SHA_256  Supported for all types of key  material,  ex-
            cept   RSA   key  material  (private  key).  You  cannot  use  the
            RSAES_OAEP_SHA_256 wrapping algorithm with the  RSA_2048  wrapping
            key spec to wrap ECC_NIST_P521 key material.

          o RSAES_OAEP_SHA_1   Supported for all types of key material, except
            RSA   key   material   (private   key).   You   cannot   use   the
            RSAES_OAEP_SHA_1 wrapping algorithm with the RSA_2048 wrapping key
            spec to wrap ECC_NIST_P521 key material.

          o RSAES_PKCS1_V1_5 (Deprecated)  As of October 10,  2023,  KMS  does
            not support the RSAES_PKCS1_V1_5 wrapping algorithm.

          Possible values:

          o RSAES_PKCS1_V1_5

          o RSAES_OAEP_SHA_1

          o RSAES_OAEP_SHA_256

          o RSA_AES_KEY_WRAP_SHA_1

          o RSA_AES_KEY_WRAP_SHA_256

          o SM2PKE

       --wrapping-key-spec (string)
          The  type  of RSA public key to return in the response. You will use
          this wrapping key with the specified wrapping algorithm  to  protect
          your key material during import.

          Use the longest RSA wrapping key that is practical.

          You   cannot  use  an  RSA_2048  public  key  to  directly  wrap  an
          ECC_NIST_P521 private key. Instead, use an  RSA_AES  wrapping  algo-
          rithm or choose a longer RSA public key.

          Possible values:

          o RSA_2048

          o RSA_3072

          o RSA_4096

          o SM2

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

EXAMPLES
       NOTE:
          To use the following examples, you must have the AWS  CLI  installed
          and  configured.  See  the Getting started guide in the AWS CLI User
          Guide for more information.

          Unless otherwise  stated,  all  examples  have  unix-like  quotation
          rules.  These  examples  will  need to be adapted to your terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To get the items required to import key material into a KMS key

       The following get-parameters-for-import example gets the public key and
       import token that you need to import key material into a KMS key.  When
       you  use the import-key-material command, be sure to use the import to-
       ken and key material encrypted by the public key that were returned  in
       the  same  get-parameters-for-import  command. Also, the wrapping algo-
       rithm that you specify in this command must be one that you use to  en-
       crypt the key material with the public key.

       To  specify the KMS key, use the key-id parameter. This example uses an
       key ID, but you can use a key ID or key ARN in this command.

          aws kms get-parameters-for-import \
              --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \
              --wrapping-algorithm RSAES_OAEP_SHA_256 \
              --wrapping-key-spec RSA_2048

       Output:

          {
              "KeyId": "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab",
              "PublicKey": "<public key base64 encoded data>",
              "ImportToken": "<import token base64 encoded data>",
              "ParametersValidTo": 1593893322.32
          }

       For more information, see Download the public key and import  token  in
       the AWS Key Management Service Developer Guide.

OUTPUT
       KeyId -> (string)
          The  Amazon Resource Name (key ARN ) of the KMS key to use in a sub-
          sequent  ImportKeyMaterial request. This is the same KMS key  speci-
          fied in the GetParametersForImport request.

       ImportToken -> (blob)
          The import token to send in a subsequent  ImportKeyMaterial request.

       PublicKey -> (blob)
          The  public  key to use to encrypt the key material before importing
          it with  ImportKeyMaterial .

       ParametersValidTo -> (timestamp)
          The time at which the import token and  public  key  are  no  longer
          valid. After this time, you cannot use them to make an  ImportKeyMa-
          terial request and you must send another GetParametersForImport  re-
          quest to get new ones.



                                                   GET-PARAMETERS-FOR-IMPORT()
