IMPORT-KEY()                                                      IMPORT-KEY()



NAME
       import-key -

DESCRIPTION
       Imports  keys and public key certificates into Amazon Web Services Pay-
       ment Cryptography.

       Amazon Web Services Payment Cryptography simplifies main  or  root  key
       exchange  process by eliminating the need of a paper-based key exchange
       process. It takes a modern and secure approach based  of  the  ANSI  X9
       TR-34 key exchange standard.

       You  can use ImportKey to import main or root keys such as KEK (Key En-
       cryption Key) using asymmetric key  exchange  technique  following  the
       ANSI X9 TR-34 standard. The ANSI X9 TR-34 standard uses asymmetric keys
       to establishes bi-directional trust between the two parties  exchanging
       keys.

       After you have imported a main or root key, you can import working keys
       to perform various cryptographic operations within Amazon Web  Services
       Payment  Cryptography  using  the  ANSI X9 TR-31 symmetric key exchange
       standard as mandated by PCI PIN.

       You can also import a root public key certificate , a self-signed  cer-
       tificate  used to sign other public key certificates, or a trusted pub-
       lic key certificate under an already established root public  key  cer-
       tificate.
          To import a public root key certificate

       Using  this operation, you can import the public component (in PEM cer-
       ificate format) of your private root key. You can use the imported pub-
       lic  root  key  certificate for digital signatures, for example signing
       wrapping key or signing key in TR-34, within your Amazon  Web  Services
       Payment Cryptography account.

       Set the following parameters:

       o KeyMaterial : RootCertificatePublicKey

       o KeyClass : PUBLIC_KEY

       o KeyModesOfUse : Verify

       o KeyUsage : TR31_S0_ASYMMETRIC_KEY_FOR_DIGITAL_SIGNATURE

       o PublicKeyCertificate  :  The  certificate  authority used to sign the
         root public key certificate.
          To import a trusted public key certificate

       The root public key certificate must be in place and operational before
       you  import a trusted public key certificate. Set the following parame-
       ters:

       o KeyMaterial : TrustedCertificatePublicKey

       o CertificateAuthorityPublicKeyIdentifier : KeyArn of the  RootCertifi-
         catePublicKey .

       o KeyModesOfUse and KeyUsage : Corresponding to the cryptographic oper-
         ations such as wrap, sign, or encrypt that you will allow the trusted
         public key certificate to perform.

       o PublicKeyCertificate  :  The  certificate  authority used to sign the
         trusted public key certificate.
          Import main keys

       Amazon Web Services Payment Cryptography uses TR-34 asymmetric key  ex-
       change  standard to import main keys such as KEK. In TR-34 terminology,
       the sending party of the key is called Key Distribution Host (KDH)  and
       the receiving party of the key is called Key Receiving Host (KRH). Dur-
       ing the key import process, KDH is the user who initiates the  key  im-
       port  and  KRH is Amazon Web Services Payment Cryptography who receives
       the key. Before initiating TR-34 key import, you must obtain an  import
       token  by calling  GetParametersForImport . This operation also returns
       the wrapping key certificate that KDH uses wrap  key  under  import  to
       generate  a  TR-34  wrapped key block. The import token expires after 7
       days.

       Set the following parameters:

       o CertificateAuthorityPublicKeyIdentifier : The KeyArn of the  certifi-
         cate  chain that will sign the signing key certificate and should ex-
         ist within Amazon Web Services Payment Cryptography before initiating
         TR-34  key import. If it does not exist, you can import it by calling
         by calling ImportKey for RootCertificatePublicKey .

       o ImportToken : Obtained from KRH by calling  GetParametersForImport .

       o WrappedKeyBlock : The TR-34 wrapped key block from KDH.  It  contains
         the KDH key under import, wrapped with KRH provided wrapping key cer-
         tificate and signed by the KDH private signing key.  This  TR-34  key
         block  is generated by the KDH Hardware Security Module (HSM) outside
         of Amazon Web Services Payment Cryptography.

       o SigningKeyCertificate : The public component of the private key  that
         signed the KDH TR-34 wrapped key block. In PEM certificate format.

       NOTE:
              TR-34  is intended primarily to exchange 3DES keys. Your ability
              to export AES-128 and larger AES keys may be dependent  on  your
              source system.

          Import working keys

       Amazon  Web  Services Payment Cryptography uses TR-31 symmetric key ex-
       change standard to import working  keys.  A  KEK  must  be  established
       within  Amazon Web Services Payment Cryptography by using TR-34 key im-
       port. To initiate a TR-31 key import, set the following parameters:

       o WrappedKeyBlock : The key under import and encrypted using  KEK.  The
         TR-31  key block generated by your HSM outside of Amazon Web Services
         Payment Cryptography.

       o WrappingKeyIdentifier : The KeyArn of the KEK that  Amazon  Web  Ser-
         vices  Payment  Cryptography  uses to decrypt or unwrap the key under
         import.
          Cross-account use: This operation can't  be  used  across  different
          Amazon Web Services accounts.

          Related operations:

       o ExportKey

       o GetParametersForImport

       See also: AWS API Documentation

SYNOPSIS
            import-key
          [--enabled | --no-enabled]
          [--key-check-value-algorithm <value>]
          --key-material <value>
          [--tags <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --enabled | --no-enabled (boolean)
          Specifies whether import key is enabled.

       --key-check-value-algorithm (string)
          The  algorithm that Amazon Web Services Payment Cryptography uses to
          calculate the key check value (KCV) for DES and AES keys.

          For DES key, the KCV is computed by encrypting 8  bytes,  each  with
          value  '00',  with the key to be checked and retaining the 3 highest
          order bytes of the encrypted result. For AES key, the  KCV  is  com-
          puted  by  encrypting 8 bytes, each with value '01', with the key to
          be checked and retaining the 3 highest order bytes of the  encrypted
          result.

          Possible values:

          o CMAC

          o ANSI_X9_24

       --key-material (tagged union structure)
          The  key  or  public key certificate type to use during key material
          import, for example TR-34 or RootCertificatePublicKey.

          NOTE:
              This is a Tagged Union structure. Only one of the following  top
              level  keys  can be set: RootCertificatePublicKey, Tr31KeyBlock,
              Tr34KeyBlock, TrustedCertificatePublicKey.

          RootCertificatePublicKey -> (structure)
              Parameter information for root public key certificate import.

              KeyAttributes -> (structure)
                 The role of the key, the algorithm it supports, and the cryp-
                 tographic  operations  allowed with the key. This data is im-
                 mutable after the root public key is imported.

                 KeyAlgorithm -> (string)
                     The key algorithm to be use during creation of an  Amazon
                     Web Services Payment Cryptography key.

                     For  symmetric keys, Amazon Web Services Payment Cryptog-
                     raphy supports AES and TDES  algorithms.  For  asymmetric
                     keys,  Amazon  Web Services Payment Cryptography supports
                     RSA and ECC_NIST algorithms.

                 KeyClass -> (string)
                     The type of Amazon Web Services Payment Cryptography  key
                     to create, which determines the classication of the cryp-
                     tographic method and whether Amazon Web Services  Payment
                     Cryptography  key contains a symmetric key or an asymmet-
                     ric key pair.

                 KeyModesOfUse -> (structure)
                     The list of cryptographic operations that you can perform
                     using the key.

                     Decrypt -> (boolean)
                        Species  whether  an Amazon Web Services Payment Cryp-
                        tography key can be used to decrypt data.

                     DeriveKey -> (boolean)
                        Species whether an Amazon Web Services  Payment  Cryp-
                        tography key can be used to derive new keys.

                     Encrypt -> (boolean)
                        Species  whether  an Amazon Web Services Payment Cryp-
                        tography key can be used to encrypt data.

                     Generate -> (boolean)
                        Species whether an Amazon Web Services  Payment  Cryp-
                        tography  key can be used to generate and verify other
                        card and PIN verification keys.

                     NoRestrictions -> (boolean)
                        Species whether an Amazon Web Services  Payment  Cryp-
                        tography  key  has  no special restrictions other than
                        the restrictions implied by KeyUsage .

                     Sign -> (boolean)
                        Species whether an Amazon Web Services  Payment  Cryp-
                        tography key can be used for signing.

                     Unwrap -> (boolean)
                        Species  whether  an Amazon Web Services Payment Cryp-
                        tography key can be used to unwrap other keys.

                     Verify -> (boolean)
                        Species whether an Amazon Web Services  Payment  Cryp-
                        tography key can be used to verify signatures.

                     Wrap -> (boolean)
                        Species  whether  an Amazon Web Services Payment Cryp-
                        tography key can be used to wrap other keys.

                 KeyUsage -> (string)
                     The cryptographic usage of an Amazon Web Services Payment
                     Cryptography  key  as dened in section A.5.2 of the TR-31
                     spec.

              PublicKeyCertificate -> (string)
                 Parameter information for root public key certificate import.

          Tr31KeyBlock -> (structure)
              Parameter information for key material import using TR-31  stan-
              dard.

              WrappedKeyBlock -> (string)
                 The TR-34 wrapped key block to import.

              WrappingKeyIdentifier -> (string)
                 The KeyARN of the key that will decrypt or unwrap a TR-31 key
                 block during import.

          Tr34KeyBlock -> (structure)
              Parameter information for key material import using TR-34  stan-
              dard.

              CertificateAuthorityPublicKeyIdentifier -> (string)
                 The  KeyARN  of  the certificate chain that signs the signing
                 key certificate during TR-34 key import.

              ImportToken -> (string)
                 The import token that initiates key import  into  Amazon  Web
                 Services  Payment  Cryptography. It expires after 7 days. You
                 can use the same import token to import multiple keys to  the
                 same service account.

              KeyBlockFormat -> (string)
                 The key block format to use during key import. The only value
                 allowed is X9_TR34_2012 .

              RandomNonce -> (string)
                 A random number value that is unique to the TR-34  key  block
                 generated  using 2 pass. The operation will fail, if a random
                 nonce value is not provided for a TR-34 key  block  generated
                 using 2 pass.

              SigningKeyCertificate -> (string)
                 The  public  key  component  in PEM certificate format of the
                 private key that signs the KDH TR-34 wrapped key block.

              WrappedKeyBlock -> (string)
                 The TR-34 wrapped key block to import.

          TrustedCertificatePublicKey -> (structure)
              Parameter information for trusted public key certificate import.

              CertificateAuthorityPublicKeyIdentifier -> (string)
                 The KeyARN of the root public key certificate or  certificate
                 chain that signs the trusted public key certificate import.

              KeyAttributes -> (structure)
                 The role of the key, the algorithm it supports, and the cryp-
                 tographic operations allowed with the key. This data  is  im-
                 mutable after a trusted public key is imported.

                 KeyAlgorithm -> (string)
                     The  key algorithm to be use during creation of an Amazon
                     Web Services Payment Cryptography key.

                     For symmetric keys, Amazon Web Services Payment  Cryptog-
                     raphy  supports  AES  and TDES algorithms. For asymmetric
                     keys, Amazon Web Services Payment  Cryptography  supports
                     RSA and ECC_NIST algorithms.

                 KeyClass -> (string)
                     The  type of Amazon Web Services Payment Cryptography key
                     to create, which determines the classication of the cryp-
                     tographic  method and whether Amazon Web Services Payment
                     Cryptography key contains a symmetric key or an  asymmet-
                     ric key pair.

                 KeyModesOfUse -> (structure)
                     The list of cryptographic operations that you can perform
                     using the key.

                     Decrypt -> (boolean)
                        Species whether an Amazon Web Services  Payment  Cryp-
                        tography key can be used to decrypt data.

                     DeriveKey -> (boolean)
                        Species  whether  an Amazon Web Services Payment Cryp-
                        tography key can be used to derive new keys.

                     Encrypt -> (boolean)
                        Species whether an Amazon Web Services  Payment  Cryp-
                        tography key can be used to encrypt data.

                     Generate -> (boolean)
                        Species  whether  an Amazon Web Services Payment Cryp-
                        tography key can be used to generate and verify  other
                        card and PIN verification keys.

                     NoRestrictions -> (boolean)
                        Species  whether  an Amazon Web Services Payment Cryp-
                        tography key has no special  restrictions  other  than
                        the restrictions implied by KeyUsage .

                     Sign -> (boolean)
                        Species  whether  an Amazon Web Services Payment Cryp-
                        tography key can be used for signing.

                     Unwrap -> (boolean)
                        Species whether an Amazon Web Services  Payment  Cryp-
                        tography key can be used to unwrap other keys.

                     Verify -> (boolean)
                        Species  whether  an Amazon Web Services Payment Cryp-
                        tography key can be used to verify signatures.

                     Wrap -> (boolean)
                        Species whether an Amazon Web Services  Payment  Cryp-
                        tography key can be used to wrap other keys.

                 KeyUsage -> (string)
                     The cryptographic usage of an Amazon Web Services Payment
                     Cryptography key as dened in section A.5.2 of  the  TR-31
                     spec.

              PublicKeyCertificate -> (string)
                 Parameter  information for trusted public key certificate im-
                 port.

       JSON Syntax:

          {
            "RootCertificatePublicKey": {
              "KeyAttributes": {
                "KeyAlgorithm": "TDES_2KEY"|"TDES_3KEY"|"AES_128"|"AES_192"|"AES_256"|"RSA_2048"|"RSA_3072"|"RSA_4096",
                "KeyClass": "SYMMETRIC_KEY"|"ASYMMETRIC_KEY_PAIR"|"PRIVATE_KEY"|"PUBLIC_KEY",
                "KeyModesOfUse": {
                  "Decrypt": true|false,
                  "DeriveKey": true|false,
                  "Encrypt": true|false,
                  "Generate": true|false,
                  "NoRestrictions": true|false,
                  "Sign": true|false,
                  "Unwrap": true|false,
                  "Verify": true|false,
                  "Wrap": true|false
                },
                "KeyUsage": "TR31_B0_BASE_DERIVATION_KEY"|"TR31_C0_CARD_VERIFICATION_KEY"|"TR31_D0_SYMMETRIC_DATA_ENCRYPTION_KEY"|"TR31_D1_ASYMMETRIC_KEY_FOR_DATA_ENCRYPTION"|"TR31_E0_EMV_MKEY_APP_CRYPTOGRAMS"|"TR31_E1_EMV_MKEY_CONFIDENTIALITY"|"TR31_E2_EMV_MKEY_INTEGRITY"|"TR31_E4_EMV_MKEY_DYNAMIC_NUMBERS"|"TR31_E5_EMV_MKEY_CARD_PERSONALIZATION"|"TR31_E6_EMV_MKEY_OTHER"|"TR31_K0_KEY_ENCRYPTION_KEY"|"TR31_K1_KEY_BLOCK_PROTECTION_KEY"|"TR31_K3_ASYMMETRIC_KEY_FOR_KEY_AGREEMENT"|"TR31_M3_ISO_9797_3_MAC_KEY"|"TR31_M6_ISO_9797_5_CMAC_KEY"|"TR31_M7_HMAC_KEY"|"TR31_P0_PIN_ENCRYPTION_KEY"|"TR31_P1_PIN_GENERATION_KEY"|"TR31_S0_ASYMMETRIC_KEY_FOR_DIGITAL_SIGNATURE"|"TR31_V1_IBM3624_PIN_VERIFICATION_KEY"|"TR31_V2_VISA_PIN_VERIFICATION_KEY"|"TR31_K2_TR34_ASYMMETRIC_KEY"
              },
              "PublicKeyCertificate": "string"
            },
            "Tr31KeyBlock": {
              "WrappedKeyBlock": "string",
              "WrappingKeyIdentifier": "string"
            },
            "Tr34KeyBlock": {
              "CertificateAuthorityPublicKeyIdentifier": "string",
              "ImportToken": "string",
              "KeyBlockFormat": "X9_TR34_2012",
              "RandomNonce": "string",
              "SigningKeyCertificate": "string",
              "WrappedKeyBlock": "string"
            },
            "TrustedCertificatePublicKey": {
              "CertificateAuthorityPublicKeyIdentifier": "string",
              "KeyAttributes": {
                "KeyAlgorithm": "TDES_2KEY"|"TDES_3KEY"|"AES_128"|"AES_192"|"AES_256"|"RSA_2048"|"RSA_3072"|"RSA_4096",
                "KeyClass": "SYMMETRIC_KEY"|"ASYMMETRIC_KEY_PAIR"|"PRIVATE_KEY"|"PUBLIC_KEY",
                "KeyModesOfUse": {
                  "Decrypt": true|false,
                  "DeriveKey": true|false,
                  "Encrypt": true|false,
                  "Generate": true|false,
                  "NoRestrictions": true|false,
                  "Sign": true|false,
                  "Unwrap": true|false,
                  "Verify": true|false,
                  "Wrap": true|false
                },
                "KeyUsage": "TR31_B0_BASE_DERIVATION_KEY"|"TR31_C0_CARD_VERIFICATION_KEY"|"TR31_D0_SYMMETRIC_DATA_ENCRYPTION_KEY"|"TR31_D1_ASYMMETRIC_KEY_FOR_DATA_ENCRYPTION"|"TR31_E0_EMV_MKEY_APP_CRYPTOGRAMS"|"TR31_E1_EMV_MKEY_CONFIDENTIALITY"|"TR31_E2_EMV_MKEY_INTEGRITY"|"TR31_E4_EMV_MKEY_DYNAMIC_NUMBERS"|"TR31_E5_EMV_MKEY_CARD_PERSONALIZATION"|"TR31_E6_EMV_MKEY_OTHER"|"TR31_K0_KEY_ENCRYPTION_KEY"|"TR31_K1_KEY_BLOCK_PROTECTION_KEY"|"TR31_K3_ASYMMETRIC_KEY_FOR_KEY_AGREEMENT"|"TR31_M3_ISO_9797_3_MAC_KEY"|"TR31_M6_ISO_9797_5_CMAC_KEY"|"TR31_M7_HMAC_KEY"|"TR31_P0_PIN_ENCRYPTION_KEY"|"TR31_P1_PIN_GENERATION_KEY"|"TR31_S0_ASYMMETRIC_KEY_FOR_DIGITAL_SIGNATURE"|"TR31_V1_IBM3624_PIN_VERIFICATION_KEY"|"TR31_V2_VISA_PIN_VERIFICATION_KEY"|"TR31_K2_TR34_ASYMMETRIC_KEY"
              },
              "PublicKeyCertificate": "string"
            }
          }

       --tags (list)
          The tags to attach to the key. Each tag consists of a tag key and  a
          tag  value. Both the tag key and the tag value are required, but the
          tag value can be an empty (null) string. You can't  have  more  than
          one  tag on an Amazon Web Services Payment Cryptography key with the
          same tag key.

          You can't have more than one tag on an Amazon Web  Services  Payment
          Cryptography  key  with the same tag key. If you specify an existing
          tag key with a different tag  value,  Amazon  Web  Services  Payment
          Cryptography replaces the current tag value with the specified one.

          To use this parameter, you must have TagResource permission.

          WARNING:
              Don't  include  confidential  or  sensitive  information in this
              field. This field may be displayed in  plaintext  in  CloudTrail
              logs and other output.

          NOTE:
              Tagging or untagging an Amazon Web Services Payment Cryptography
              key can allow or deny permission to the key.

          (structure)
              A structure that contains information about a tag.

              Key -> (string)
                 The key of the tag.

              Value -> (string)
                 The value of the tag.

       Shorthand Syntax:

          Key=string,Value=string ...

       JSON Syntax:

          [
            {
              "Key": "string",
              "Value": "string"
            }
            ...
          ]

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

OUTPUT
       Key -> (structure)
          The  KeyARN  of the key material imported within Amazon Web Services
          Payment Cryptography.

          CreateTimestamp -> (timestamp)
              The date and time when the key was created.

          DeletePendingTimestamp -> (timestamp)
              The date and time after which Amazon Web Services Payment  Cryp-
              tography  will  delete  the key. This value is present only when
              KeyState is DELETE_PENDING and the key is  scheduled  for  dele-
              tion.

          DeleteTimestamp -> (timestamp)
              The  date and time after which Amazon Web Services Payment Cryp-
              tography will delete the key. This value is  present  only  when
              when the KeyState is DELETE_COMPLETE and the Amazon Web Services
              Payment Cryptography key is deleted.

          Enabled -> (boolean)
              Specifies whether the key is enabled.

          Exportable -> (boolean)
              Specifies whether the key is exportable. This data is  immutable
              after the key is created.

          KeyArn -> (string)
              The Amazon Resource Name (ARN) of the key.

          KeyAttributes -> (structure)
              The  role of the key, the algorithm it supports, and the crypto-
              graphic operations allowed with the key. This data is  immutable
              after the key is created.

              KeyAlgorithm -> (string)
                 The  key algorithm to be use during creation of an Amazon Web
                 Services Payment Cryptography key.

                 For symmetric keys, Amazon Web Services Payment  Cryptography
                 supports AES and TDES algorithms. For asymmetric keys, Amazon
                 Web Services Payment Cryptography supports RSA  and  ECC_NIST
                 algorithms.

              KeyClass -> (string)
                 The  type  of Amazon Web Services Payment Cryptography key to
                 create, which determines  the  classication  of  the  crypto-
                 graphic  method and whether Amazon Web Services Payment Cryp-
                 tography key contains a symmetric key or  an  asymmetric  key
                 pair.

              KeyModesOfUse -> (structure)
                 The list of cryptographic operations that you can perform us-
                 ing the key.

                 Decrypt -> (boolean)
                     Species whether an Amazon Web Services Payment Cryptogra-
                     phy key can be used to decrypt data.

                 DeriveKey -> (boolean)
                     Species whether an Amazon Web Services Payment Cryptogra-
                     phy key can be used to derive new keys.

                 Encrypt -> (boolean)
                     Species whether an Amazon Web Services Payment Cryptogra-
                     phy key can be used to encrypt data.

                 Generate -> (boolean)
                     Species whether an Amazon Web Services Payment Cryptogra-
                     phy key can be used to generate and verify other card and
                     PIN verification keys.

                 NoRestrictions -> (boolean)
                     Species whether an Amazon Web Services Payment Cryptogra-
                     phy key has no special restrictions other  than  the  re-
                     strictions implied by KeyUsage .

                 Sign -> (boolean)
                     Species whether an Amazon Web Services Payment Cryptogra-
                     phy key can be used for signing.

                 Unwrap -> (boolean)
                     Species whether an Amazon Web Services Payment Cryptogra-
                     phy key can be used to unwrap other keys.

                 Verify -> (boolean)
                     Species whether an Amazon Web Services Payment Cryptogra-
                     phy key can be used to verify signatures.

                 Wrap -> (boolean)
                     Species whether an Amazon Web Services Payment Cryptogra-
                     phy key can be used to wrap other keys.

              KeyUsage -> (string)
                 The  cryptographic  usage  of  an Amazon Web Services Payment
                 Cryptography key as dened in section A.5.2 of the TR-31 spec.

          KeyCheckValue -> (string)
              The key check value (KCV) is used to check if all parties  hold-
              ing  a  given  key have the same key or to detect that a key has
              changed. Amazon Web Services Payment Cryptography calculates the
              KCV  by  using standard algorithms, typically by encrypting 8 or
              16 bytes or "00" or "01" and then truncating the result  to  the
              first 3 bytes, or 6 hex digits, of the resulting cryptogram.

          KeyCheckValueAlgorithm -> (string)
              The algorithm used for calculating key check value (KCV) for DES
              and AES keys. For a DES key, Amazon Web Services  Payment  Cryp-
              tography computes the KCV by encrypting 8 bytes, each with value
              '00', with the key to be checked and retaining the 3 highest or-
              der  bytes  of  the encrypted result. For an AES key, Amazon Web
              Services Payment Cryptography computes the KCV by  encrypting  8
              bytes,  each with value '01', with the key to be checked and re-
              taining the 3 highest order bytes of the encrypted result.

          KeyOrigin -> (string)
              The source of the key material. For keys created  within  Amazon
              Web   Services  Payment  Cryptography,  the  value  is  AWS_PAY-
              MENT_CRYPTOGRAPHY . For keys imported into Amazon  Web  Services
              Payment Cryptography, the value is EXTERNAL .

          KeyState -> (string)
              The state of key that is being created or deleted.

          UsageStartTimestamp -> (timestamp)
              The  date and time after which Amazon Web Services Payment Cryp-
              tography will start using the key material for cryptographic op-
              erations.

          UsageStopTimestamp -> (timestamp)
              The  date and time after which Amazon Web Services Payment Cryp-
              tography will stop using the key material for cryptographic  op-
              erations.



                                                                  IMPORT-KEY()
