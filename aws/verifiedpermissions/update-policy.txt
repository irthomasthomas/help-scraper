UPDATE-POLICY()                                                UPDATE-POLICY()



NAME
       update-policy -

DESCRIPTION
       Modifies  a  Cedar static policy in the specified policy store. You can
       change only certain elements of the  UpdatePolicyDefinition  parameter.
       You  can  directly  update  only  static  policies.  To  change  a tem-
       plate-linked policy,  you  must  update  the  template  instead,  using
       UpdatePolicyTemplate .

       NOTE:
          If policy validation is enabled in the policy store, then updating a
          static policy causes Verified Permissions  to  validate  the  policy
          against the schema in the policy store. If the updated static policy
          doesn't pass validation, the operation fails and  the  update  isn't
          stored.

       See also: AWS API Documentation

SYNOPSIS
            update-policy
          --policy-store-id <value>
          --policy-id <value>
          --definition <value>
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --policy-store-id (string)
          Specifies  the  ID of the policy store that contains the policy that
          you want to update.

       --policy-id (string)
          Specifies the ID of the policy that you want to update. To find this
          value, you can use ListPolicies .

       --definition (tagged union structure)
          Specifies the updated policy content that you want to replace on the
          specified policy. The content must be valid  Cedar  policy  language
          text.

          You  can  change only the following elements from the policy defini-
          tion:

          o The action referenced by the policy.

          o Any conditional clauses, such as when or unless clauses.

          You can't change the following elements:

          o Changing from static to templateLinked .

          o Changing the effect of the policy from permit or forbid .

          o The principal referenced by the policy.

          o The resource referenced by the policy.

          NOTE:
              This is a Tagged Union structure. Only one of the following  top
              level keys can be set: static.

          static -> (structure)
              Contains  details  about  the  updates to be applied to a static
              policy.

              description -> (string)
                 Specifies the description to be added to or replaced  on  the
                 static policy.

              statement -> (string)
                 Specifies  the  Cedar  policy language text to be added to or
                 replaced on the static policy.

                 WARNING:
                     You can change only the following elements from the orig-
                     inal content:

                     o The action referenced by the policy.

                     o Any   conditional  clauses,  such  as  when  or  unless
                       clauses.

                     You can't change the following elements:

                     o Changing from StaticPolicy to TemplateLinkedPolicy .

                     o The effect (permit or forbid ) of the policy.

                     o The principal referenced by the policy.

                     o The resource referenced by the policy.

       Shorthand Syntax:

          static={description=string,statement=string}

       JSON Syntax:

          {
            "static": {
              "description": "string",
              "statement": "string"
            }
          }

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

EXAMPLES
       NOTE:
          To  use  the following examples, you must have the AWS CLI installed
          and configured. See the Getting started guide in the  AWS  CLI  User
          Guide for more information.

          Unless  otherwise  stated,  all  examples  have  unix-like quotation
          rules. These examples will need to be  adapted  to  your  terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       Example 1: To create a static policy

       The following create-policy example creates a static policy with a pol-
       icy scope that specifies both a principal and a resource.

          aws verifiedpermissions create-policy \
              --definition file://definition.txt \
              --policy-store-id PSEXAMPLEabcdefg111111

       The statement parameter takes a string representation of a JSON object.
       It contains embedded quotation marks (") within the outermost quotation
       mark pair. This requires you to convert the JSON to a string by preced-
       ing all embedded quotation marks with a backslash character ( "  )  and
       combining all lines into a single text line with no line breaks.

       Example strings can be displayed wrapped across multiple lines here for
       readability, but the operation requires the parameters be submitted  as
       single line strings.

       Contents of file definition.txt:

          {
              "static": {
                  "description":  "Grant everyone of janeFriends UserGroup access to the vacationFolder Album",
                  "statement": "permit(principal in UserGroup::\"janeFriends\", action, resource in Album::\"vacationFolder\" );"
              }
          }

       Output:

          {
              "createdDate": "2023-06-12T20:33:37.382907+00:00",
              "lastUpdatedDate": "2023-06-12T20:33:37.382907+00:00",
              "policyId": "SPEXAMPLEabcdefg111111",
              "policyStoreId": "PSEXAMPLEabcdefg111111",
              "policyType": "STATIC",
              "principal": {
                  "entityId": "janeFriends",
                  "entityType": "UserGroup"
              },
              "resource": {
                  "entityId": "vacationFolder",
                  "entityType": "Album"
              }
          }

       Example  2:  To create a static policy that grants access to a resource
       to everyone

       The following create-policy example creates a static policy with a pol-
       icy scope that specifies only a resource.

          aws verifiedpermissions create-policy \
              --definition file://definition2.txt \
              --policy-store-id PSEXAMPLEabcdefg111111

       Contents of file definition2.txt:

          {
              "static": {
                  "description":  "Grant everyone access to the publicFolder Album",
                  "statement": "permit(principal, action, resource in Album::\"publicFolder\");"
              }
          }

       Output:

          {
              "createdDate": "2023-06-12T20:39:44.975897+00:00",
              "lastUpdatedDate": "2023-06-12T20:39:44.975897+00:00",
              "policyId": "PbfR73F8oh5MMfr9uRtFDB",
              "policyStoreId": "PSEXAMPLEabcdefg222222",
              "policyType": "STATIC",
              "resource": {
                  "entityId": "publicFolder",
                  "entityType": "Album"
              }
          }

       Example  3:  To create a template-linked policy that is associated with
       the specified template

       The following create-policy example creates  a  template-linked  policy
       using  the specified policy template and associates the specified prin-
       cipal to use with the new template-linked policy.

          aws verifiedpermissions create-policy \
              --definition file://definition2.txt \
              --policy-store-id PSEXAMPLEabcdefg111111

       Contents of definition3.txt:

          {
              "templateLinked": {
                  "policyTemplateId": "PTEXAMPLEabcdefg111111",
                  "principal": {
                      "entityType": "User",
                      "entityId": "alice"
                  }
              }
          }

       Output:

          {
              "createdDate": "2023-06-12T20:49:51.490211+00:00",
              "lastUpdatedDate": "2023-06-12T20:49:51.490211+00:00",
              "policyId": "TPEXAMPLEabcdefg111111",
              "policyStoreId": "PSEXAMPLEabcdefg111111",
              "policyType": "TEMPLATE_LINKED",
              "principal": {
                  "entityId": "alice",
                  "entityType": "User"
              },
              "resource": {
                  "entityId": "VacationPhoto94.jpg",
                  "entityType": "Photo"
              }
          }

       For more information about policies, see  Amazon  Verified  Permissions
       policies in the Amazon Verified Permissions User Guide.

OUTPUT
       policyStoreId -> (string)
          The  ID  of  the  policy store that contains the policy that was up-
          dated.

       policyId -> (string)
          The ID of the policy that was updated.

       policyType -> (string)
          The type of the policy that was updated.

       principal -> (structure)
          The principal specified in the policy's scope.  This  element  isn't
          included  in the response when Principal isn't present in the policy
          content.

          entityType -> (string)
              The type of an entity.

              Example: "entityType":"*typeName* "

          entityId -> (string)
              The identifier of an entity.
                 "entityId":"*identifier* "

       resource -> (structure)
          The resource specified in the policy's scope. This element isn't in-
          cluded  in  the  response  when Resource isn't present in the policy
          content.

          entityType -> (string)
              The type of an entity.

              Example: "entityType":"*typeName* "

          entityId -> (string)
              The identifier of an entity.
                 "entityId":"*identifier* "

       createdDate -> (timestamp)
          The date and time that the policy was originally created.

       lastUpdatedDate -> (timestamp)
          The date and time that the policy was most recently updated.



                                                               UPDATE-POLICY()
