GET-IDENTITY-SOURCE()                                    GET-IDENTITY-SOURCE()



NAME
       get-identity-source -

DESCRIPTION
       Retrieves the details about the specified identity source.

       See also: AWS API Documentation

SYNOPSIS
            get-identity-source
          --policy-store-id <value>
          --identity-source-id <value>
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --policy-store-id (string)
          Specifies  the  ID  of  the  policy store that contains the identity
          source you want information about.

       --identity-source-id (string)
          Specifies the ID of the identity source you want information about.

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable  automatic pagination. If automatic pagination is disabled, the
       AWS CLI will only make one call, for the first page of results.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

EXAMPLES
       NOTE:
          To use the following examples, you must have the AWS  CLI  installed
          and  configured.  See  the Getting started guide in the AWS CLI User
          Guide for more information.

          Unless otherwise  stated,  all  examples  have  unix-like  quotation
          rules.  These  examples  will  need to be adapted to your terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To retrieve details about an identity source

       The  following get-identity-source example displays the details for the
       identity source with the specified Id.

          aws verifiedpermissions get-identity-source \
              --identity-source  ISEXAMPLEabcdefg111111 \
              --policy-store-id PSEXAMPLEabcdefg111111

       Output:

          {
              "createdDate": "2023-06-12T22:27:49.150035+00:00",
              "details": {
                  "clientIds": [ "a1b2c3d4e5f6g7h8i9j0kalbmc" ],
                  "discoveryUrl": "https://cognito-idp.us-west-2.amazonaws.com/us-west-2_1a2b3c4d5",
                  "openIdIssuer": "COGNITO",
                  "userPoolArn": "arn:aws:cognito-idp:us-west-2:123456789012:userpool/us-west-2_1a2b3c4d5"
              },
              "identitySourceId": "ISEXAMPLEabcdefg111111",
              "lastUpdatedDate": "2023-06-12T22:27:49.150035+00:00",
              "policyStoreId": "PSEXAMPLEabcdefg111111",
              "principalEntityType": "User"
          }

       For more information about identity sources, see Using Amazon  Verified
       Permissions  with identity providers in the Amazon Verified Permissions
       User Guide.

OUTPUT
       createdDate -> (timestamp)
          The date and time that the identity source was originally created.

       details -> (structure)
          A structure that describes the configuration of the identity source.

          clientIds -> (list)
              The application client IDs associated with the specified  Amazon
              Cognito user pool that are enabled for this identity source.

              (string)

          userPoolArn -> (string)
              The  Amazon  Resource Name (ARN) of the Amazon Cognito user pool
              whose identities are accessible  to  this  Verified  Permissions
              policy store.

          discoveryUrl -> (string)
              The  well-known URL that points to this user pool's OIDC discov-
              ery endpoint. This is a URL string in the following format. This
              URL  replaces  the placeholders for both the Amazon Web Services
              Region and the user pool identifier with those  appropriate  for
              this user pool.
                 https://cognito-idp.*<region>*                       .amazon-
                 aws.com/*<user-pool-id>* /.well-known/openid-configuration

          openIdIssuer -> (string)
              A string that identifies the type of OIDC service represented by
              this identity source.

              At this time, the only valid value is cognito .

       identitySourceId -> (string)
          The ID of the identity source.

       lastUpdatedDate -> (timestamp)
          The  date  and  time  that the identity source was most recently up-
          dated.

       policyStoreId -> (string)
          The ID of the policy store that contains the identity source.

       principalEntityType -> (string)
          The data type of principals generated for  identities  authenticated
          by this identity source.

       configuration -> (tagged union structure)
          Contains configuration information about an identity source.

          NOTE:
              This  is a Tagged Union structure. Only one of the following top
              level keys can be set: cognitoUserPoolConfiguration,  openIdCon-
              nectConfiguration.

          cognitoUserPoolConfiguration -> (structure)
              Contains  configuration  details  of  a Amazon Cognito user pool
              that Verified Permissions can use as a source  of  authenticated
              identities  as  entities.  It specifies the Amazon Resource Name
              (ARN) of a Amazon Cognito user pool,  the  policy  store  entity
              that you want to assign to user groups, and one or more applica-
              tion client IDs.

              Example: "configuration":{"cognitoUserPoolConfiguration":{"user-
              PoolArn":"arn:aws:cognito-idp:us-east-1:123456789012:user-
              pool/us-east-1_1a2b3c4d5","clientIds":
              ["a1b2c3d4e5f6g7h8i9j0kalbmc"],"groupConfiguration":  {"groupEn-
              tityType": "MyCorp::Group"}}}

              userPoolArn -> (string)
                 The Amazon Resource Name (ARN) of  the  Amazon  Cognito  user
                 pool that contains the identities to be authorized.

                 Example:             "userPoolArn":             "arn:aws:cog-
                 nito-idp:us-east-1:123456789012:userpool/us-east-1_1a2b3c4d5"

              clientIds -> (list)
                 The unique application client IDs that  are  associated  with
                 the specified Amazon Cognito user pool.

                 Example: "clientIds": ["&ExampleCogClientId;"]

                 (string)

              issuer -> (string)
                 The  OpenID  Connect  (OIDC)  issuer ID of the Amazon Cognito
                 user pool that contains the identities to be authorized.

                 Example:   "issuer":   "https://cognito-idp.us-east-1.amazon-
                 aws.com/us-east-1_1a2b3c4d5"

              groupConfiguration -> (structure)
                 The type of entity that a policy store maps to groups from an
                 Amazon Cognito user pool identity source.

                 groupEntityType -> (string)
                     The name of the schema entity type that's mapped  to  the
                     user pool group. Defaults to AWS::CognitoGroup .

          openIdConnectConfiguration -> (structure)
              Contains configuration details of an OpenID Connect (OIDC) iden-
              tity provider, or identity source, that Verified Permissions can
              use to generate entities from authenticated identities. It spec-
              ifies the issuer URL, token type that you want to use, and  pol-
              icy store entity details.

              Example:"configuration":{"openIdConnectConfiguration":{"is-
              suer":"https://auth.example.com","tokenSelection":{"accessTo-
              kenOnly":{"audiences":["https://myapp.exam-
              ple.com","https://myapp2.example.com"],"principalId-
              Claim":"sub"}},"entityIdPrefix":"MyOIDCProvider","groupConfigu-
              ration":{"groupClaim":"groups","groupEntityType":"MyCorp::User-
              Group"}}}

              issuer -> (string)
                 The  issuer  URL  of an OIDC identity provider. This URL must
                 have   an   OIDC   discovery    endpoint    at    the    path
                 .well-known/openid-configuration .

              entityIdPrefix -> (string)
                 A descriptive string that you want to prefix to user entities
                 from your OIDC identity provider. For example, if you set  an
                 entityIdPrefix  of MyOIDCProvider , you can reference princi-
                 pals in your  policies  in  the  format  MyCorp::User::MyOID-
                 CProvider|Carlos .

              groupConfiguration -> (structure)
                 The  claim  in OIDC identity provider tokens that indicates a
                 user's group membership, and the entity type that you want to
                 map it to. For example, this object can map the contents of a
                 groups claim to MyCorp::UserGroup .

                 groupClaim -> (string)
                     The token claim that you want Verified Permissions to in-
                     terpret as group membership. For example, groups .

                 groupEntityType -> (string)
                     The  policy  store  entity type that you want to map your
                     users' group claim to. For example, MyCorp::UserGroup . A
                     group  entity  type is an entity that can have a user en-
                     tity type as a member.

              tokenSelection -> (tagged union structure)
                 The token type that you want to process from your OIDC  iden-
                 tity  provider. Your policy store can process either identity
                 (ID) or access tokens from a given OIDC identity source.

                 NOTE:
                     This is a Tagged Union structure. Only one of the follow-
                     ing top level keys can be set: accessTokenOnly, identity-
                     TokenOnly.

                 accessTokenOnly -> (structure)
                     The OIDC configuration for processing access tokens. Con-
                     tains    allowed    audience    claims,    for    example
                     https://auth.example.com , and the claim that you want to
                     map to the principal, for example sub .

                     principalIdClaim -> (string)
                        The claim that determines the principal in OIDC access
                        tokens. For example, sub .

                     audiences -> (list)
                        The access token aud claim values that you want to ac-
                        cept    in    your    policy   store.   For   example,
                        https://myapp.example.com,  https://myapp2.example.com
                        .

                        (string)

                 identityTokenOnly -> (structure)
                     The  OIDC  configuration for processing identity (ID) to-
                     kens. Contains allowed client ID claims, for example 1ex-
                     ample23456789 , and the claim that you want to map to the
                     principal, for example sub .

                     principalIdClaim -> (string)
                        The claim that determines the principal in OIDC access
                        tokens. For example, sub .

                     clientIds -> (list)
                        The ID token audience, or client ID, claim values that
                        you want to accept in your policy store from  an  OIDC
                        identity provider. For example, 1example23456789, 2ex-
                        ample10111213 .

                        (string)



                                                         GET-IDENTITY-SOURCE()
