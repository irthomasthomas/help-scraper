IS-AUTHORIZED-WITH-TOKEN()                          IS-AUTHORIZED-WITH-TOKEN()



NAME
       is-authorized-with-token -

DESCRIPTION
       Makes  an  authorization  decision about a service request described in
       the parameters. The principal in this request comes  from  an  external
       identity  source  in  the form of an identity token formatted as a JSON
       web token (JWT) . The information in the parameters can also define ad-
       ditional  context  that Verified Permissions can include in the evalua-
       tion. The request is evaluated against all  matching  policies  in  the
       specified  policy  store. The result of the decision is either Allow or
       Deny , along with a list of the policies that resulted in the decision.

       WARNING:
          If you specify the identityToken parameter, then this operation  de-
          rives  the principal from that token. You must not also include that
          principal in the entities parameter or the operation fails  and  re-
          ports a conflict between the two entity sources.

          If you provide only an accessToken , then you can include the entity
          as part of the entities parameter to provide additional attributes.

       At this time, Verified Permissions accepts tokens from only Amazon Cog-
       nito.

       Verified  Permissions  validates  each token that is specified in a re-
       quest by checking its expiration date and its signature.

       WARNING:
          If you delete a Amazon Cognito user pool or user, tokens  from  that
          deleted  pool  or that deleted user continue to be usable until they
          expire.

       See also: AWS API Documentation

SYNOPSIS
            is-authorized-with-token
          --policy-store-id <value>
          [--identity-token <value>]
          [--access-token <value>]
          [--action <value>]
          [--resource <value>]
          [--context <value>]
          [--entities <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --policy-store-id (string)
          Specifies the ID of the policy store. Policies in this policy  store
          will be used to make an authorization decision for the input.

       --identity-token (string)
          Specifies an identity token for the principal to be authorized. This
          token is provided to you by the identity provider  (IdP)  associated
          with  the  specified identity source. You must specify either an Ac-
          cessToken or an IdentityToken , or both.

       --access-token (string)
          Specifies an access token for the principal to be  authorized.  This
          token  is  provided to you by the identity provider (IdP) associated
          with the specified identity source. You must specify either  an  Ac-
          cessToken , or an IdentityToken , or both.

       --action (structure)
          Specifies  the  requested  action to be authorized. Is the specified
          principal authorized to perform this action  on  the  specified  re-
          source.

          actionType -> (string)
              The type of an action.

          actionId -> (string)
              The ID of an action.

       Shorthand Syntax:

          actionType=string,actionId=string

       JSON Syntax:

          {
            "actionType": "string",
            "actionId": "string"
          }

       --resource (structure)
          Specifies the resource for which the authorization decision is made.
          For example, is the principal allowed to perform the action  on  the
          resource?

          entityType -> (string)
              The type of an entity.

              Example: "entityType":"*typeName* "

          entityId -> (string)
              The identifier of an entity.
                 "entityId":"*identifier* "

       Shorthand Syntax:

          entityType=string,entityId=string

       JSON Syntax:

          {
            "entityType": "string",
            "entityId": "string"
          }

       --context (tagged union structure)
          Specifies  additional context that can be used to make more granular
          authorization decisions.

          NOTE:
              This is a Tagged Union structure. Only one of the following  top
              level keys can be set: contextMap.

          contextMap -> (map)
              An  list  of attributes that are needed to successfully evaluate
              an authorization request. Each attribute in this array must  in-
              clude a map of a data type and its value.

              Example:         "Context":{"<KeyName1>":{"boolean":true},"<Key-
              Name2>":{"long":1234}}

              key -> (string)

              value -> (tagged union structure)
                 The value of an attribute.

                 Contains information about the runtime context for a  request
                 for which an authorization decision is made.

                 This  data  type is used as a member of the ContextDefinition
                 structure which is  uses  as  a  request  parameter  for  the
                 IsAuthorized and IsAuthorizedWithToken operations.

                 NOTE:
                     This is a Tagged Union structure. Only one of the follow-
                     ing top level keys can be set: boolean, entityIdentifier,
                     long, string, set, record.

                 boolean -> (boolean)
                     An attribute value of Boolean type.

                     Example: {"boolean": true}

                 entityIdentifier -> (structure)
                     An attribute value of type EntityIdentifier .

                     Example: "entityIdentifier": { "entityId": "<id>", "enti-
                     tyType": "<entity type>"}

                     entityType -> (string)
                        The type of an entity.

                        Example: "entityType":"*typeName* "

                     entityId -> (string)
                        The identifier of an entity.
                            "entityId":"*identifier* "

                 long -> (long)
                     An attribute value of Long type.

                     Example: {"long": 0}

                 string -> (string)
                     An attribute value of String type.

                     Example: {"string": "abc"}

                 set -> (list)
                     An attribute value of Set type.

                     Example: {"set": [ {} ] }

                     (tagged union structure)
                        The value of an attribute.

                        Contains information about the runtime context  for  a
                        request for which an authorization decision is made.

                        This   data   type   is   used  as  a  member  of  the
                        ContextDefinition structure which is uses as a request
                        parameter      for      the      IsAuthorized      and
                        IsAuthorizedWithToken operations.

                        NOTE:
                            This is a Tagged Union structure. Only one of  the
                            following  top level keys can be set: boolean, en-
                            tityIdentifier, long, string, set, record.

                        boolean -> (boolean)
                            An attribute value of Boolean type.

                            Example: {"boolean": true}

                        entityIdentifier -> (structure)
                            An attribute value of type EntityIdentifier .

                            Example: "entityIdentifier": { "entityId": "<id>",
                            "entityType": "<entity type>"}

                            entityType -> (string)
                               The type of an entity.

                               Example: "entityType":"*typeName* "

                            entityId -> (string)
                               The identifier of an entity.
                                   "entityId":"*identifier* "

                        long -> (long)
                            An attribute value of Long type.

                            Example: {"long": 0}

                        string -> (string)
                            An attribute value of String type.

                            Example: {"string": "abc"}

                        set -> (list)
                            An attribute value of Set type.

                            Example: {"set": [ {} ] }

                            ( ... recursive ... )

                        record -> (map)
                            An attribute value of Record type.

                            Example: {"record": { "keyName": {} } }

                            key -> (string)

                            ( ... recursive ... )

                 record -> (map)
                     An attribute value of Record type.

                     Example: {"record": { "keyName": {} } }

                     key -> (string)

                     value -> (tagged union structure)
                        The value of an attribute.

                        Contains  information  about the runtime context for a
                        request for which an authorization decision is made.

                        This  data  type  is  used  as   a   member   of   the
                        ContextDefinition structure which is uses as a request
                        parameter      for      the      IsAuthorized      and
                        IsAuthorizedWithToken operations.

                        NOTE:
                            This  is a Tagged Union structure. Only one of the
                            following top level keys can be set: boolean,  en-
                            tityIdentifier, long, string, set, record.

                        boolean -> (boolean)
                            An attribute value of Boolean type.

                            Example: {"boolean": true}

                        entityIdentifier -> (structure)
                            An attribute value of type EntityIdentifier .

                            Example: "entityIdentifier": { "entityId": "<id>",
                            "entityType": "<entity type>"}

                            entityType -> (string)
                               The type of an entity.

                               Example: "entityType":"*typeName* "

                            entityId -> (string)
                               The identifier of an entity.
                                   "entityId":"*identifier* "

                        long -> (long)
                            An attribute value of Long type.

                            Example: {"long": 0}

                        string -> (string)
                            An attribute value of String type.

                            Example: {"string": "abc"}

                        set -> (list)
                            An attribute value of Set type.

                            Example: {"set": [ {} ] }

                            ( ... recursive ... )

                        record -> (map)
                            An attribute value of Record type.

                            Example: {"record": { "keyName": {} } }

                            key -> (string)

                            ( ... recursive ... )

       JSON Syntax:

          {
            "contextMap": {"string": {
                  "boolean": true|false,
                  "entityIdentifier": {
                    "entityType": "string",
                    "entityId": "string"
                  },
                  "long": long,
                  "string": "string",
                  "set": [
                    {
                      "boolean": true|false,
                      "entityIdentifier": {
                        "entityType": "string",
                        "entityId": "string"
                      },
                      "long": long,
                      "string": "string",
                      "set": [
                        { ... recursive ... }
                        ...
                      ],
                      "record": {"string": { ... recursive ... }
                        ...}
                    }
                    ...
                  ],
                  "record": {"string": {
                        "boolean": true|false,
                        "entityIdentifier": {
                          "entityType": "string",
                          "entityId": "string"
                        },
                        "long": long,
                        "string": "string",
                        "set": [
                          { ... recursive ... }
                          ...
                        ],
                        "record": {"string": { ... recursive ... }
                          ...}
                      }
                    ...}
                }
              ...}
          }

       --entities (tagged union structure)
          Specifies the list of resources and their associated attributes that
          Verified Permissions can examine when evaluating the policies.

          NOTE:
              You can include only resource and action entities in this param-
              eter; you can't include principals.

              o The IsAuthorizedWithToken operation takes principal attributes
                from ** only ** the identityToken or accessToken passed to the
                operation.

              o For action entities, you can include only their Identifier and
                EntityType .

          NOTE:
              This  is a Tagged Union structure. Only one of the following top
              level keys can be set: entityList.

          entityList -> (list)
              An array of entities that are needed to successfully evaluate an
              authorization request. Each entity in this array must include an
              identifier for the entity, the attributes of the entity,  and  a
              list of any parent entities.

              (structure)
                 Contains  information  about an entity that can be referenced
                 in a Cedar policy.

                 This  data  type  is  used  as  one  of  the  fields  in  the
                 EntitiesDefinition structure.
                     {  "id":  { "entityType": "Photo", "entityId": "Vacation-
                     Photo94.jpg" }, "Attributes": {}, "Parents": [ { "entity-
                     Type": "Album", "entityId": "alice_folder" } ] }

                 identifier -> (structure)
                     The identifier of the entity.

                     entityType -> (string)
                        The type of an entity.

                        Example: "entityType":"*typeName* "

                     entityId -> (string)
                        The identifier of an entity.
                            "entityId":"*identifier* "

                 attributes -> (map)
                     A list of attributes for the entity.

                     key -> (string)

                     value -> (tagged union structure)
                        The value of an attribute.

                        Contains  information  about the runtime context for a
                        request for which an authorization decision is made.

                        This  data  type  is  used  as   a   member   of   the
                        ContextDefinition structure which is uses as a request
                        parameter      for      the      IsAuthorized      and
                        IsAuthorizedWithToken operations.

                        NOTE:
                            This  is a Tagged Union structure. Only one of the
                            following top level keys can be set: boolean,  en-
                            tityIdentifier, long, string, set, record.

                        boolean -> (boolean)
                            An attribute value of Boolean type.

                            Example: {"boolean": true}

                        entityIdentifier -> (structure)
                            An attribute value of type EntityIdentifier .

                            Example: "entityIdentifier": { "entityId": "<id>",
                            "entityType": "<entity type>"}

                            entityType -> (string)
                               The type of an entity.

                               Example: "entityType":"*typeName* "

                            entityId -> (string)
                               The identifier of an entity.
                                   "entityId":"*identifier* "

                        long -> (long)
                            An attribute value of Long type.

                            Example: {"long": 0}

                        string -> (string)
                            An attribute value of String type.

                            Example: {"string": "abc"}

                        set -> (list)
                            An attribute value of Set type.

                            Example: {"set": [ {} ] }

                            (tagged union structure)
                               The value of an attribute.

                               Contains information about the runtime  context
                               for  a request for which an authorization deci-
                               sion is made.

                               This data type is  used  as  a  member  of  the
                               ContextDefinition  structure which is uses as a
                               request  parameter  for  the  IsAuthorized  and
                               IsAuthorizedWithToken operations.

                               NOTE:
                                   This  is a Tagged Union structure. Only one
                                   of the following top level keys can be set:
                                   boolean,  entityIdentifier,  long,  string,
                                   set, record.

                               boolean -> (boolean)
                                   An attribute value of Boolean type.

                                   Example: {"boolean": true}

                               entityIdentifier -> (structure)
                                   An attribute value of type EntityIdentifier
                                   .

                                   Example:  "entityIdentifier": { "entityId":
                                   "<id>", "entityType": "<entity type>"}

                                   entityType -> (string)
                                      The type of an entity.

                                      Example: "entityType":"*typeName* "

                                   entityId -> (string)
                                      The identifier of an entity.
                                          "entityId":"*identifier* "

                               long -> (long)
                                   An attribute value of Long type.

                                   Example: {"long": 0}

                               string -> (string)
                                   An attribute value of String type.

                                   Example: {"string": "abc"}

                               set -> (list)
                                   An attribute value of Set type.

                                   Example: {"set": [ {} ] }

                                   ( ... recursive ... )

                               record -> (map)
                                   An attribute value of Record type.

                                   Example: {"record": { "keyName": {} } }

                                   key -> (string)

                                   ( ... recursive ... )

                        record -> (map)
                            An attribute value of Record type.

                            Example: {"record": { "keyName": {} } }

                            key -> (string)

                            value -> (tagged union structure)
                               The value of an attribute.

                               Contains information about the runtime  context
                               for  a request for which an authorization deci-
                               sion is made.

                               This data type is  used  as  a  member  of  the
                               ContextDefinition  structure which is uses as a
                               request  parameter  for  the  IsAuthorized  and
                               IsAuthorizedWithToken operations.

                               NOTE:
                                   This  is a Tagged Union structure. Only one
                                   of the following top level keys can be set:
                                   boolean,  entityIdentifier,  long,  string,
                                   set, record.

                               boolean -> (boolean)
                                   An attribute value of Boolean type.

                                   Example: {"boolean": true}

                               entityIdentifier -> (structure)
                                   An attribute value of type EntityIdentifier
                                   .

                                   Example:  "entityIdentifier": { "entityId":
                                   "<id>", "entityType": "<entity type>"}

                                   entityType -> (string)
                                      The type of an entity.

                                      Example: "entityType":"*typeName* "

                                   entityId -> (string)
                                      The identifier of an entity.
                                          "entityId":"*identifier* "

                               long -> (long)
                                   An attribute value of Long type.

                                   Example: {"long": 0}

                               string -> (string)
                                   An attribute value of String type.

                                   Example: {"string": "abc"}

                               set -> (list)
                                   An attribute value of Set type.

                                   Example: {"set": [ {} ] }

                                   ( ... recursive ... )

                               record -> (map)
                                   An attribute value of Record type.

                                   Example: {"record": { "keyName": {} } }

                                   key -> (string)

                                   ( ... recursive ... )

                 parents -> (list)
                     The parents in the hierarchy that contains the entity.

                     (structure)
                        Contains the identifier of an entity, including its ID
                        and type.

                        This  data  type  is  used  as a request parameter for
                        IsAuthorized operation, and as  a  response  parameter
                        for  the  CreatePolicy  , GetPolicy , and UpdatePolicy
                        operations.

                        Example:       {"entityId":"*string*        ","entity-
                        Type":"*string* "}

                        entityType -> (string)
                            The type of an entity.

                            Example: "entityType":"*typeName* "

                        entityId -> (string)
                            The identifier of an entity.
                               "entityId":"*identifier* "

       JSON Syntax:

          {
            "entityList": [
              {
                "identifier": {
                  "entityType": "string",
                  "entityId": "string"
                },
                "attributes": {"string": {
                      "boolean": true|false,
                      "entityIdentifier": {
                        "entityType": "string",
                        "entityId": "string"
                      },
                      "long": long,
                      "string": "string",
                      "set": [
                        {
                          "boolean": true|false,
                          "entityIdentifier": {
                            "entityType": "string",
                            "entityId": "string"
                          },
                          "long": long,
                          "string": "string",
                          "set": [
                            { ... recursive ... }
                            ...
                          ],
                          "record": {"string": { ... recursive ... }
                            ...}
                        }
                        ...
                      ],
                      "record": {"string": {
                            "boolean": true|false,
                            "entityIdentifier": {
                              "entityType": "string",
                              "entityId": "string"
                            },
                            "long": long,
                            "string": "string",
                            "set": [
                              { ... recursive ... }
                              ...
                            ],
                            "record": {"string": { ... recursive ... }
                              ...}
                          }
                        ...}
                    }
                  ...},
                "parents": [
                  {
                    "entityType": "string",
                    "entityId": "string"
                  }
                  ...
                ]
              }
              ...
            ]
          }

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

EXAMPLES
       NOTE:
          To use the following examples, you must have the AWS  CLI  installed
          and  configured.  See  the Getting started guide in the AWS CLI User
          Guide for more information.

          Unless otherwise  stated,  all  examples  have  unix-like  quotation
          rules.  These  examples  will  need to be adapted to your terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       Example 1: To request an authorization decision for a user request (al-
       low)

       The following is-authorized-with-token example requests  an  authoriza-
       tion  decision  for a user who was authenticated by Amazon Cognito. The
       request uses the identity token provided by Cognito rather than the ac-
       cess token. In this example, the specified information store is config-
       ured to return principals as entities of type CognitoUser.

          aws verifiedpermissions is-authorized-with-token \
              --action actionId="View",actionType="Action" \
              --resource entityId="vacationPhoto94.jpg",entityType="Photo" \
              --policy-store-id PSEXAMPLEabcdefg111111 \
              --identity-token "AbCdE12345...long.string...54321EdCbA"

       The policy store contains a policy with the  following  statement  that
       accepts identities from the specified Cognito user pool and application
       Id.

          permit(
              principal == CognitoUser::"us-east-1_1a2b3c4d5|a1b2c3d4e5f6g7h8i9j0kalbmc",
              action,
              resource == Photo::"VacationPhoto94.jpg"
          );

       Output:

          {
              "decision":"Allow",
              "determiningPolicies":[
                  {
                  "determiningPolicyId":"SPEXAMPLEabcdefg111111"
                  }
              ],
              "errors":[]
          }

       For more information about using identities from a Cognito  user  pool,
       see  Using  Amazon  Verified Permissions with identity providers in the
       Amazon Verified Permissions User Guide.

OUTPUT
       decision -> (string)
          An authorization decision that indicates if  the  authorization  re-
          quest should be allowed or denied.

       determiningPolicies -> (list)
          The  list of determining policies used to make the authorization de-
          cision. For example, if there are multiple matching policies,  where
          at  least  one  is a forbid policy, then because forbid always over-
          rides permit the forbid policies are the  determining  policies.  If
          all  matching  policies are permit policies, then those policies are
          the determining policies. When no policies match and the response is
          the default DENY, there are no determining policies.

          (structure)
              Contains  information  about one of the policies that determined
              an authorization decision.

              This data type is used as an element in a response parameter for
              the IsAuthorized and IsAuthorizedWithToken operations.

              Example:             "determiningPolicies":[{"policyId":"SPEXAM-
              PLEabcdefg111111"}]

              policyId -> (string)
                 The Id of a policy that determined to an authorization  deci-
                 sion.

                 Example: "policyId":"SPEXAMPLEabcdefg111111"

       errors -> (list)
          Errors that occurred while making an authorization decision. For ex-
          ample, a policy references an entity or entity attribute  that  does
          not exist in the slice.

          (structure)
              Contains a description of an evaluation error.

              This   data   type  is  used  as  a  request  parameter  in  the
              IsAuthorized and IsAuthorizedWithToken operations.

              errorDescription -> (string)
                 The error description.



                                                    IS-AUTHORIZED-WITH-TOKEN()
