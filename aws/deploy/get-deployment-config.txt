GET-DEPLOYMENT-CONFIG()                                GET-DEPLOYMENT-CONFIG()



NAME
       get-deployment-config -

DESCRIPTION
       Gets information about a deployment configuration.

       See also: AWS API Documentation

SYNOPSIS
            get-deployment-config
          --deployment-config-name <value>
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --deployment-config-name (string)
          The  name of a deployment configuration associated with the IAM user
          or Amazon Web Services account.

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

EXAMPLES
       NOTE:
          To  use  the following examples, you must have the AWS CLI installed
          and configured. See the Getting started guide in the  AWS  CLI  User
          Guide for more information.

          Unless  otherwise  stated,  all  examples  have  unix-like quotation
          rules. These examples will need to be  adapted  to  your  terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To get information about a deployment configuration

       The following get-deployment-config example displays information  about
       a  deployment  configuration that is associated with the user's AWS ac-
       count.

          aws deploy get-deployment-config --deployment-config-name ThreeQuartersHealthy

       Output:

          {
              "deploymentConfigInfo": {
                  "deploymentConfigId": "a1b2c3d4-5678-90ab-cdef-11111EXAMPLE",
                  "minimumHealthyHosts": {
                      "type": "FLEET_PERCENT",
                      "value": 75
                  },
                  "createTime": 1411081164.379,
                  "deploymentConfigName": "ThreeQuartersHealthy"
              }
          }

OUTPUT
       deploymentConfigInfo -> (structure)
          Information about the deployment configuration.

          deploymentConfigId -> (string)
              The deployment configuration ID.

          deploymentConfigName -> (string)
              The deployment configuration name.

          minimumHealthyHosts -> (structure)
              Information about the number or percentage  of  minimum  healthy
              instance.

              type -> (string)
                 The minimum healthy instance type:

                 o HOST_COUNT  : The minimum number of healthy instances as an
                   absolute value.

                 o FLEET_PERCENT : The minimum number of healthy instances  as
                   a  percentage  of  the total number of instances in the de-
                   ployment.

                 In an example of nine instances, if a HOST_COUNT  of  six  is
                 specified, deploy to up to three instances at a time. The de-
                 ployment is successful if six or more instances are  deployed
                 to  successfully.  Otherwise,  the  deployment  fails.  If  a
                 FLEET_PERCENT of 40 is specified, deploy to up  to  five  in-
                 stances  at  a  time. The deployment is successful if four or
                 more instances are deployed to successfully.  Otherwise,  the
                 deployment fails.

                 NOTE:
                     In  a  call  to  the  GetDeploymentConfig , CodeDeployDe-
                     fault.OneAtATime returns a minimum healthy instance  type
                     of  MOST_CONCURRENCY  and  a value of 1. This means a de-
                     ployment to only one instance at a time. (You cannot  set
                     the  type  to  MOST_CONCURRENCY,  only  to  HOST_COUNT or
                     FLEET_PERCENT.)   In   addition,    with    CodeDeployDe-
                     fault.OneAtATime,  CodeDeploy attempts to ensure that all
                     instances but one are kept in a healthy state during  the
                     deployment.  Although  this allows one instance at a time
                     to be taken offline for a new deployment, it  also  means
                     that  if  the  deployment to the last instance fails, the
                     overall deployment is still successful.

                 For more information, see CodeDeploy Instance Health  in  the
                 CodeDeploy User Guide .

              value -> (integer)
                 The minimum healthy instance value.

          createTime -> (timestamp)
              The time at which the deployment configuration was created.

          computePlatform -> (string)
              The  destination  platform  type  for  the  deployment (Lambda ,
              Server , or ECS ).

          trafficRoutingConfig -> (structure)
              The configuration that specifies how the deployment  traffic  is
              routed. Used for deployments with a Lambda or Amazon ECS compute
              platform only.

              type -> (string)
                 The type of traffic shifting (TimeBasedCanary  or  TimeBased-
                 Linear ) used by a deployment configuration.

              timeBasedCanary -> (structure)
                 A  configuration  that  shifts  traffic from one version of a
                 Lambda function or ECS task set to another in two increments.
                 The  original and target Lambda function versions or ECS task
                 sets are specified in the deployment's AppSpec file.

                 canaryPercentage -> (integer)
                     The percentage of traffic to shift in the first increment
                     of a TimeBasedCanary deployment.

                 canaryInterval -> (integer)
                     The  number of minutes between the first and second traf-
                     fic shifts of a TimeBasedCanary deployment.

              timeBasedLinear -> (structure)
                 A configuration that shifts traffic from  one  version  of  a
                 Lambda  function  or  Amazon ECS task set to another in equal
                 increments, with an equal number of minutes between each  in-
                 crement.  The original and target Lambda function versions or
                 Amazon ECS task sets are specified in the  deployment's  App-
                 Spec file.

                 linearPercentage -> (integer)
                     The percentage of traffic that is shifted at the start of
                     each increment of a TimeBasedLinear deployment.

                 linearInterval -> (integer)
                     The number of minutes between  each  incremental  traffic
                     shift of a TimeBasedLinear deployment.



                                                       GET-DEPLOYMENT-CONFIG()
