RETRIEVE()                                                          RETRIEVE()



NAME
       retrieve -

DESCRIPTION
       Queries a knowledge base and retrieves information from it.

       See also: AWS API Documentation

       retrieve uses document type values. Document types follow the JSON data
       model where valid values are: strings, numbers, booleans, null, arrays,
       and  objects. For command input, options and nested parameters that are
       labeled with the type document must be provided as JSON. Shorthand syn-
       tax does not support document types.

       retrieve  is a paginated operation. Multiple API calls may be issued in
       order to retrieve the entire data set of results. You can disable pagi-
       nation  by  providing  the --no-paginate argument.  When using --output
       text and the --query argument on a paginated response, the --query  ar-
       gument  must  extract  data from the results of the following query ex-
       pressions: retrievalResults

SYNOPSIS
            retrieve
          --knowledge-base-id <value>
          [--retrieval-configuration <value>]
          --retrieval-query <value>
          [--cli-input-json <value>]
          [--starting-token <value>]
          [--max-items <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --knowledge-base-id (string)
          The unique identifier of the knowledge base to query.

       --retrieval-configuration (structure)
          Contains configurations for the knowledge base query  and  retrieval
          process. For more information, see Query configurations .

          vectorSearchConfiguration -> (structure)
              Contains  details  about  how the results from the vector search
              should be returned. For more information, see  Query  configura-
              tions .

              filter -> (tagged union structure)
                 Specifies the filters to use on the metadata in the knowledge
                 base data sources before returning results. For more informa-
                 tion, see Query configurations .

                 NOTE:
                     This is a Tagged Union structure. Only one of the follow-
                     ing  top  level  keys  can  be   set:   andAll,   equals,
                     greaterThan,     greaterThanOrEquals,    in,    lessThan,
                     lessThanOrEquals, listContains, notEquals, notIn,  orAll,
                     startsWith, stringContains.

                 andAll -> (list)
                     Knowledge  base  data sources are returned if their meta-
                     data attributes fulfill all the filter conditions  inside
                     this list.

                     (tagged union structure)
                        Specifies  the  filters  to  use  on  the metadata at-
                        tributes in the knowledge base data sources before re-
                        turning  results. For more information, see Query con-
                        figurations . See the examples below to see how to use
                        these filters.

                        This  data  type  is  used in the following API opera-
                        tions:

                        o Retrieve request  in the filter field

                        o RetrieveAndGenerate request  in the filter field

                        NOTE:
                            This is a Tagged Union structure. Only one of  the
                            following  top  level  keys  can  be  set: andAll,
                            equals,  greaterThan,   greaterThanOrEquals,   in,
                            lessThan,  lessThanOrEquals,  listContains,  notE-
                            quals, notIn, orAll, startsWith, stringContains.

                        andAll -> (list)
                            Knowledge base data sources are returned if  their
                            metadata  attributes fulfill all the filter condi-
                            tions inside this list.

                            ( ... recursive ... )

                        equals -> (structure)
                            Knowledge base data sources are returned  if  they
                            contain  a  metadata  attribute whose name matches
                            the key and whose value matches the value in  this
                            object.

                            The  following  example  would return data sources
                            with an animal attribute whose value is cat :
                               "equals": { "key": "animal", "value": "cat" }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The  value to whcih to compare the value of the
                               metadata attribute.

                        greaterThan -> (structure)
                            Knowledge base data sources are returned  if  they
                            contain  a  metadata  attribute whose name matches
                            the key and whose value is greater than the  value
                            in this object.

                            The  following  example  would return data sources
                            with an year attribute whose value is greater than
                            1989 :
                               "greaterThan": { "key": "year", "value": 1989 }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The value to whcih to compare the value of  the
                               metadata attribute.

                        greaterThanOrEquals -> (structure)
                            Knowledge  base  data sources are returned if they
                            contain a metadata attribute  whose  name  matches
                            the  key  and whose value is greater than or equal
                            to the value in this object.

                            The following example would  return  data  sources
                            with an year attribute whose value is greater than
                            or equal to 1989 :
                               "greaterThanOrEquals":   {    "key":    "year",
                               "value": 1989 }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The value to whcih to compare the value of  the
                               metadata attribute.

                        in -> (structure)
                            Knowledge  base  data sources are returned if they
                            contain a metadata attribute  whose  name  matches
                            the  key  and whose value is in the list specified
                            in the value in this object.

                            The following example would  return  data  sources
                            with an animal attribute that is either cat or dog
                            :
                               "in":  {  "key":  "animal",  "value":   ["cat",
                               "dog"] }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The value to whcih to compare the value of  the
                               metadata attribute.

                        lessThan -> (structure)
                            Knowledge  base  data sources are returned if they
                            contain a metadata attribute  whose  name  matches
                            the  key and whose value is less than the value in
                            this object.

                            The following example would  return  data  sources
                            with an year attribute whose value is less than to
                            1989 .
                               "lessThan": { "key": "year", "value": 1989 }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The  value to whcih to compare the value of the
                               metadata attribute.

                        lessThanOrEquals -> (structure)
                            Knowledge base data sources are returned  if  they
                            contain  a  metadata  attribute whose name matches
                            the key and whose value is less than or  equal  to
                            the value in this object.

                            The  following  example  would return data sources
                            with an year attribute whose value is less than or
                            equal to 1989 .
                               "lessThanOrEquals":  {  "key": "year", "value":
                               1989 }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The  value to whcih to compare the value of the
                               metadata attribute.

                        listContains -> (structure)
                            Knowledge base data sources are returned  if  they
                            contain  a  metadata  attribute whose name matches
                            the key and whose value is a  list  that  contains
                            the value as one of its members.

                            The  following  example  would return data sources
                            with an animals attribute that is a list  contain-
                            ing a cat member (for example ["dog", "cat"] ).
                               "listContains":  {  "key":  "animals", "value":
                               "cat" }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The  value to whcih to compare the value of the
                               metadata attribute.

                        notEquals -> (structure)
                            Knowledge base data sources that contain  a  meta-
                            data  attribute  whose  name  matches  the key and
                            whose value doesn't match the value in this object
                            are returned.

                            The  following  example  would return data sources
                            that don't contain an animal attribute whose value
                            is cat .
                               "notEquals":  { "key": "animal", "value": "cat"
                               }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The  value to whcih to compare the value of the
                               metadata attribute.

                        notIn -> (structure)
                            Knowledge base data sources are returned  if  they
                            contain  a  metadata  attribute whose name matches
                            the key and whose value isn't in the  list  speci-
                            fied in the value in this object.

                            The  following  example  would return data sources
                            whose animal attribute is neither cat nor dog .
                               "notIn": { "key":  "animal",  "value":  ["cat",
                               "dog"] }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The value to whcih to compare the value of  the
                               metadata attribute.

                        orAll -> (list)
                            Knowledge  base data sources are returned if their
                            metadata attributes fulfill at least  one  of  the
                            filter conditions inside this list.

                            ( ... recursive ... )

                        startsWith -> (structure)
                            Knowledge  base  data sources are returned if they
                            contain a metadata attribute  whose  name  matches
                            the  key  and whose value starts with the value in
                            this object. This filter is  currently  only  sup-
                            ported  for  Amazon  OpenSearch  Serverless vector
                            stores.

                            The following example would  return  data  sources
                            with an animal attribute starts with ca (for exam-
                            ple, cat or camel ).
                               "startsWith": { "key": "animal", "value":  "ca"
                               }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The value to whcih to compare the value of  the
                               metadata attribute.

                        stringContains -> (structure)
                            Knowledge  base  data sources are returned if they
                            contain a metadata attribute  whose  name  matches
                            the key and whose value is one of the following:

                            o A string that contains the value as a substring.
                              The following example would return data  sources
                              with  an animal attribute that contains the sub-
                              string at (for example cat ).  "stringContains":
                              { "key": "animal", "value": "at" }

                            o A  list with a member that contains the value as
                              a substring. The following example would  return
                              data sources with an animals attribute that is a
                              list containing a member that contains the  sub-
                              string   at   (for  example  ["dog",  "cat"]  ).
                              "stringContains": { "key":  "animals",  "value":
                              "at" }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The value to whcih to compare the value of  the
                               metadata attribute.

                 equals -> (structure)
                     Knowledge  base data sources are returned if they contain
                     a metadata attribute whose name matches the key and whose
                     value matches the value in this object.

                     The  following  example would return data sources with an
                     animal attribute whose value is cat :
                        "equals": { "key": "animal", "value": "cat" }

                     key -> (string)
                        The name that the metadata attribute must match.

                     value -> (document)
                        The value to whcih to compare the value of  the  meta-
                        data attribute.

                 greaterThan -> (structure)
                     Knowledge  base data sources are returned if they contain
                     a metadata attribute whose name matches the key and whose
                     value is greater than the value in this object.

                     The  following  example would return data sources with an
                     year attribute whose value is greater than 1989 :
                        "greaterThan": { "key": "year", "value": 1989 }

                     key -> (string)
                        The name that the metadata attribute must match.

                     value -> (document)
                        The value to whcih to compare the value of  the  meta-
                        data attribute.

                 greaterThanOrEquals -> (structure)
                     Knowledge  base data sources are returned if they contain
                     a metadata attribute whose name matches the key and whose
                     value  is  greater than or equal to the value in this ob-
                     ject.

                     The following example would return data sources  with  an
                     year  attribute  whose  value is greater than or equal to
                     1989 :
                        "greaterThanOrEquals": { "key": "year", "value":  1989
                        }

                     key -> (string)
                        The name that the metadata attribute must match.

                     value -> (document)
                        The  value  to whcih to compare the value of the meta-
                        data attribute.

                 in -> (structure)
                     Knowledge base data sources are returned if they  contain
                     a metadata attribute whose name matches the key and whose
                     value is in the list specified in the value in  this  ob-
                     ject.

                     The  following  example would return data sources with an
                     animal attribute that is either cat or dog :
                        "in": { "key": "animal", "value": ["cat", "dog"] }

                     key -> (string)
                        The name that the metadata attribute must match.

                     value -> (document)
                        The value to whcih to compare the value of  the  meta-
                        data attribute.

                 lessThan -> (structure)
                     Knowledge  base data sources are returned if they contain
                     a metadata attribute whose name matches the key and whose
                     value is less than the value in this object.

                     The  following  example would return data sources with an
                     year attribute whose value is less than to 1989 .
                        "lessThan": { "key": "year", "value": 1989 }

                     key -> (string)
                        The name that the metadata attribute must match.

                     value -> (document)
                        The value to whcih to compare the value of  the  meta-
                        data attribute.

                 lessThanOrEquals -> (structure)
                     Knowledge  base data sources are returned if they contain
                     a metadata attribute whose name matches the key and whose
                     value is less than or equal to the value in this object.

                     The  following  example would return data sources with an
                     year attribute whose value is less than or equal to  1989
                     .
                        "lessThanOrEquals": { "key": "year", "value": 1989 }

                     key -> (string)
                        The name that the metadata attribute must match.

                     value -> (document)
                        The  value  to whcih to compare the value of the meta-
                        data attribute.

                 listContains -> (structure)
                     Knowledge base data sources are returned if they  contain
                     a metadata attribute whose name matches the key and whose
                     value is a list that contains the value  as  one  of  its
                     members.

                     The  following  example would return data sources with an
                     animals attribute that is a list containing a cat  member
                     (for example ["dog", "cat"] ).
                        "listContains": { "key": "animals", "value": "cat" }

                     key -> (string)
                        The name that the metadata attribute must match.

                     value -> (document)
                        The  value  to whcih to compare the value of the meta-
                        data attribute.

                 notEquals -> (structure)
                     Knowledge base data sources that contain a  metadata  at-
                     tribute  whose  name  matches  the  key  and  whose value
                     doesn't match the value in this object are returned.

                     The following example  would  return  data  sources  that
                     don't contain an animal attribute whose value is cat .
                        "notEquals": { "key": "animal", "value": "cat" }

                     key -> (string)
                        The name that the metadata attribute must match.

                     value -> (document)
                        The  value  to whcih to compare the value of the meta-
                        data attribute.

                 notIn -> (structure)
                     Knowledge base data sources are returned if they  contain
                     a metadata attribute whose name matches the key and whose
                     value isn't in the list specified in the  value  in  this
                     object.

                     The following example would return data sources whose an-
                     imal attribute is neither cat nor dog .
                        "notIn": { "key": "animal", "value": ["cat", "dog"] }

                     key -> (string)
                        The name that the metadata attribute must match.

                     value -> (document)
                        The value to whcih to compare the value of  the  meta-
                        data attribute.

                 orAll -> (list)
                     Knowledge  base  data sources are returned if their meta-
                     data attributes fulfill at least one of the filter condi-
                     tions inside this list.

                     (tagged union structure)
                        Specifies  the  filters  to  use  on  the metadata at-
                        tributes in the knowledge base data sources before re-
                        turning  results. For more information, see Query con-
                        figurations . See the examples below to see how to use
                        these filters.

                        This  data  type  is  used in the following API opera-
                        tions:

                        o Retrieve request  in the filter field

                        o RetrieveAndGenerate request  in the filter field

                        NOTE:
                            This is a Tagged Union structure. Only one of  the
                            following  top  level  keys  can  be  set: andAll,
                            equals,  greaterThan,   greaterThanOrEquals,   in,
                            lessThan,  lessThanOrEquals,  listContains,  notE-
                            quals, notIn, orAll, startsWith, stringContains.

                        andAll -> (list)
                            Knowledge base data sources are returned if  their
                            metadata  attributes fulfill all the filter condi-
                            tions inside this list.

                            ( ... recursive ... )

                        equals -> (structure)
                            Knowledge base data sources are returned  if  they
                            contain  a  metadata  attribute whose name matches
                            the key and whose value matches the value in  this
                            object.

                            The  following  example  would return data sources
                            with an animal attribute whose value is cat :
                               "equals": { "key": "animal", "value": "cat" }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The  value to whcih to compare the value of the
                               metadata attribute.

                        greaterThan -> (structure)
                            Knowledge base data sources are returned  if  they
                            contain  a  metadata  attribute whose name matches
                            the key and whose value is greater than the  value
                            in this object.

                            The  following  example  would return data sources
                            with an year attribute whose value is greater than
                            1989 :
                               "greaterThan": { "key": "year", "value": 1989 }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The value to whcih to compare the value of  the
                               metadata attribute.

                        greaterThanOrEquals -> (structure)
                            Knowledge  base  data sources are returned if they
                            contain a metadata attribute  whose  name  matches
                            the  key  and whose value is greater than or equal
                            to the value in this object.

                            The following example would  return  data  sources
                            with an year attribute whose value is greater than
                            or equal to 1989 :
                               "greaterThanOrEquals":   {    "key":    "year",
                               "value": 1989 }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The value to whcih to compare the value of  the
                               metadata attribute.

                        in -> (structure)
                            Knowledge  base  data sources are returned if they
                            contain a metadata attribute  whose  name  matches
                            the  key  and whose value is in the list specified
                            in the value in this object.

                            The following example would  return  data  sources
                            with an animal attribute that is either cat or dog
                            :
                               "in":  {  "key":  "animal",  "value":   ["cat",
                               "dog"] }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The value to whcih to compare the value of  the
                               metadata attribute.

                        lessThan -> (structure)
                            Knowledge  base  data sources are returned if they
                            contain a metadata attribute  whose  name  matches
                            the  key and whose value is less than the value in
                            this object.

                            The following example would  return  data  sources
                            with an year attribute whose value is less than to
                            1989 .
                               "lessThan": { "key": "year", "value": 1989 }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The  value to whcih to compare the value of the
                               metadata attribute.

                        lessThanOrEquals -> (structure)
                            Knowledge base data sources are returned  if  they
                            contain  a  metadata  attribute whose name matches
                            the key and whose value is less than or  equal  to
                            the value in this object.

                            The  following  example  would return data sources
                            with an year attribute whose value is less than or
                            equal to 1989 .
                               "lessThanOrEquals":  {  "key": "year", "value":
                               1989 }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The  value to whcih to compare the value of the
                               metadata attribute.

                        listContains -> (structure)
                            Knowledge base data sources are returned  if  they
                            contain  a  metadata  attribute whose name matches
                            the key and whose value is a  list  that  contains
                            the value as one of its members.

                            The  following  example  would return data sources
                            with an animals attribute that is a list  contain-
                            ing a cat member (for example ["dog", "cat"] ).
                               "listContains":  {  "key":  "animals", "value":
                               "cat" }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The  value to whcih to compare the value of the
                               metadata attribute.

                        notEquals -> (structure)
                            Knowledge base data sources that contain  a  meta-
                            data  attribute  whose  name  matches  the key and
                            whose value doesn't match the value in this object
                            are returned.

                            The  following  example  would return data sources
                            that don't contain an animal attribute whose value
                            is cat .
                               "notEquals":  { "key": "animal", "value": "cat"
                               }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The  value to whcih to compare the value of the
                               metadata attribute.

                        notIn -> (structure)
                            Knowledge base data sources are returned  if  they
                            contain  a  metadata  attribute whose name matches
                            the key and whose value isn't in the  list  speci-
                            fied in the value in this object.

                            The  following  example  would return data sources
                            whose animal attribute is neither cat nor dog .
                               "notIn": { "key":  "animal",  "value":  ["cat",
                               "dog"] }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The value to whcih to compare the value of  the
                               metadata attribute.

                        orAll -> (list)
                            Knowledge  base data sources are returned if their
                            metadata attributes fulfill at least  one  of  the
                            filter conditions inside this list.

                            ( ... recursive ... )

                        startsWith -> (structure)
                            Knowledge  base  data sources are returned if they
                            contain a metadata attribute  whose  name  matches
                            the  key  and whose value starts with the value in
                            this object. This filter is  currently  only  sup-
                            ported  for  Amazon  OpenSearch  Serverless vector
                            stores.

                            The following example would  return  data  sources
                            with an animal attribute starts with ca (for exam-
                            ple, cat or camel ).
                               "startsWith": { "key": "animal", "value":  "ca"
                               }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The value to whcih to compare the value of  the
                               metadata attribute.

                        stringContains -> (structure)
                            Knowledge  base  data sources are returned if they
                            contain a metadata attribute  whose  name  matches
                            the key and whose value is one of the following:

                            o A string that contains the value as a substring.
                              The following example would return data  sources
                              with  an animal attribute that contains the sub-
                              string at (for example cat ).  "stringContains":
                              { "key": "animal", "value": "at" }

                            o A  list with a member that contains the value as
                              a substring. The following example would  return
                              data sources with an animals attribute that is a
                              list containing a member that contains the  sub-
                              string   at   (for  example  ["dog",  "cat"]  ).
                              "stringContains": { "key":  "animals",  "value":
                              "at" }

                            key -> (string)
                               The  name  that  the  metadata  attribute  must
                               match.

                            value -> (document)
                               The value to whcih to compare the value of  the
                               metadata attribute.

                 startsWith -> (structure)
                     Knowledge  base data sources are returned if they contain
                     a metadata attribute whose name matches the key and whose
                     value  starts  with the value in this object. This filter
                     is currently only supported for Amazon OpenSearch Server-
                     less vector stores.

                     The  following  example would return data sources with an
                     animal attribute starts with  ca  (for  example,  cat  or
                     camel ).
                        "startsWith": { "key": "animal", "value": "ca" }

                     key -> (string)
                        The name that the metadata attribute must match.

                     value -> (document)
                        The  value  to whcih to compare the value of the meta-
                        data attribute.

                 stringContains -> (structure)
                     Knowledge base data sources are returned if they  contain
                     a metadata attribute whose name matches the key and whose
                     value is one of the following:

                     o A string that contains the value as  a  substring.  The
                       following example would return data sources with an an-
                       imal attribute that contains the substring at (for  ex-
                       ample  cat  ).   "stringContains":  {  "key": "animal",
                       "value": "at" }

                     o A list with a member that contains the value as a  sub-
                       string. The following example would return data sources
                       with an animals attribute that is a list  containing  a
                       member  that  contains  the  substring  at (for example
                       ["dog", "cat"] ).   "stringContains":  {  "key":  "ani-
                       mals", "value": "at" }

                     key -> (string)
                        The name that the metadata attribute must match.

                     value -> (document)
                        The  value  to whcih to compare the value of the meta-
                        data attribute.

              numberOfResults -> (integer)
                 The number of source chunks to retrieve.

              overrideSearchType -> (string)
                 By default, Amazon Bedrock decides a search strategy for you.
                 If  you're using an Amazon OpenSearch Serverless vector store
                 that contains  a  filterable  text  field,  you  can  specify
                 whether  to query the knowledge base with a HYBRID search us-
                 ing both vector embeddings and raw text, or  SEMANTIC  search
                 using only vector embeddings. For other vector store configu-
                 rations, only SEMANTIC search is available. For more informa-
                 tion, see Test a knowledge base .

       JSON Syntax:

          {
            "vectorSearchConfiguration": {
              "filter": {
                "andAll": [
                  {
                    "andAll": [
                      { ... recursive ... }
                      ...
                    ],
                    "equals": {
                      "key": "string",
                      "value": {...}
                    },
                    "greaterThan": {
                      "key": "string",
                      "value": {...}
                    },
                    "greaterThanOrEquals": {
                      "key": "string",
                      "value": {...}
                    },
                    "in": {
                      "key": "string",
                      "value": {...}
                    },
                    "lessThan": {
                      "key": "string",
                      "value": {...}
                    },
                    "lessThanOrEquals": {
                      "key": "string",
                      "value": {...}
                    },
                    "listContains": {
                      "key": "string",
                      "value": {...}
                    },
                    "notEquals": {
                      "key": "string",
                      "value": {...}
                    },
                    "notIn": {
                      "key": "string",
                      "value": {...}
                    },
                    "orAll": [
                      { ... recursive ... }
                      ...
                    ],
                    "startsWith": {
                      "key": "string",
                      "value": {...}
                    },
                    "stringContains": {
                      "key": "string",
                      "value": {...}
                    }
                  }
                  ...
                ],
                "equals": {
                  "key": "string",
                  "value": {...}
                },
                "greaterThan": {
                  "key": "string",
                  "value": {...}
                },
                "greaterThanOrEquals": {
                  "key": "string",
                  "value": {...}
                },
                "in": {
                  "key": "string",
                  "value": {...}
                },
                "lessThan": {
                  "key": "string",
                  "value": {...}
                },
                "lessThanOrEquals": {
                  "key": "string",
                  "value": {...}
                },
                "listContains": {
                  "key": "string",
                  "value": {...}
                },
                "notEquals": {
                  "key": "string",
                  "value": {...}
                },
                "notIn": {
                  "key": "string",
                  "value": {...}
                },
                "orAll": [
                  {
                    "andAll": [
                      { ... recursive ... }
                      ...
                    ],
                    "equals": {
                      "key": "string",
                      "value": {...}
                    },
                    "greaterThan": {
                      "key": "string",
                      "value": {...}
                    },
                    "greaterThanOrEquals": {
                      "key": "string",
                      "value": {...}
                    },
                    "in": {
                      "key": "string",
                      "value": {...}
                    },
                    "lessThan": {
                      "key": "string",
                      "value": {...}
                    },
                    "lessThanOrEquals": {
                      "key": "string",
                      "value": {...}
                    },
                    "listContains": {
                      "key": "string",
                      "value": {...}
                    },
                    "notEquals": {
                      "key": "string",
                      "value": {...}
                    },
                    "notIn": {
                      "key": "string",
                      "value": {...}
                    },
                    "orAll": [
                      { ... recursive ... }
                      ...
                    ],
                    "startsWith": {
                      "key": "string",
                      "value": {...}
                    },
                    "stringContains": {
                      "key": "string",
                      "value": {...}
                    }
                  }
                  ...
                ],
                "startsWith": {
                  "key": "string",
                  "value": {...}
                },
                "stringContains": {
                  "key": "string",
                  "value": {...}
                }
              },
              "numberOfResults": integer,
              "overrideSearchType": "HYBRID"|"SEMANTIC"
            }
          }

       --retrieval-query (structure)
          Contains the query to send the knowledge base.

          text -> (string)
              The text of the query made to the knowledge base.

       Shorthand Syntax:

          text=string

       JSON Syntax:

          {
            "text": "string"
          }

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --starting-token (string)
          A token to specify where to start paginating. This is the  NextToken
          from a previously truncated response.

          For usage examples, see Pagination in the AWS Command Line Interface
          User Guide .

       --max-items (integer)
          The total number of items to return in the command's output. If  the
          total  number of items available is more than the value specified, a
          NextToken is provided in the command's output. To resume pagination,
          provide the NextToken value in the starting-token argument of a sub-
          sequent command. Do not use the NextToken response element  directly
          outside of the AWS CLI.

          For usage examples, see Pagination in the AWS Command Line Interface
          User Guide .

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination. If automatic pagination is disabled,  the
       AWS CLI will only make one call, for the first page of results.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

OUTPUT
       nextToken -> (string)
          If there are more results than can fit in the response, the response
          returns a nextToken . Use this token in the nextToken field  of  an-
          other request to retrieve the next batch of results.

       retrievalResults -> (list)
          A list of results from querying the knowledge base.

          (structure)
              Details about a result from querying the knowledge base.

              This data type is used in the following API operations:

              o Retrieve response  in the retrievalResults field

              content -> (structure)
                 Contains  a chunk of text from a data source in the knowledge
                 base.

                 text -> (string)
                     The cited text from the data source.

              location -> (structure)
                 Contains information about the location of the data source.

                 confluenceLocation -> (structure)
                     The Confluence data source location.

                     url -> (string)
                        The Confluence host URL for the data source location.

                 s3Location -> (structure)
                     The S3 data source location.

                     uri -> (string)
                        The S3 URI for the data source location.

                 salesforceLocation -> (structure)
                     The Salesforce data source location.

                     url -> (string)
                        The Salesforce host URL for the data source location.

                 sharePointLocation -> (structure)
                     The SharePoint data source location.

                     url -> (string)
                        The SharePoint site URL for the data source location.

                 type -> (string)
                     The type of data source location.

                 webLocation -> (structure)
                     The web URL/URLs data source location.

                     url -> (string)
                        The web URL/URLs for the data source location.

              metadata -> (map)
                 Contains metadata attributes and their values for the file in
                 the  data source. For more information, see Metadata and fil-
                 tering .

                 key -> (string)

                 value -> (document)

              score -> (double)
                 The level of relevance of the result to the query.



                                                                    RETRIEVE()
