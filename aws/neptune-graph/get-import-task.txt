GET-IMPORT-TASK()                                            GET-IMPORT-TASK()



NAME
       get-import-task -

DESCRIPTION
       Retrieves a specified import task.

       See also: AWS API Documentation

SYNOPSIS
            get-import-task
          --task-identifier <value>
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --task-identifier (string)
          The unique identifier of the import task.

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination. If automatic pagination is disabled,  the
       AWS CLI will only make one call, for the first page of results.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

OUTPUT
       graphId -> (string)
          The unique identifier of the Neptune Analytics graph.

       taskId -> (string)
          The unique identifier of the import task.

       source -> (string)
          A  URL  identifying to the location of the data to be imported. This
          can be an Amazon S3 path, or can point to a  Neptune  database  end-
          point or snapshot

       format -> (string)
          Specifies the format of S3 data to be imported. Valid values are CSV
          , which identifies the Gremlin CSV  format  or  OPENCYPHER  ,  which
          identies the openCypher load format .

       parquetType -> (string)
          The parquet type of the import task.

       roleArn -> (string)
          The  ARN  of the IAM role that will allow access to the data that is
          to be imported.

       status -> (string)
          The status of the import task:

          o INITIALIZING  The necessary resources needed to create  the  graph
            are being prepared.

          o ANALYZING_DATA   The data is being analyzed to determine the opti-
            mal infrastructure configuration for the new graph.

          o RE_PROVISIONING  The data did not fit into the provisioned  graph,
            so it is being re-provisioned with more capacity.

          o IMPORTING  The data is being loaded.

          o ERROR_ENCOUNTERED   An  error has been encountered while trying to
            create the graph and import the data.

          o ERROR_ENCOUNTERED_ROLLING_BACK  Because of the error that was  en-
            countered,  the  graph  is being rolled back and all its resources
            released.

          o SUCCEEDED  Graph creation and data loading succeeded.

          o FAILED  Graph creation or data loading failed. When the status  is
            FAILED  , you can use get-graphs to get more information about the
            state of the graph.

          o CANCELLING  Because you cancelled the import task, cancellation is
            in progress.

          o CANCELLED  You have successfully cancelled the import task.

       importOptions -> (tagged union structure)
          Contains options for controlling the import process. For example, if
          the failOnError key is set to false , the import skips problem  data
          and  attempts  to continue (whereas if set to true , the default, or
          if omitted, the import operation halts immediately when an error  is
          encountered.

          NOTE:
              This  is a Tagged Union structure. Only one of the following top
              level keys can be set: neptune.

          neptune -> (structure)
              Options for importing data from a Neptune database.

              s3ExportPath -> (string)
                 The path to an S3 bucket from which to import data.

              s3ExportKmsKeyId -> (string)
                 The KMS key to use to encrypt data in the S3 bucket where the
                 graph data is exported

              preserveDefaultVertexLabels -> (boolean)
                 Neptune  Analytics supports label-less vertices and no labels
                 are assigned unless one is explicitly provided.  Neptune  as-
                 signs  default  labels when none is explicitly provided. When
                 importing the data into Neptune Analytics, the default vertex
                 labels  can be omitted by setting preserveDefaultVertexLabels
                 to false. Note that if the vertex only  has  default  labels,
                 and  has  no  other properties or edges, then the vertex will
                 effectively not get imported into Neptune Analytics when pre-
                 serveDefaultVertexLabels is set to false.

              preserveEdgeIds -> (boolean)
                 Neptune  Analytics  currently  does  not support user defined
                 edge ids. The edge ids are not imported by default. They  are
                 imported  if  preserveEdgeIds  is  set  to  true, and ids are
                 stored as properties on the relationships with  the  property
                 name neptuneEdgeId .

       importTaskDetails -> (structure)
          Contains details about the specified import task.

          status -> (string)
              Status of the import task.

          startTime -> (timestamp)
              Time at which the import task started.

          timeElapsedSeconds -> (long)
              Seconds elapsed since the import task started.

          progressPercentage -> (integer)
              The percentage progress so far.

          errorCount -> (integer)
              The number of errors encountered so far.

          errorDetails -> (string)
              Details about the errors that have been encountered.

          statementCount -> (long)
              The number of statements in the import task.

          dictionaryEntryCount -> (long)
              The number of dictionary entries in the import task.

       attemptNumber -> (integer)
          The number of the current attempts to execute the import task.

       statusReason -> (string)
          The reason that the import task has this status value.



                                                             GET-IMPORT-TASK()
