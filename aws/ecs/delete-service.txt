DELETE-SERVICE()                                              DELETE-SERVICE()



NAME
       delete-service -

DESCRIPTION
       Deletes  a specified service within a cluster. You can delete a service
       if you have no running tasks in it and the desired task count is  zero.
       If  the service is actively maintaining tasks, you can't delete it, and
       you must update the service to a desired task count of zero.  For  more
       information, see  UpdateService .

       NOTE:
          When you delete a service, if there are still running tasks that re-
          quire cleanup, the service status moves from ACTIVE  to  DRAINING  ,
          and the service is no longer visible in the console or in the  List-
          Services API operation. After all tasks have transitioned to  either
          STOPPING  or  STOPPED status, the service status moves from DRAINING
          to INACTIVE . Services in the DRAINING or INACTIVE status can  still
          be  viewed with the  DescribeServices API operation. However, in the
          future, INACTIVE services may be cleaned up and purged  from  Amazon
          ECS  record  keeping,  and  DescribeServices calls on those services
          return a ServiceNotFoundException error.

       WARNING:
          If you attempt to create a new service with the same name as an  ex-
          isting  service  in either ACTIVE or DRAINING status, you receive an
          error.

       See also: AWS API Documentation

SYNOPSIS
            delete-service
          [--cluster <value>]
          --service <value>
          [--force | --no-force]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --cluster (string)
          The short name or full Amazon Resource Name  (ARN)  of  the  cluster
          that  hosts  the service to delete. If you do not specify a cluster,
          the default cluster is assumed.

       --service (string)
          The name of the service to delete.

       --force | --no-force (boolean)
          If true , allows you to delete a service even if  it  wasn't  scaled
          down  to  zero tasks. It's only necessary to use this if the service
          uses the REPLICA scheduling strategy.

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

EXAMPLES
       NOTE:
          To  use  the following examples, you must have the AWS CLI installed
          and configured. See the Getting started guide in the  AWS  CLI  User
          Guide for more information.

          Unless  otherwise  stated,  all  examples  have  unix-like quotation
          rules. These examples will need to be  adapted  to  your  terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To delete a service

       The following ecs delete-service example deletes the specified  service
       from  a cluster. You can include the --force parameter to delete a ser-
       vice even if it has not been scaled to zero tasks.

          aws ecs delete-service --cluster MyCluster --service MyService1 --force

       For more information, see Deleting a Service in the Amazon  ECS  Devel-
       oper Guide.

OUTPUT
       service -> (structure)
          The full description of the deleted service.

          serviceArn -> (string)
              The  ARN that identifies the service. For more information about
              the ARN format, see Amazon Resource Name (ARN) in the Amazon ECS
              Developer Guide .

          serviceName -> (string)
              The  name of your service. Up to 255 letters (uppercase and low-
              ercase), numbers, underscores, and hyphens are allowed.  Service
              names  must  be  unique  within a cluster. However, you can have
              similarly named services in multiple clusters within a Region or
              across multiple Regions.

          clusterArn -> (string)
              The  Amazon  Resource  Name  (ARN) of the cluster that hosts the
              service.

          loadBalancers -> (list)
              A list of Elastic Load Balancing load balancer objects. It  con-
              tains  the  load balancer name, the container name, and the con-
              tainer port to access from the load balancer. The container name
              is as it appears in a container definition.

              (structure)
                 The load balancer configuration to use with a service or task
                 set.

                 When you add, update, or remove a  load  balancer  configura-
                 tion,  Amazon  ECS  starts  a new deployment with the updated
                 Elastic Load Balancing configuration. This  causes  tasks  to
                 register to and deregister from load balancers.

                 We  recommend  that you verify this on a test environment be-
                 fore you update the Elastic Load Balancing configuration.

                 A service-linked role is required for services that use  mul-
                 tiple  target  groups.  For  more information, see Using ser-
                 vice-linked roles in the Amazon Elastic Container Service De-
                 veloper Guide .

                 targetGroupArn -> (string)
                     The  full  Amazon Resource Name (ARN) of the Elastic Load
                     Balancing target group or groups associated with  a  ser-
                     vice or task set.

                     A target group ARN is only specified when using an Appli-
                     cation Load Balancer or Network Load Balancer. If  you're
                     using a Classic Load Balancer, omit the target group ARN.

                     For services using the ECS deployment controller, you can
                     specify one or multiple target groups. For more  informa-
                     tion,  see Registering multiple target groups with a ser-
                     vice in the Amazon Elastic  Container  Service  Developer
                     Guide .

                     For services using the CODE_DEPLOY deployment controller,
                     you're required to define two target groups for the  load
                     balancer. For more information, see Blue/green deployment
                     with CodeDeploy in the Amazon Elastic  Container  Service
                     Developer Guide .

                     WARNING:
                        If your service's task definition uses the awsvpc net-
                        work mode, you must choose ip as the target type,  not
                        instance  .  Do  this when creating your target groups
                        because tasks that use the awsvpc network mode are as-
                        sociated  with  an  elastic  network interface, not an
                        Amazon EC2 instance. This network mode is required for
                        the Fargate launch type.

                 loadBalancerName -> (string)
                     The  name of the load balancer to associate with the Ama-
                     zon ECS service or task set.

                     A load balancer name is only specified when using a Clas-
                     sic  Load  Balancer. If you are using an Application Load
                     Balancer or a Network Load  Balancer  the  load  balancer
                     name parameter should be omitted.

                 containerName -> (string)
                     The  name  of the container (as it appears in a container
                     definition) to associate with the load balancer.

                 containerPort -> (integer)
                     The port on the container to associate with the load bal-
                     ancer.  This  port  must correspond to a containerPort in
                     the task definition the tasks in the service  are  using.
                     For tasks that use the EC2 launch type, the container in-
                     stance they're launched on must allow ingress traffic  on
                     the hostPort of the port mapping.

          serviceRegistries -> (list)
              The  details  for  the service discovery registries to assign to
              this service. For more information, see Service Discovery .

              (structure)
                 The details for the service registry.

                 Each service may be associated  with  one  service  registry.
                 Multiple  service  registries  for  each service are not sup-
                 ported.

                 When you add, update, or remove the service  registries  con-
                 figuration, Amazon ECS starts a new deployment. New tasks are
                 registered and deregistered to the updated  service  registry
                 configuration.

                 registryArn -> (string)
                     The  Amazon  Resource Name (ARN) of the service registry.
                     The currently supported service registry  is  Cloud  Map.
                     For more information, see CreateService .

                 port -> (integer)
                     The  port  value  used  if your service discovery service
                     specified an SRV record. This field might be used if both
                     the awsvpc network mode and SRV records are used.

                 containerName -> (string)
                     The container name value to be used for your service dis-
                     covery service. It's already specified in the task  defi-
                     nition.  If  the  task  definition that your service task
                     specifies uses the bridge or host network mode, you  must
                     specify  a  containerName  and  containerPort combination
                     from the task definition. If  the  task  definition  that
                     your  service task specifies uses the awsvpc network mode
                     and a type SRV DNS record is used, you must  specify  ei-
                     ther  a  containerName and containerPort combination or a
                     port value. However, you can't specify both.

                 containerPort -> (integer)
                     The port value to be used for your service discovery ser-
                     vice.  It's  already specified in the task definition. If
                     the task definition your service task specifies uses  the
                     bridge  or host network mode, you must specify a contain-
                     erName and containerPort combination from the task  defi-
                     nition.  If  the task definition your service task speci-
                     fies uses the awsvpc network mode  and  a  type  SRV  DNS
                     record  is  used, you must specify either a containerName
                     and containerPort combination or a port  value.  However,
                     you can't specify both.

          status -> (string)
              The  status of the service. The valid values are ACTIVE , DRAIN-
              ING , or INACTIVE .

          desiredCount -> (integer)
              The desired number of instantiations of the task  definition  to
              keep  running  on  the service. This value is specified when the
              service is created with  CreateService , and it can be  modified
              with  UpdateService .

          runningCount -> (integer)
              The  number  of  tasks  in  the  cluster that are in the RUNNING
              state.

          pendingCount -> (integer)
              The number of tasks in the  cluster  that  are  in  the  PENDING
              state.

          launchType -> (string)
              The  launch  type  the  service  is  using.  When  using the De-
              scribeServices API, this field is omitted  if  the  service  was
              created using a capacity provider strategy.

          capacityProviderStrategy -> (list)
              The  capacity provider strategy the service uses. When using the
              DescribeServices API, this field is omitted if the  service  was
              created using a launch type.

              (structure)
                 The  details  of  a  capacity  provider  strategy. A capacity
                 provider strategy can be set when using the  RunTask or  Cre-
                 ateCluster  APIs or as the default capacity provider strategy
                 for a cluster with the  CreateCluster API.

                 Only capacity providers that are already  associated  with  a
                 cluster  and have an ACTIVE or UPDATING status can be used in
                 a  capacity   provider   strategy.   The    PutClusterCapaci-
                 tyProviders API is used to associate a capacity provider with
                 a cluster.

                 If specifying a capacity provider that uses an  Auto  Scaling
                 group,  the  capacity  provider  must already be created. New
                 Auto Scaling group capacity providers can be created with the
                 CreateCapacityProvider API operation.

                 To  use  a Fargate capacity provider, specify either the FAR-
                 GATE or FARGATE_SPOT capacity providers. The Fargate capacity
                 providers  are  available to all accounts and only need to be
                 associated with a cluster to be used in a  capacity  provider
                 strategy.

                 A  capacity  provider strategy may contain a maximum of 6 ca-
                 pacity providers.

                 capacityProvider -> (string)
                     The short name of the capacity provider.

                 weight -> (integer)
                     The weight value designates the  relative  percentage  of
                     the  total  number  of tasks launched that should use the
                     specified capacity provider. The weight  value  is  taken
                     into  consideration  after the base value, if defined, is
                     satisfied.

                     If no weight value is specified, the default value  of  0
                     is  used.  When multiple capacity providers are specified
                     within a capacity provider strategy, at least one of  the
                     capacity  providers must have a weight value greater than
                     zero and any capacity providers with a weight of 0  can't
                     be  used to place tasks. If you specify multiple capacity
                     providers in a strategy that all have a weight of 0 , any
                     RunTask  or  CreateService  actions  using  the  capacity
                     provider strategy will fail.

                     An example scenario  for  using  weights  is  defining  a
                     strategy  that  contains  two capacity providers and both
                     have a weight of 1 , then when the base is satisfied, the
                     tasks  will  be  split  evenly  across  the  two capacity
                     providers. Using that same logic, if you specify a weight
                     of  1 for capacityProviderA and a weight of 4 for capaci-
                     tyProviderB , then for every one task  that's  run  using
                     capacityProviderA   ,   four   tasks  would  use  capaci-
                     tyProviderB .

                 base -> (integer)
                     The base value designates how many tasks, at  a  minimum,
                     to  run  on the specified capacity provider. Only one ca-
                     pacity provider in a capacity provider strategy can  have
                     a  base  defined.  If  no value is specified, the default
                     value of 0 is used.

          platformVersion -> (string)
              The platform version to run your service on. A platform  version
              is  only  specified for tasks that are hosted on Fargate. If one
              isn't specified, the LATEST platform version is used.  For  more
              information, see Fargate Platform Versions in the Amazon Elastic
              Container Service Developer Guide .

          platformFamily -> (string)
              The operating system that your tasks in the service  run  on.  A
              platform  family  is  specified only for tasks using the Fargate
              launch type.

              All tasks that run as part of this service  must  use  the  same
              platformFamily value as the service (for example, LINUX ).

          taskDefinition -> (string)
              The  task definition to use for tasks in the service. This value
              is specified when the service is created with   CreateService  ,
              and it can be modified with  UpdateService .

          deploymentConfiguration -> (structure)
              Optional  deployment  parameters that control how many tasks run
              during the deployment and the ordering of stopping and  starting
              tasks.

              deploymentCircuitBreaker -> (structure)

                 NOTE:
                     The  deployment circuit breaker can only be used for ser-
                     vices using the rolling update (ECS ) deployment type.

                 The deployment circuit breaker determines whether  a  service
                 deployment  will  fail  if  the  service can't reach a steady
                 state. If you use the deployment circuit breaker,  a  service
                 deployment will transition to a failed state and stop launch-
                 ing new tasks. If you use the rollback option, when a service
                 deployment  fails, the service is rolled back to the last de-
                 ployment that completed successfully. For  more  information,
                 see  Rolling  update  in the Amazon Elastic Container Service
                 Developer Guide

                 enable -> (boolean)
                     Determines whether to use the deployment circuit  breaker
                     logic for the service.

                 rollback -> (boolean)
                     Determines  whether  to configure Amazon ECS to roll back
                     the service if a service deployment fails. If rollback is
                     on,  when  a  service  deployment  fails,  the service is
                     rolled back to the last deployment  that  completed  suc-
                     cessfully.

              maximumPercent -> (integer)
                 If  a  service  is using the rolling update (ECS ) deployment
                 type, the maximumPercent parameter represents an upper  limit
                 on the number of your service's tasks that are allowed in the
                 RUNNING or PENDING state during a deployment, as a percentage
                 of  the  desiredCount  (rounded down to the nearest integer).
                 This parameter enables you to  define  the  deployment  batch
                 size.  For example, if your service is using the REPLICA ser-
                 vice scheduler and has a desiredCount of  four  tasks  and  a
                 maximumPercent  value  of  200%, the scheduler may start four
                 new tasks before stopping the four older tasks (provided that
                 the cluster resources required to do this are available). The
                 default maximumPercent value for a service using the  REPLICA
                 service scheduler is 200%.

                 If a service is using either the blue/green (CODE_DEPLOY ) or
                 EXTERNAL deployment types and tasks that use the  EC2  launch
                 type,  the  maximum percent value is set to the default value
                 and is used to define the upper limit on the  number  of  the
                 tasks  in  the service that remain in the RUNNING state while
                 the container instances are in the  DRAINING  state.  If  the
                 tasks in the service use the Fargate launch type, the maximum
                 percent value is not used, although it is returned  when  de-
                 scribing your service.

              minimumHealthyPercent -> (integer)
                 If  a  service  is using the rolling update (ECS ) deployment
                 type, the minimumHealthyPercent represents a lower  limit  on
                 the  number  of  your service's tasks that must remain in the
                 RUNNING state during a deployment, as a percentage of the de-
                 siredCount  (rounded up to the nearest integer). This parame-
                 ter enables you to deploy without  using  additional  cluster
                 capacity.  For example, if your service has a desiredCount of
                 four tasks and a minimumHealthyPercent of  50%,  the  service
                 scheduler  may stop two existing tasks to free up cluster ca-
                 pacity before starting two new tasks.

                 For services that do not use a load balancer,  the  following
                 should be noted:

                 o A service is considered healthy if all essential containers
                   within the tasks in the service pass their health checks.

                 o If a task has no essential containers with a  health  check
                   defined, the service scheduler will wait for 40 seconds af-
                   ter a task reaches a  RUNNING  state  before  the  task  is
                   counted towards the minimum healthy percent total.

                 o If  a  task  has  one  or  more essential containers with a
                   health check defined, the service scheduler will  wait  for
                   the  task  to reach a healthy status before counting it to-
                   wards the minimum healthy percent total. A task is  consid-
                   ered  healthy when all essential containers within the task
                   have passed their health checks. The  amount  of  time  the
                   service  scheduler  can  wait for is determined by the con-
                   tainer health check settings.

                 For services are that do use a load balancer,  the  following
                 should be noted:

                 o If  a  task has no essential containers with a health check
                   defined, the service scheduler will wait for the load  bal-
                   ancer  target group health check to return a healthy status
                   before counting the task towards the minimum  healthy  per-
                   cent total.

                 o If  a  task  has an essential container with a health check
                   defined, the service scheduler will wait for both the  task
                   to  reach  a  healthy  status  and the load balancer target
                   group health check to return a healthy status before count-
                   ing the task towards the minimum healthy percent total.

                 If a service is using either the blue/green (CODE_DEPLOY ) or
                 EXTERNAL deployment types and is running tasks that  use  the
                 EC2  launch type, the minimum healthy percent value is set to
                 the default value and is used to define the  lower  limit  on
                 the  number  of  the  tasks in the service that remain in the
                 RUNNING state while the container instances are in the DRAIN-
                 ING  state.  If  a  service  is  using  either the blue/green
                 (CODE_DEPLOY ) or EXTERNAL deployment types  and  is  running
                 tasks  that  use the Fargate launch type, the minimum healthy
                 percent value is not used, although it is returned  when  de-
                 scribing your service.

              alarms -> (structure)
                 Information about the CloudWatch alarms.

                 alarmNames -> (list)
                     One or more CloudWatch alarm names. Use a "," to separate
                     the alarms.

                     (string)

                 enable -> (boolean)
                     Determines whether to use the CloudWatch alarm option  in
                     the service deployment process.

                 rollback -> (boolean)
                     Determines  whether  to configure Amazon ECS to roll back
                     the service if a service deployment fails. If rollback is
                     used,  when  a  service  deployment fails, the service is
                     rolled back to the last deployment  that  completed  suc-
                     cessfully.

          taskSets -> (list)
              Information about a set of Amazon ECS tasks in either an CodeDe-
              ploy or an EXTERNAL deployment. An Amazon ECS task set  includes
              details  such as the desired number of tasks, how many tasks are
              running, and whether the task set serves production traffic.

              (structure)
                 Information about a set of Amazon ECS tasks in either an Cod-
                 eDeploy or an EXTERNAL deployment. An Amazon ECS task set in-
                 cludes details such as the desired number of tasks, how  many
                 tasks are running, and whether the task set serves production
                 traffic.

                 id -> (string)
                     The ID of the task set.

                 taskSetArn -> (string)
                     The Amazon Resource Name (ARN) of the task set.

                 serviceArn -> (string)
                     The Amazon Resource Name (ARN) of the  service  the  task
                     set exists in.

                 clusterArn -> (string)
                     The  Amazon  Resource  Name (ARN) of the cluster that the
                     service that hosts the task set exists in.

                 startedBy -> (string)
                     The tag specified when a task set is started. If an  Cod-
                     eDeploy  deployment  created  the task set, the startedBy
                     parameter is CODE_DEPLOY . If an external deployment cre-
                     ated the task set, the startedBy field isn't used.

                 externalId -> (string)
                     The external ID associated with the task set.

                     If  an  CodeDeploy deployment created a task set, the ex-
                     ternalId parameter contains the CodeDeploy deployment ID.

                     If a task set is created for an external  deployment  and
                     is  associated with a service discovery registry, the ex-
                     ternalId parameter contains the  ECS_TASK_SET_EXTERNAL_ID
                     Cloud Map attribute.

                 status -> (string)
                     The  status of the task set. The following describes each
                     state.
                        PRIMARY

                     The task set is serving production traffic.
                        ACTIVE

                     The task set isn't serving production traffic.
                        DRAINING

                     The tasks in the task set are being  stopped,  and  their
                     corresponding  targets  are being deregistered from their
                     target group.

                 taskDefinition -> (string)
                     The task definition that the task set is using.

                 computedDesiredCount -> (integer)
                     The computed desired count for the task set. This is cal-
                     culated  by multiplying the service's desiredCount by the
                     task set's scale percentage. The result is always rounded
                     up. For example, if the computed desired count is 1.2, it
                     rounds up to 2 tasks.

                 pendingCount -> (integer)
                     The number of tasks in the task set that are in the PEND-
                     ING  status  during  a  deployment. A task in the PENDING
                     state is preparing to enter the RUNNING state. A task set
                     enters  the PENDING status when it launches for the first
                     time or when it's restarted after being  in  the  STOPPED
                     state.

                 runningCount -> (integer)
                     The  number of tasks in the task set that are in the RUN-
                     NING status during a deployment. A task  in  the  RUNNING
                     state is running and ready for use.

                 createdAt -> (timestamp)
                     The  Unix  timestamp  for  the time when the task set was
                     created.

                 updatedAt -> (timestamp)
                     The Unix timestamp for the time when  the  task  set  was
                     last updated.

                 launchType -> (string)
                     The  launch type the tasks in the task set are using. For
                     more information, see Amazon ECS launch types in the Ama-
                     zon Elastic Container Service Developer Guide .

                 capacityProviderStrategy -> (list)
                     The  capacity  provider strategy that are associated with
                     the task set.

                     (structure)
                        The details of a capacity provider strategy. A  capac-
                        ity  provider strategy can be set when using the  Run-
                        Task or  CreateCluster APIs or as the default capacity
                        provider  strategy for a cluster with the  CreateClus-
                        ter API.

                        Only capacity providers that  are  already  associated
                        with  a  cluster and have an ACTIVE or UPDATING status
                        can be used in a capacity provider strategy. The  Put-
                        ClusterCapacityProviders  API  is  used to associate a
                        capacity provider with a cluster.

                        If specifying a capacity provider that  uses  an  Auto
                        Scaling  group,  the capacity provider must already be
                        created. New Auto Scaling group capacity providers can
                        be created with the  CreateCapacityProvider API opera-
                        tion.

                        To use a Fargate capacity provider, specify either the
                        FARGATE  or  FARGATE_SPOT capacity providers. The Far-
                        gate capacity providers are available to all  accounts
                        and  only  need  to be associated with a cluster to be
                        used in a capacity provider strategy.

                        A capacity provider strategy may contain a maximum  of
                        6 capacity providers.

                        capacityProvider -> (string)
                            The short name of the capacity provider.

                        weight -> (integer)
                            The  weight value designates the relative percent-
                            age of the total number  of  tasks  launched  that
                            should  use  the  specified capacity provider. The
                            weight value is taken into consideration after the
                            base value, if defined, is satisfied.

                            If no weight value is specified, the default value
                            of 0 is used. When multiple capacity providers are
                            specified  within a capacity provider strategy, at
                            least one of the capacity providers  must  have  a
                            weight  value  greater  than zero and any capacity
                            providers with a weight of  0  can't  be  used  to
                            place  tasks.  If  you  specify  multiple capacity
                            providers in a strategy that all have a weight  of
                            0 , any RunTask or CreateService actions using the
                            capacity provider strategy will fail.

                            An example scenario for using weights is  defining
                            a  strategy  that  contains two capacity providers
                            and both have a weight of 1 , then when  the  base
                            is  satisfied,  the  tasks  will  be  split evenly
                            across the two capacity providers. Using that same
                            logic,  if  you  specify a weight of 1 for capaci-
                            tyProviderA  and  a  weight  of  4   for   capaci-
                            tyProviderB  ,  then for every one task that's run
                            using capacityProviderA , four tasks would use ca-
                            pacityProviderB .

                        base -> (integer)
                            The  base  value  designates  how many tasks, at a
                            minimum,  to  run  on   the   specified   capacity
                            provider. Only one capacity provider in a capacity
                            provider strategy can have a base defined.  If  no
                            value  is  specified,  the  default  value of 0 is
                            used.

                 platformVersion -> (string)
                     The Fargate platform version where the tasks in the  task
                     set are running. A platform version is only specified for
                     tasks run on Fargate. For more information,  see  Fargate
                     platform versions in the Amazon Elastic Container Service
                     Developer Guide .

                 platformFamily -> (string)
                     The operating system that your tasks in the set are  run-
                     ning  on.  A  platform family is specified only for tasks
                     that use the Fargate launch type.

                     All tasks in the set must have the same value.

                 networkConfiguration -> (structure)
                     The network configuration for the task set.

                     awsvpcConfiguration -> (structure)
                        The VPC subnets and security groups that  are  associ-
                        ated with a task.

                        NOTE:
                            All  specified subnets and security groups must be
                            from the same VPC.

                        subnets -> (list)
                            The IDs of the subnets associated with the task or
                            service. There's a limit of 16 subnets that can be
                            specified per AwsVpcConfiguration .

                            NOTE:
                               All specified subnets must  be  from  the  same
                               VPC.

                            (string)

                        securityGroups -> (list)
                            The IDs of the security groups associated with the
                            task or service. If you don't specify  a  security
                            group,  the  default security group for the VPC is
                            used. There's a limit of 5  security  groups  that
                            can be specified per AwsVpcConfiguration .

                            NOTE:
                               All  specified security groups must be from the
                               same VPC.

                            (string)

                        assignPublicIp -> (string)
                            Whether the task's elastic network  interface  re-
                            ceives  a  public IP address. The default value is
                            DISABLED .

                 loadBalancers -> (list)
                     Details on a load balancer that are used with a task set.

                     (structure)
                        The load balancer configuration to use with a  service
                        or task set.

                        When  you  add, update, or remove a load balancer con-
                        figuration, Amazon ECS starts a  new  deployment  with
                        the updated Elastic Load Balancing configuration. This
                        causes tasks to register to and deregister  from  load
                        balancers.

                        We  recommend  that you verify this on a test environ-
                        ment before you update the Elastic Load Balancing con-
                        figuration.

                        A  service-linked  role  is required for services that
                        use multiple target groups. For more information,  see
                        Using  service-linked roles in the Amazon Elastic Con-
                        tainer Service Developer Guide .

                        targetGroupArn -> (string)
                            The full Amazon Resource Name (ARN) of the Elastic
                            Load  Balancing  target group or groups associated
                            with a service or task set.

                            A target group ARN is only specified when using an
                            Application  Load  Balancer  or  Network Load Bal-
                            ancer. If you're using a  Classic  Load  Balancer,
                            omit the target group ARN.

                            For  services using the ECS deployment controller,
                            you can specify one or multiple target groups. For
                            more  information, see Registering multiple target
                            groups with a service in the Amazon  Elastic  Con-
                            tainer Service Developer Guide .

                            For services using the CODE_DEPLOY deployment con-
                            troller, you're  required  to  define  two  target
                            groups  for  the  load balancer. For more informa-
                            tion, see Blue/green deployment with CodeDeploy in
                            the  Amazon  Elastic  Container  Service Developer
                            Guide .

                            WARNING:
                               If your  service's  task  definition  uses  the
                               awsvpc  network mode, you must choose ip as the
                               target type, not instance . Do this when creat-
                               ing  your  target groups because tasks that use
                               the awsvpc network mode are associated with  an
                               elastic  network  interface,  not an Amazon EC2
                               instance. This network mode is required for the
                               Fargate launch type.

                        loadBalancerName -> (string)
                            The  name  of  the load balancer to associate with
                            the Amazon ECS service or task set.

                            A load balancer name is only specified when  using
                            a  Classic  Load Balancer. If you are using an Ap-
                            plication Load Balancer or a Network Load Balancer
                            the  load  balancer name parameter should be omit-
                            ted.

                        containerName -> (string)
                            The name of the container (as it appears in a con-
                            tainer definition) to associate with the load bal-
                            ancer.

                        containerPort -> (integer)
                            The port on the container to  associate  with  the
                            load balancer. This port must correspond to a con-
                            tainerPort in the task definition the tasks in the
                            service  are  using.  For  tasks  that use the EC2
                            launch  type,  the  container   instance   they're
                            launched  on  must  allow  ingress  traffic on the
                            hostPort of the port mapping.

                 serviceRegistries -> (list)
                     The details for the service discovery registries  to  as-
                     sign  to this task set. For more information, see Service
                     discovery .

                     (structure)
                        The details for the service registry.

                        Each service may be associated with one  service  reg-
                        istry.  Multiple  service  registries for each service
                        are not supported.

                        When you add, update, or remove the service registries
                        configuration, Amazon ECS starts a new deployment. New
                        tasks are registered and deregistered to  the  updated
                        service registry configuration.

                        registryArn -> (string)
                            The Amazon Resource Name (ARN) of the service reg-
                            istry. The currently supported service registry is
                            Cloud Map. For more information, see CreateService
                            .

                        port -> (integer)
                            The port value used if your service discovery ser-
                            vice  specified an SRV record. This field might be
                            used if both  the  awsvpc  network  mode  and  SRV
                            records are used.

                        containerName -> (string)
                            The  container name value to be used for your ser-
                            vice discovery service. It's already specified  in
                            the  task  definition. If the task definition that
                            your service task specifies  uses  the  bridge  or
                            host  network  mode, you must specify a container-
                            Name and containerPort combination from  the  task
                            definition.  If the task definition that your ser-
                            vice task specifies uses the awsvpc  network  mode
                            and  a type SRV DNS record is used, you must spec-
                            ify either a containerName and containerPort  com-
                            bination or a port value. However, you can't spec-
                            ify both.

                        containerPort -> (integer)
                            The port value to be used for your service discov-
                            ery  service.  It's  already specified in the task
                            definition. If the task  definition  your  service
                            task  specifies  uses  the  bridge or host network
                            mode, you must specify a  containerName  and  con-
                            tainerPort  combination  from the task definition.
                            If the task definition your service task specifies
                            uses  the  awsvpc  network mode and a type SRV DNS
                            record is used, you must specify either a contain-
                            erName  and  containerPort  combination  or a port
                            value. However, you can't specify both.

                 scale -> (structure)
                     A floating-point percentage of  your  desired  number  of
                     tasks to place and keep running in the task set.

                     value -> (double)
                        The value, specified as a percent total of a service's
                        desiredCount , to scale the task set. Accepted  values
                        are numbers between 0 and 100.

                     unit -> (string)
                        The unit of measure for the scale value.

                 stabilityStatus -> (string)
                     The stability status. This indicates whether the task set
                     has reached a steady state. If the  following  conditions
                     are met, the task set are in STEADY_STATE :

                     o The  task runningCount is equal to the computedDesired-
                       Count .

                     o The pendingCount is 0 .

                     o There are no tasks that are running  on  container  in-
                       stances in the DRAINING status.

                     o All  tasks are reporting a healthy status from the load
                       balancers,  service  discovery,  and  container  health
                       checks.

                     If any of those conditions aren't met, the stability sta-
                     tus returns STABILIZING .

                 stabilityStatusAt -> (timestamp)
                     The Unix timestamp for the time when the task set stabil-
                     ity status was retrieved.

                 tags -> (list)
                     The  metadata  that you apply to the task set to help you
                     categorize and organize them. Each tag consists of a  key
                     and an optional value. You define both.

                     The following basic restrictions apply to tags:

                     o Maximum number of tags per resource - 50

                     o For  each  resource,  each  tag key must be unique, and
                       each tag key can have only one value.

                     o Maximum key length - 128 Unicode characters in UTF-8

                     o Maximum value length - 256 Unicode characters in UTF-8

                     o If your tagging schema is used across multiple services
                       and  resources,  remember  that other services may have
                       restrictions on allowed characters.  Generally  allowed
                       characters  are:  letters,  numbers,  and spaces repre-
                       sentable in UTF-8, and the following characters: + -  =
                       . _ : / @.

                     o Tag keys and values are case-sensitive.

                     o Do not use aws: , AWS: , or any upper or lowercase com-
                       bination of such as a prefix for either keys or  values
                       as it is reserved for Amazon Web Services use. You can-
                       not edit or delete tag keys or values with this prefix.
                       Tags  with  this  prefix do not count against your tags
                       per resource limit.

                     (structure)
                        The metadata that you apply to a resource to help  you
                        categorize  and  organize them. Each tag consists of a
                        key and an optional value. You define them.

                        The following basic restrictions apply to tags:

                        o Maximum number of tags per resource - 50

                        o For each resource, each tag key must be unique,  and
                          each tag key can have only one value.

                        o Maximum key length - 128 Unicode characters in UTF-8

                        o Maximum  value  length  -  256 Unicode characters in
                          UTF-8

                        o If your tagging schema is used across multiple  ser-
                          vices  and  resources,  remember that other services
                          may have restrictions on allowed characters.  Gener-
                          ally  allowed  characters are: letters, numbers, and
                          spaces representable in  UTF-8,  and  the  following
                          characters: + - = . _ : / @.

                        o Tag keys and values are case-sensitive.

                        o Do  not  use aws: , AWS: , or any upper or lowercase
                          combination of such as a prefix for either  keys  or
                          values  as  it  is  reserved for Amazon Web Services
                          use. You cannot edit or delete tag  keys  or  values
                          with this prefix. Tags with this prefix do not count
                          against your tags per resource limit.

                        key -> (string)
                            One part of a key-value pair that make up a tag. A
                            key  is  a general label that acts like a category
                            for more specific tag values.

                        value -> (string)
                            The optional part of a key-value pair that make up
                            a  tag.  A value acts as a descriptor within a tag
                            category (key).

          deployments -> (list)
              The current state of deployments for the service.

              (structure)
                 The details of an Amazon ECS service deployment. This is used
                 only when a service uses the ECS deployment controller type.

                 id -> (string)
                     The ID of the deployment.

                 status -> (string)
                     The  status  of  the  deployment. The following describes
                     each state.
                        PRIMARY

                     The most recent deployment of a service.
                        ACTIVE

                     A service deployment that still has  running  tasks,  but
                     are  in  the process of being replaced with a new PRIMARY
                     deployment.
                        INACTIVE

                     A deployment that has been completely replaced.

                 taskDefinition -> (string)
                     The most recent task definition that  was  specified  for
                     the tasks in the service to use.

                 desiredCount -> (integer)
                     The most recent desired count of tasks that was specified
                     for the service to deploy or maintain.

                 pendingCount -> (integer)
                     The number of tasks in the deployment  that  are  in  the
                     PENDING status.

                 runningCount -> (integer)
                     The  number  of  tasks  in the deployment that are in the
                     RUNNING status.

                 failedTasks -> (integer)
                     The number of consecutively failed tasks in  the  deploy-
                     ment.  A  task  is  considered  a  failure if the service
                     scheduler can't launch the task, the task doesn't transi-
                     tion  to  a  RUNNING state, or if it fails any of its de-
                     fined health checks and is stopped.

                     NOTE:
                        Once a service deployment has one or more successfully
                        running  tasks,  the  failed task count resets to zero
                        and stops being evaluated.

                 createdAt -> (timestamp)
                     The Unix timestamp for the time when the service  deploy-
                     ment was created.

                 updatedAt -> (timestamp)
                     The  Unix timestamp for the time when the service deploy-
                     ment was last updated.

                 capacityProviderStrategy -> (list)
                     The capacity provider strategy that the deployment is us-
                     ing.

                     (structure)
                        The  details of a capacity provider strategy. A capac-
                        ity provider strategy can be set when using the   Run-
                        Task or  CreateCluster APIs or as the default capacity
                        provider strategy for a cluster with the   CreateClus-
                        ter API.

                        Only  capacity  providers  that are already associated
                        with a cluster and have an ACTIVE or  UPDATING  status
                        can be used in a capacity provider strategy. The  Put-
                        ClusterCapacityProviders API is used  to  associate  a
                        capacity provider with a cluster.

                        If  specifying  a  capacity provider that uses an Auto
                        Scaling group, the capacity provider must  already  be
                        created. New Auto Scaling group capacity providers can
                        be created with the  CreateCapacityProvider API opera-
                        tion.

                        To use a Fargate capacity provider, specify either the
                        FARGATE or FARGATE_SPOT capacity providers.  The  Far-
                        gate  capacity providers are available to all accounts
                        and only need to be associated with a  cluster  to  be
                        used in a capacity provider strategy.

                        A  capacity provider strategy may contain a maximum of
                        6 capacity providers.

                        capacityProvider -> (string)
                            The short name of the capacity provider.

                        weight -> (integer)
                            The weight value designates the relative  percent-
                            age  of  the  total  number of tasks launched that
                            should use the specified  capacity  provider.  The
                            weight value is taken into consideration after the
                            base value, if defined, is satisfied.

                            If no weight value is specified, the default value
                            of 0 is used. When multiple capacity providers are
                            specified within a capacity provider strategy,  at
                            least  one  of  the capacity providers must have a
                            weight value greater than zero  and  any  capacity
                            providers  with  a  weight  of  0 can't be used to
                            place tasks.  If  you  specify  multiple  capacity
                            providers  in a strategy that all have a weight of
                            0 , any RunTask or CreateService actions using the
                            capacity provider strategy will fail.

                            An  example scenario for using weights is defining
                            a strategy that contains  two  capacity  providers
                            and  both  have a weight of 1 , then when the base
                            is satisfied,  the  tasks  will  be  split  evenly
                            across the two capacity providers. Using that same
                            logic, if you specify a weight of  1  for  capaci-
                            tyProviderA   and   a  weight  of  4  for  capaci-
                            tyProviderB , then for every one task  that's  run
                            using capacityProviderA , four tasks would use ca-
                            pacityProviderB .

                        base -> (integer)
                            The base value designates how  many  tasks,  at  a
                            minimum,   to   run   on  the  specified  capacity
                            provider. Only one capacity provider in a capacity
                            provider  strategy  can have a base defined. If no
                            value is specified, the  default  value  of  0  is
                            used.

                 launchType -> (string)
                     The  launch  type the tasks in the service are using. For
                     more information, see Amazon ECS Launch Types in the Ama-
                     zon Elastic Container Service Developer Guide .

                 platformVersion -> (string)
                     The  platform  version that your tasks in the service run
                     on. A platform version is only specified for tasks  using
                     the Fargate launch type. If one isn't specified, the LAT-
                     EST platform version is used. For more  information,  see
                     Fargate Platform Versions in the Amazon Elastic Container
                     Service Developer Guide .

                 platformFamily -> (string)
                     The operating system that your tasks in the  service,  or
                     tasks are running on. A platform family is specified only
                     for tasks using the Fargate launch type.

                     All tasks that run as part of this service must  use  the
                     same  platformFamily  value  as the service, for example,
                     LINUX. .

                 networkConfiguration -> (structure)
                     The VPC subnet and security group configuration for tasks
                     that receive their own elastic network interface by using
                     the awsvpc networking mode.

                     awsvpcConfiguration -> (structure)
                        The VPC subnets and security groups that  are  associ-
                        ated with a task.

                        NOTE:
                            All  specified subnets and security groups must be
                            from the same VPC.

                        subnets -> (list)
                            The IDs of the subnets associated with the task or
                            service. There's a limit of 16 subnets that can be
                            specified per AwsVpcConfiguration .

                            NOTE:
                               All specified subnets must  be  from  the  same
                               VPC.

                            (string)

                        securityGroups -> (list)
                            The IDs of the security groups associated with the
                            task or service. If you don't specify  a  security
                            group,  the  default security group for the VPC is
                            used. There's a limit of 5  security  groups  that
                            can be specified per AwsVpcConfiguration .

                            NOTE:
                               All  specified security groups must be from the
                               same VPC.

                            (string)

                        assignPublicIp -> (string)
                            Whether the task's elastic network  interface  re-
                            ceives  a  public IP address. The default value is
                            DISABLED .

                 rolloutState -> (string)

                     NOTE:
                        The rolloutState of a service  is  only  returned  for
                        services that use the rolling update (ECS ) deployment
                        type that aren't behind a Classic Load Balancer.

                     The rollout state of the deployment. When a  service  de-
                     ployment  is  started, it begins in an IN_PROGRESS state.
                     When the service reaches a steady state,  the  deployment
                     transitions to a COMPLETED state. If the service fails to
                     reach a steady state and circuit breaker  is  turned  on,
                     the  deployment  transitions to a FAILED state. A deploy-
                     ment in FAILED state doesn't launch any  new  tasks.  For
                     more information, see  DeploymentCircuitBreaker .

                 rolloutStateReason -> (string)
                     A description of the rollout state of a deployment.

                 serviceConnectConfiguration -> (structure)
                     The  details  of the Service Connect configuration that's
                     used by this deployment. Compare  the  configuration  be-
                     tween  multiple  deployments  when troubleshooting issues
                     with new deployments.

                     The configuration for this service to discover  and  con-
                     nect  to  services,  and  be discovered by, and connected
                     from, other services within a namespace.

                     Tasks that run in a namespace can use short names to con-
                     nect  to  services in the namespace. Tasks can connect to
                     services across all of the  clusters  in  the  namespace.
                     Tasks connect through a managed proxy container that col-
                     lects logs and metrics for increased visibility. Only the
                     tasks  that Amazon ECS services create are supported with
                     Service Connect. For more information, see  Service  Con-
                     nect  in  the  Amazon Elastic Container Service Developer
                     Guide .

                     enabled -> (boolean)
                        Specifies whether to use  Service  Connect  with  this
                        service.

                     namespace -> (string)
                        The  namespace name or full Amazon Resource Name (ARN)
                        of the Cloud Map namespace for use with  Service  Con-
                        nect.  The  namespace  must  be in the same Amazon Web
                        Services Region as the Amazon ECS service and cluster.
                        The  type of namespace doesn't affect Service Connect.
                        For more information about Cloud Map, see Working with
                        Services in the Cloud Map Developer Guide .

                     services -> (list)
                        The list of Service Connect service objects. These are
                        names and aliases (also known as endpoints)  that  are
                        used  by  other Amazon ECS services to connect to this
                        service.

                        This field is not required for a "client"  Amazon  ECS
                        service that's a member of a namespace only to connect
                        to other services within the namespace. An example  of
                        this  would be a frontend application that accepts in-
                        coming requests from either a load balancer that's at-
                        tached to the service or by other means.

                        An object selects a port from the task definition, as-
                        signs a name for the Cloud Map service, and a list  of
                        aliases  (endpoints) and ports for client applications
                        to refer to this service.

                        (structure)
                            The Service Connect service object  configuration.
                            For  more  information, see Service Connect in the
                            Amazon Elastic Container Service Developer Guide .

                            portName -> (string)
                               The portName must match the name of one of  the
                               portMappings  from  all  the  containers in the
                               task definition of this Amazon ECS service.

                            discoveryName -> (string)
                               The discoveryName is the name of the new  Cloud
                               Map  service  that  Amazon ECS creates for this
                               Amazon ECS service. This must be unique  within
                               the  Cloud  Map namespace. The name can contain
                               up to 64 characters. The name can include  low-
                               ercase  letters,  numbers, underscores (_), and
                               hyphens (-). The name can't start  with  a  hy-
                               phen.

                               If  the discoveryName isn't specified, the port
                               mapping name from the task definition  is  used
                               in portName.namespace .

                            clientAliases -> (list)
                               The  list  of  client  aliases for this Service
                               Connect service. You use these to assign  names
                               that  can  be  used by client applications. The
                               maximum number of client aliases that  you  can
                               have in this list is 1.

                               Each  alias  ("endpoint")  is a fully-qualified
                               name and port  number  that  other  Amazon  ECS
                               tasks  ("clients")  can  use to connect to this
                               service.

                               Each name  and  port  mapping  must  be  unique
                               within the namespace.

                               For  each ServiceConnectService , you must pro-
                               vide at least one clientAlias with one port .

                               (structure)
                                   Each alias ("endpoint") is  a  fully-quali-
                                   fied  name and port number that other tasks
                                   ("clients") can use to connect to this ser-
                                   vice.

                                   Each  name  and port mapping must be unique
                                   within the namespace.

                                   Tasks that run in a namespace can use short
                                   names  to  connect to services in the name-
                                   space. Tasks can connect to services across
                                   all of the clusters in the namespace. Tasks
                                   connect through a managed  proxy  container
                                   that  collects  logs  and  metrics  for in-
                                   creased visibility.  Only  the  tasks  that
                                   Amazon  ECS  services  create are supported
                                   with Service Connect. For more information,
                                   see  Service  Connect in the Amazon Elastic
                                   Container Service Developer Guide .

                                   port -> (integer)
                                      The listening port number for  the  Ser-
                                      vice  Connect proxy. This port is avail-
                                      able inside of all of the  tasks  within
                                      the same namespace.

                                      To  avoid  changing your applications in
                                      client Amazon ECS services, set this  to
                                      the  same  port that the client applica-
                                      tion uses by default. For more  informa-
                                      tion,  see Service Connect in the Amazon
                                      Elastic  Container   Service   Developer
                                      Guide .

                                   dnsName -> (string)
                                      The  dnsName is the name that you use in
                                      the applications of client tasks to con-
                                      nect to this service. The name must be a
                                      valid DNS name but doesn't  need  to  be
                                      fully-qualified. The name can include up
                                      to 127 characters. The name can  include
                                      lowercase  letters, numbers, underscores
                                      (_), hyphens (-), and periods  (.).  The
                                      name can't start with a hyphen.

                                      If  this  parameter isn't specified, the
                                      default value of discoveryName.namespace
                                      is  used.  If  the  discoveryName  isn't
                                      specified, the port  mapping  name  from
                                      the  task  definition  is  used in port-
                                      Name.namespace .

                                      To avoid changing your  applications  in
                                      client  Amazon ECS services, set this to
                                      the same name that the  client  applica-
                                      tion uses by default. For example, a few
                                      common names are database , db , or  the
                                      lowercase  name  of  a database, such as
                                      mysql or redis . For  more  information,
                                      see  Service Connect in the Amazon Elas-
                                      tic Container Service Developer Guide .

                            ingressPortOverride -> (integer)
                               The port number for the Service  Connect  proxy
                               to listen on.

                               Use the value of this field to bypass the proxy
                               for traffic on the port number specified in the
                               named  portMapping  in  the  task definition of
                               this application, and then use it in  your  VPC
                               security groups to allow traffic into the proxy
                               for this Amazon ECS service.

                               In awsvpc mode and Fargate, the  default  value
                               is  the  container  port  number. The container
                               port number is in the portMapping in  the  task
                               definition.  In  bridge mode, the default value
                               is the ephemeral port of  the  Service  Connect
                               proxy.

                     logConfiguration -> (structure)
                        The  log configuration for the container. This parame-
                        ter maps to LogConfig in the Create a  container  sec-
                        tion of the Docker Remote API and the --log-driver op-
                        tion         to         `          docker          run
                        https://docs.docker.com/engine/reference/commandline/run/
                        `
                        __ .

                        System Message: WARNING/2 (<string>:, line 1954)
                               Inline interpreted  text  or  phrase  reference
                               start-string without end-string.

                               By  default,  containers  use  the same logging
                               driver that the Docker  daemon  uses.  However,
                               the  container  might  use  a different logging
                               driver than the Docker daemon by  specifying  a
                               log driver configuration in the container defi-
                               nition. For more information about the  options
                               for   different   supported  log  drivers,  see
                               Configure logging drivers in the  Docker  docu-
                               mentation.

                               Understand  the following when specifying a log
                               configuration for your containers.

                        o Amazon ECS currently supports a subset of  the  log-
                          ging  drivers  available to the Docker daemon (shown
                          in the valid values below). Additional  log  drivers
                          may  be  available  in future releases of the Amazon
                          ECS container agent.

                        o This parameter requires version 1.18 of  the  Docker
                          Remote API or greater on your container instance.

                        o For  tasks  that are hosted on Amazon EC2 instances,
                          the Amazon ECS container  agent  must  register  the
                          available   logging   drivers  with  the  ECS_AVAIL-
                          ABLE_LOGGING_DRIVERS  environment  variable   before
                          containers placed on that instance can use these log
                          configuration options.  For  more  information,  see
                          Amazon ECS container agent configuration in the Ama-
                          zon Elastic Container Service Developer Guide .

                        o For tasks that are on  Fargate,  because  you  don't
                          have  access  to  the underlying infrastructure your
                          tasks are hosted on, any additional software  needed
                          must  be installed outside of the task. For example,
                          the Fluentd output aggregators or a remote host run-
                          ning Logstash to send Gelf logs to.

                        logDriver -> (string)
                            The log driver to use for the container.

                            For  tasks  on  Fargate, the supported log drivers
                            are awslogs , splunk , and awsfirelens .

                            For tasks hosted on Amazon EC2 instances, the sup-
                            ported  log drivers are awslogs , fluentd , gelf ,
                            json-file , journald ,  logentries  ,``syslog``  ,
                            splunk , and awsfirelens .

                            For  more  information about using the awslogs log
                            driver, see Using the awslogs log  driver  in  the
                            Amazon Elastic Container Service Developer Guide .

                            For  more  information about using the awsfirelens
                            log driver, see Custom log routing in  the  Amazon
                            Elastic Container Service Developer Guide .

                            NOTE:
                               If  you have a custom driver that isn't listed,
                               you can fork the  Amazon  ECS  container  agent
                               project  that's available on GitHub and custom-
                               ize it to work with that driver.  We  encourage
                               you  to  submit  pull requests for changes that
                               you would like to have  included.  However,  we
                               don't  currently  provide  support  for running
                               modified copies of this software.

                        options -> (map)
                            The configuration  options  to  send  to  the  log
                            driver.  This  parameter  requires version 1.19 of
                            the Docker Remote API or greater on your container
                            instance.  To  check the Docker Remote API version
                            on your container instance, log in  to  your  con-
                            tainer  instance  and  run  the following command:
                            sudo docker  version  --format  '{{.Server.APIVer-
                            sion}}'

                            key -> (string)

                            value -> (string)

                        secretOptions -> (list)
                            The  secrets to pass to the log configuration. For
                            more information, see Specifying sensitive data in
                            the  Amazon  Elastic  Container  Service Developer
                            Guide .

                            (structure)
                               An object representing the secret to expose  to
                               your  container.  Secrets  can  be exposed to a
                               container in the following ways:

                               o To inject sensitive data into your containers
                                 as  environment  variables,  use  the secrets
                                 container definition parameter.

                               o To reference sensitive information in the log
                                 configuration  of a container, use the secre-
                                 tOptions container definition parameter.

                               For more information, see Specifying  sensitive
                               data  in  the  Amazon Elastic Container Service
                               Developer Guide .

                               name -> (string)
                                   The name of the secret.

                               valueFrom -> (string)
                                   The secret to expose to the container.  The
                                   supported values are either the full ARN of
                                   the Secrets Manager secret or the full  ARN
                                   of  the  parameter  in  the  SSM  Parameter
                                   Store.

                                   For information about the require  Identity
                                   and   Access  Management  permissions,  see
                                   Required IAM permissions for Amazon ECS se-
                                   crets (for Secrets Manager) or Required IAM
                                   permissions for  Amazon  ECS  secrets  (for
                                   Systems  Manager  Parameter  store)  in the
                                   Amazon Elastic Container Service  Developer
                                   Guide .

                                   NOTE:
                                      If the SSM Parameter Store parameter ex-
                                      ists in the  same  Region  as  the  task
                                      you're  launching,  then you can use ei-
                                      ther the full ARN or name of the parame-
                                      ter.  If  the parameter exists in a dif-
                                      ferent Region, then the full ARN must be
                                      specified.

                 serviceConnectResources -> (list)
                     The list of Service Connect resources that are associated
                     with this deployment. Each list entry  maps  a  discovery
                     name to a Cloud Map service name.

                     (structure)
                        The  Service Connect resource. Each configuration maps
                        a discovery name to a Cloud Map service name. The data
                        is  stored in Cloud Map as part of the Service Connect
                        configuration for each discovery name of  this  Amazon
                        ECS service.

                        A  task can resolve the dnsName for each of the clien-
                        tAliases of a service. However a  task  can't  resolve
                        the  discovery names. If you want to connect to a ser-
                        vice, refer to the ServiceConnectConfiguration of that
                        service  for  the  list  of clientAliases that you can
                        use.

                        discoveryName -> (string)
                            The discovery name of  this  Service  Connect  re-
                            source.

                            The discoveryName is the name of the new Cloud Map
                            service that Amazon ECS creates  for  this  Amazon
                            ECS  service. This must be unique within the Cloud
                            Map namespace. The name can contain up to 64 char-
                            acters.  The  name  can include lowercase letters,
                            numbers, underscores (_),  and  hyphens  (-).  The
                            name can't start with a hyphen.

                            If  the  discoveryName  isn't  specified, the port
                            mapping name from the task definition is  used  in
                            portName.namespace .

                        discoveryArn -> (string)
                            The  Amazon  Resource Name (ARN) for the namespace
                            in Cloud Map that matches the discovery  name  for
                            this  Service  Connect  resource. You can use this
                            ARN in other integrations with Cloud Map. However,
                            Service  Connect can't ensure connectivity outside
                            of Amazon ECS.

          roleArn -> (string)
              The ARN of the IAM role that's associated with the  service.  It
              allows  the Amazon ECS container agent to register container in-
              stances with an Elastic Load Balancing load balancer.

          events -> (list)
              The event stream for your service. A maximum of 100 of the  lat-
              est events are displayed.

              (structure)
                 The details for an event that's associated with a service.

                 id -> (string)
                     The ID string for the event.

                 createdAt -> (timestamp)
                     The  Unix timestamp for the time when the event was trig-
                     gered.

                 message -> (string)
                     The event message.

          createdAt -> (timestamp)
              The Unix timestamp for the time when the service was created.

          placementConstraints -> (list)
              The placement constraints for the tasks in the service.

              (structure)
                 An object representing a constraint on  task  placement.  For
                 more  information, see Task placement constraints in the Ama-
                 zon Elastic Container Service Developer Guide .

                 NOTE:
                     If you're using the Fargate launch type,  task  placement
                     constraints aren't supported.

                 type -> (string)
                     The  type  of  constraint. Use distinctInstance to ensure
                     that each task in a particular group is running on a dif-
                     ferent  container  instance. Use memberOf to restrict the
                     selection to a group of valid candidates.

                 expression -> (string)
                     A cluster query language expression to apply to the  con-
                     straint. The expression can have a maximum length of 2000
                     characters. You can't specify an expression if  the  con-
                     straint  type is distinctInstance . For more information,
                     see Cluster query language in  the  Amazon  Elastic  Con-
                     tainer Service Developer Guide .

          placementStrategy -> (list)
              The placement strategy that determines how tasks for the service
              are placed.

              (structure)
                 The task placement strategy for a task or service.  For  more
                 information,  see  Task  placement  strategies  in the Amazon
                 Elastic Container Service Developer Guide .

                 type -> (string)
                     The type of  placement  strategy.  The  random  placement
                     strategy  randomly  places tasks on available candidates.
                     The spread placement strategy  spreads  placement  across
                     available candidates evenly based on the field parameter.
                     The binpack strategy places tasks on available candidates
                     that  have  the  least  available  amount of the resource
                     that's specified with the field parameter.  For  example,
                     if  you  binpack  on  memory, a task is placed on the in-
                     stance with the least  amount  of  remaining  memory  but
                     still enough to run the task.

                 field -> (string)
                     The  field  to  apply the placement strategy against. For
                     the spread placement strategy, valid values  are  instan-
                     ceId  (or host , which has the same effect), or any plat-
                     form or custom attribute that's applied  to  a  container
                     instance,  such  as attribute:ecs.availability-zone . For
                     the binpack placement strategy, valid values are cpu  and
                     memory . For the random placement strategy, this field is
                     not used.

          networkConfiguration -> (structure)
              The VPC subnet and security group configuration for  tasks  that
              receive  their own elastic network interface by using the awsvpc
              networking mode.

              awsvpcConfiguration -> (structure)
                 The VPC subnets and security groups that are associated  with
                 a task.

                 NOTE:
                     All  specified  subnets  and security groups must be from
                     the same VPC.

                 subnets -> (list)
                     The IDs of the subnets associated with the task  or  ser-
                     vice. There's a limit of 16 subnets that can be specified
                     per AwsVpcConfiguration .

                     NOTE:
                        All specified subnets must be from the same VPC.

                     (string)

                 securityGroups -> (list)
                     The IDs of the security groups associated with  the  task
                     or  service.  If  you don't specify a security group, the
                     default security group for the VPC  is  used.  There's  a
                     limit  of  5  security  groups  that can be specified per
                     AwsVpcConfiguration .

                     NOTE:
                        All specified security groups must be  from  the  same
                        VPC.

                     (string)

                 assignPublicIp -> (string)
                     Whether  the  task's elastic network interface receives a
                     public IP address. The default value is DISABLED .

          healthCheckGracePeriodSeconds -> (integer)
              The period of time, in seconds,  that  the  Amazon  ECS  service
              scheduler ignores unhealthy Elastic Load Balancing target health
              checks after a task has first started.

          schedulingStrategy -> (string)
              The scheduling strategy to use for the service. For more  infor-
              mation, see Services .

              There are two service scheduler strategies available.

              o REPLICA  -The replica scheduling strategy places and maintains
                the desired number of tasks across your cluster.  By  default,
                the service scheduler spreads tasks across Availability Zones.
                You can use task placement strategies and constraints to  cus-
                tomize task placement decisions.

              o DAEMON  -The  daemon  scheduling  strategy deploys exactly one
                task on each active container instance. This task meets all of
                the  task placement constraints that you specify in your clus-
                ter. The service scheduler also evaluates the  task  placement
                constraints  for  running tasks. It stop tasks that don't meet
                the placement constraints.

              NOTE:
                 Fargate tasks don't support the DAEMON scheduling strategy.

          deploymentController -> (structure)
              The deployment controller type the service is using.

              type -> (string)
                 The deployment controller type to use.

                 There are three deployment controller types available:
                     ECS

                 The rolling update (ECS ) deployment type involves  replacing
                 the  current running version of the container with the latest
                 version. The number of containers Amazon ECS adds or  removes
                 from the service during a rolling update is controlled by ad-
                 justing the minimum and maximum number of healthy  tasks  al-
                 lowed  during  a service deployment, as specified in the  De-
                 ploymentConfiguration .
                     CODE_DEPLOY

                 The  blue/green  (CODE_DEPLOY  )  deployment  type  uses  the
                 blue/green  deployment model powered by CodeDeploy, which al-
                 lows you to verify a new deployment of a service before send-
                 ing production traffic to it.
                     EXTERNAL

                 The  external  (EXTERNAL ) deployment type enables you to use
                 any third-party deployment controller for full  control  over
                 the deployment process for an Amazon ECS service.

          tags -> (list)
              The  metadata  that you apply to the service to help you catego-
              rize and organize them. Each tag consists of a key  and  an  op-
              tional value. You define bot the key and value.

              The following basic restrictions apply to tags:

              o Maximum number of tags per resource - 50

              o For  each  resource, each tag key must be unique, and each tag
                key can have only one value.

              o Maximum key length - 128 Unicode characters in UTF-8

              o Maximum value length - 256 Unicode characters in UTF-8

              o If your tagging schema is used across  multiple  services  and
                resources,  remember that other services may have restrictions
                on allowed characters. Generally allowed characters are:  let-
                ters, numbers, and spaces representable in UTF-8, and the fol-
                lowing characters: + - = . _ : / @.

              o Tag keys and values are case-sensitive.

              o Do not use aws: , AWS: , or any upper or lowercase combination
                of  such  as  a  prefix for either keys or values as it is re-
                served for Amazon Web Services use. You cannot edit or  delete
                tag  keys or values with this prefix. Tags with this prefix do
                not count against your tags per resource limit.

              (structure)
                 The metadata that you apply to a resource to help you catego-
                 rize and organize them. Each tag consists of a key and an op-
                 tional value. You define them.

                 The following basic restrictions apply to tags:

                 o Maximum number of tags per resource - 50

                 o For each resource, each tag key must be  unique,  and  each
                   tag key can have only one value.

                 o Maximum key length - 128 Unicode characters in UTF-8

                 o Maximum value length - 256 Unicode characters in UTF-8

                 o If your tagging schema is used across multiple services and
                   resources, remember that other services may  have  restric-
                   tions  on  allowed characters. Generally allowed characters
                   are: letters, numbers, and spaces representable  in  UTF-8,
                   and the following characters: + - = . _ : / @.

                 o Tag keys and values are case-sensitive.

                 o Do not use aws: , AWS: , or any upper or lowercase combina-
                   tion of such as a prefix for either keys or values as it is
                   reserved  for  Amazon  Web Services use. You cannot edit or
                   delete tag keys or values with this prefix. Tags with  this
                   prefix do not count against your tags per resource limit.

                 key -> (string)
                     One part of a key-value pair that make up a tag. A key is
                     a general label that acts like a category for  more  spe-
                     cific tag values.

                 value -> (string)
                     The optional part of a key-value pair that make up a tag.
                     A value acts as a descriptor within a tag category (key).

          createdBy -> (string)
              The principal that created the service.

          enableECSManagedTags -> (boolean)
              Determines whether to use Amazon ECS managed tags for the  tasks
              in  the  service.  For more information, see Tagging Your Amazon
              ECS Resources in the Amazon Elastic Container Service  Developer
              Guide .

          propagateTags -> (string)
              Determines  whether  to propagate the tags from the task defini-
              tion or the service to the task. If no value is  specified,  the
              tags aren't propagated.

          enableExecuteCommand -> (boolean)
              Determines  whether  the execute command functionality is turned
              on for the service. If true , the execute command  functionality
              is turned on for all containers in tasks as part of the service.



                                                              DELETE-SERVICE()
