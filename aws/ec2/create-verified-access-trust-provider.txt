CREATE-VERIFIED-ACCESS-TRUST-PROVIDER()CREATE-VERIFIED-ACCESS-TRUST-PROVIDER()



NAME
       create-verified-access-trust-provider -

DESCRIPTION
       A  trust  provider is a third-party entity that creates, maintains, and
       manages identity information for users and devices. When an application
       request is made, the identity information sent by the trust provider is
       evaluated by Verified Access before allowing or denying the application
       request.

       See also: AWS API Documentation

SYNOPSIS
            create-verified-access-trust-provider
          --trust-provider-type <value>
          [--user-trust-provider-type <value>]
          [--device-trust-provider-type <value>]
          [--oidc-options <value>]
          [--device-options <value>]
          --policy-reference-name <value>
          [--description <value>]
          [--tag-specifications <value>]
          [--client-token <value>]
          [--dry-run | --no-dry-run]
          [--sse-specification <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --trust-provider-type (string)
          The type of trust provider.

          Possible values:

          o user

          o device

       --user-trust-provider-type (string)
          The  type  of  user-based trust provider. This parameter is required
          when the provider type is user .

          Possible values:

          o iam-identity-center

          o oidc

       --device-trust-provider-type (string)
          The type of device-based trust provider. This parameter is  required
          when the provider type is device .

          Possible values:

          o jamf

          o crowdstrike

          o jumpcloud

       --oidc-options (structure)
          The  options  for  a  OpenID  Connect-compatible user-identity trust
          provider. This parameter is required when the provider type is  user
          .

          Issuer -> (string)
              The OIDC issuer.

          AuthorizationEndpoint -> (string)
              The OIDC authorization endpoint.

          TokenEndpoint -> (string)
              The OIDC token endpoint.

          UserInfoEndpoint -> (string)
              The OIDC user info endpoint.

          ClientId -> (string)
              The client identifier.

          ClientSecret -> (string)
              The client secret.

          Scope -> (string)
              OpenID  Connect  (OIDC) scopes are used by an application during
              authentication to authorize access to  a  user's  details.  Each
              scope returns a specific set of user attributes.

       Shorthand Syntax:

          Issuer=string,AuthorizationEndpoint=string,TokenEndpoint=string,UserInfoEndpoint=string,ClientId=string,ClientSecret=string,Scope=string

       JSON Syntax:

          {
            "Issuer": "string",
            "AuthorizationEndpoint": "string",
            "TokenEndpoint": "string",
            "UserInfoEndpoint": "string",
            "ClientId": "string",
            "ClientSecret": "string",
            "Scope": "string"
          }

       --device-options (structure)
          The options for a device-based trust provider. This parameter is re-
          quired when the provider type is device .

          TenantId -> (string)
              The ID  of  the  tenant  application  with  the  device-identity
              provider.

          PublicSigningKeyUrl -> (string)
              The  URL  Amazon Web Services Verified Access will use to verify
              the authenticity of the device tokens.

       Shorthand Syntax:

          TenantId=string,PublicSigningKeyUrl=string

       JSON Syntax:

          {
            "TenantId": "string",
            "PublicSigningKeyUrl": "string"
          }

       --policy-reference-name (string)
          The identifier to be used when working with policy rules.

       --description (string)
          A description for the Verified Access trust provider.

       --tag-specifications (list)
          The tags to assign to the Verified Access trust provider.

          (structure)
              The tags to apply to a resource when the resource is being  cre-
              ated. When you specify a tag, you must specify the resource type
              to tag, otherwise the request will fail.

              NOTE:
                 The Valid Values lists all the resource  types  that  can  be
                 tagged.  However,  the  action you're using might not support
                 tagging all of these resource types. If you try to tag a  re-
                 source  type that is unsupported for the action you're using,
                 you'll get an error.

              ResourceType -> (string)
                 The type of resource to tag on creation.

              Tags -> (list)
                 The tags to apply to the resource.

                 (structure)
                     Describes a tag.

                     Key -> (string)
                        The key of the tag.

                        Constraints: Tag keys are case-sensitive and accept  a
                        maximum  of 127 Unicode characters. May not begin with
                        aws: .

                     Value -> (string)
                        The value of the tag.

                        Constraints: Tag values are case-sensitive and  accept
                        a maximum of 256 Unicode characters.

       Shorthand Syntax:

          ResourceType=string,Tags=[{Key=string,Value=string},{Key=string,Value=string}] ...

       JSON Syntax:

          [
            {
              "ResourceType": "capacity-reservation"|"client-vpn-endpoint"|"customer-gateway"|"carrier-gateway"|"coip-pool"|"dedicated-host"|"dhcp-options"|"egress-only-internet-gateway"|"elastic-ip"|"elastic-gpu"|"export-image-task"|"export-instance-task"|"fleet"|"fpga-image"|"host-reservation"|"image"|"import-image-task"|"import-snapshot-task"|"instance"|"instance-event-window"|"internet-gateway"|"ipam"|"ipam-pool"|"ipam-scope"|"ipv4pool-ec2"|"ipv6pool-ec2"|"key-pair"|"launch-template"|"local-gateway"|"local-gateway-route-table"|"local-gateway-virtual-interface"|"local-gateway-virtual-interface-group"|"local-gateway-route-table-vpc-association"|"local-gateway-route-table-virtual-interface-group-association"|"natgateway"|"network-acl"|"network-interface"|"network-insights-analysis"|"network-insights-path"|"network-insights-access-scope"|"network-insights-access-scope-analysis"|"placement-group"|"prefix-list"|"replace-root-volume-task"|"reserved-instances"|"route-table"|"security-group"|"security-group-rule"|"snapshot"|"spot-fleet-request"|"spot-instances-request"|"subnet"|"subnet-cidr-reservation"|"traffic-mirror-filter"|"traffic-mirror-session"|"traffic-mirror-target"|"transit-gateway"|"transit-gateway-attachment"|"transit-gateway-connect-peer"|"transit-gateway-multicast-domain"|"transit-gateway-policy-table"|"transit-gateway-route-table"|"transit-gateway-route-table-announcement"|"volume"|"vpc"|"vpc-endpoint"|"vpc-endpoint-connection"|"vpc-endpoint-service"|"vpc-endpoint-service-permission"|"vpc-peering-connection"|"vpn-connection"|"vpn-gateway"|"vpc-flow-log"|"capacity-reservation-fleet"|"traffic-mirror-filter-rule"|"vpc-endpoint-connection-device-type"|"verified-access-instance"|"verified-access-group"|"verified-access-endpoint"|"verified-access-policy"|"verified-access-trust-provider"|"vpn-connection-device-type"|"vpc-block-public-access-exclusion"|"ipam-resource-discovery"|"ipam-resource-discovery-association"|"instance-connect-endpoint",
              "Tags": [
                {
                  "Key": "string",
                  "Value": "string"
                }
                ...
              ]
            }
            ...
          ]

       --client-token (string)
          A  unique,  case-sensitive  token that you provide to ensure idempo-
          tency of  your  modification  request.  For  more  information,  see
          Ensuring Idempotency .

       --dry-run | --no-dry-run (boolean)
          Checks  whether  you  have  the required permissions for the action,
          without actually making the request, and provides an error response.
          If  you have the required permissions, the error response is DryRun-
          Operation . Otherwise, it is UnauthorizedOperation .

       --sse-specification (structure)
          The options for server side encryption.

          CustomerManagedKeyEnabled -> (boolean)
              Enable or disable the use  of  customer  managed  KMS  keys  for
              server side encryption.

              Valid values: True | False

          KmsKeyArn -> (string)
              The ARN of the KMS key.

       Shorthand Syntax:

          CustomerManagedKeyEnabled=boolean,KmsKeyArn=string

       JSON Syntax:

          {
            "CustomerManagedKeyEnabled": true|false,
            "KmsKeyArn": "string"
          }

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

EXAMPLES
       NOTE:
          To use the following examples, you must have the AWS  CLI  installed
          and  configured.  See  the Getting started guide in the AWS CLI User
          Guide for more information.

          Unless otherwise  stated,  all  examples  have  unix-like  quotation
          rules.  These  examples  will  need to be adapted to your terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To create a Verified Access trust provider

       The  following  create-verified-access-trust-provider example sets up a
       Verified Access trust provider using AWS Identity Center.

          aws ec2 create-verified-access-trust-provider \
              --trust-provider-type user \
              --user-trust-provider-type iam-identity-center \
              --policy-reference-name idc \
              --tag-specifications ResourceType=verified-access-trust-provider,Tags=[{Key=Name,Value=my-va-trust-provider}]

       Output:

          {
              "VerifiedAccessTrustProvider": {
                  "VerifiedAccessTrustProviderId": "vatp-0bb32de759a3e19e7",
                  "Description": "",
                  "TrustProviderType": "user",
                  "UserTrustProviderType": "iam-identity-center",
                  "PolicyReferenceName": "idc",
                  "CreationTime": "2023-08-25T18:40:36",
                  "LastUpdatedTime": "2023-08-25T18:40:36",
                  "Tags": [
                      {
                          "Key": "Name",
                          "Value": "my-va-trust-provider"
                      }
                  ]
              }
          }

       For more information, see Trust providers for Verified  Access  in  the
       AWS Verified Access User Guide.

OUTPUT
       VerifiedAccessTrustProvider -> (structure)
          Details about the Verified Access trust provider.

          VerifiedAccessTrustProviderId -> (string)
              The  ID  of  the  Amazon  Web  Services  Verified  Access  trust
              provider.

          Description -> (string)
              A description for the Amazon Web Services Verified Access  trust
              provider.

          TrustProviderType -> (string)
              The type of Verified Access trust provider.

          UserTrustProviderType -> (string)
              The type of user-based trust provider.

          DeviceTrustProviderType -> (string)
              The type of device-based trust provider.

          OidcOptions -> (structure)
              The options for an OpenID Connect-compatible user-identity trust
              provider.

              Issuer -> (string)
                 The OIDC issuer.

              AuthorizationEndpoint -> (string)
                 The OIDC authorization endpoint.

              TokenEndpoint -> (string)
                 The OIDC token endpoint.

              UserInfoEndpoint -> (string)
                 The OIDC user info endpoint.

              ClientId -> (string)
                 The client identifier.

              ClientSecret -> (string)
                 The client secret.

              Scope -> (string)
                 The OpenID Connect (OIDC) scope specified.

          DeviceOptions -> (structure)
              The options for device-identity trust provider.

              TenantId -> (string)
                 The ID of the tenant  application  with  the  device-identity
                 provider.

              PublicSigningKeyUrl -> (string)
                 The  URL Amazon Web Services Verified Access will use to ver-
                 ify the authenticity of the device tokens.

          PolicyReferenceName -> (string)
              The identifier to be used when working with policy rules.

          CreationTime -> (string)
              The creation time.

          LastUpdatedTime -> (string)
              The last updated time.

          Tags -> (list)
              The tags.

              (structure)
                 Describes a tag.

                 Key -> (string)
                     The key of the tag.

                     Constraints: Tag keys are  case-sensitive  and  accept  a
                     maximum  of  127  Unicode  characters. May not begin with
                     aws: .

                 Value -> (string)
                     The value of the tag.

                     Constraints: Tag values are case-sensitive and  accept  a
                     maximum of 256 Unicode characters.

          SseSpecification -> (structure)
              The options in use for server side encryption.

              CustomerManagedKeyEnabled -> (boolean)
                 Indicates  whether  customer  managed KMS keys are in use for
                 server side encryption.

                 Valid values: True | False

              KmsKeyArn -> (string)
                 The ARN of the KMS key.



                                       CREATE-VERIFIED-ACCESS-TRUST-PROVIDER()
