PUT-RECORD-BATCH()                                          PUT-RECORD-BATCH()



NAME
       put-record-batch -

DESCRIPTION
       Writes  multiple  data records into a delivery stream in a single call,
       which can achieve higher throughput per producer than when writing sin-
       gle  records.  To write single data records into a delivery stream, use
       PutRecord . Applications using these operations are referred to as pro-
       ducers.

       For  information  about service quota, see Amazon Kinesis Data Firehose
       Quota .

       Each  PutRecordBatch request supports up to 500 records. Each record in
       the request can be as large as 1,000 KB (before base64 encoding), up to
       a limit of 4 MB for the entire request. These limits cannot be changed.

       You must specify the name of the delivery stream and  the  data  record
       when  using   PutRecord  . The data record consists of a data blob that
       can be up to 1,000 KB in size, and any kind of data.  For  example,  it
       could  be  a segment from a log file, geographic location data, website
       clickstream data, and so on.

       Kinesis Data Firehose buffers records before  delivering  them  to  the
       destination.  To disambiguate the data blobs at the destination, a com-
       mon solution is to use delimiters in the data, such as a newline (\n  )
       or  some  other  character unique within the data. This allows the con-
       sumer application to parse individual data items when reading the  data
       from the destination.

       The   PutRecordBatch  response  includes  a  count  of  failed records,
       FailedPutCount , and an array of responses, RequestResponses . Even  if
       the   PutRecordBatch  call succeeds, the value of FailedPutCount may be
       greater than 0, indicating that there are records for which the  opera-
       tion  didn't succeed. Each entry in the RequestResponses array provides
       additional information about the processed record. It  directly  corre-
       lates  with a record in the request array using the same ordering, from
       the top to the bottom. The response array always includes the same num-
       ber  of  records  as  the request array. RequestResponses includes both
       successfully and unsuccessfully processed records. Kinesis  Data  Fire-
       hose  tries  to  process all records in each  PutRecordBatch request. A
       single record failure  does  not  stop  the  processing  of  subsequent
       records.

       A  successfully  processed  record  includes a RecordId value, which is
       unique for the record. An unsuccessfully processed record includes  Er-
       rorCode  and ErrorMessage values. ErrorCode reflects the type of error,
       and is one of the following values: ServiceUnavailableException or  In-
       ternalFailure  .  ErrorMessage provides more detailed information about
       the error.

       If there is an internal server error or a timeout, the write might have
       completed or it might have failed. If FailedPutCount is greater than 0,
       retry the request, resending only those records that might have  failed
       processing.  This minimizes the possible duplicate records and also re-
       duces the total bytes sent (and corresponding  charges).  We  recommend
       that you handle any duplicates at the destination.

       If   PutRecordBatch  throws  ServiceUnavailableException , back off and
       retry. If the exception persists, it is possible  that  the  throughput
       limits have been exceeded for the delivery stream.

       Data records sent to Kinesis Data Firehose are stored for 24 hours from
       the time they are added to a delivery stream as it attempts to send the
       records  to the destination. If the destination is unreachable for more
       than 24 hours, the data is no longer available.

       WARNING:
          Don't concatenate two or more base64 strings to form the data fields
          of  your  records.  Instead,  concatenate the raw data, then perform
          base64 encoding.

       See also: AWS API Documentation

SYNOPSIS
            put-record-batch
          --delivery-stream-name <value>
          --records <value>
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --delivery-stream-name (string)
          The name of the delivery stream.

       --records (list)
          One or more records.

          (structure)
              The unit of data in a delivery stream.

              Data -> (blob)
                 The data blob, which is base64-encoded when the blob is seri-
                 alized.  The maximum size of the data blob, before base64-en-
                 coding, is 1,000 KiB.

       Shorthand Syntax:

          --records Data1 Data2 Data3

       JSON Syntax:

          [
            {
              "Data": blob
            }
            ...
          ]

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

EXAMPLES
       NOTE:
          To  use  the following examples, you must have the AWS CLI installed
          and configured. See the Getting started guide in the  AWS  CLI  User
          Guide for more information.

          Unless  otherwise  stated,  all  examples  have  unix-like quotation
          rules. These examples will need to be  adapted  to  your  terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To write multiple records to a stream

       The following  put-record-batch  example  writes  three  records  to  a
       stream. The data is encoded in Base64 format.

          aws firehose put-record-batch \
              --delivery-stream-name my-stream \
              --records file://records.json

       Contents of myfile.json:

          [
              {"Data": "Rmlyc3QgdGhpbmc="},
              {"Data": "U2Vjb25kIHRoaW5n"},
              {"Data": "VGhpcmQgdGhpbmc="}
          ]

       Output:

          {
              "FailedPutCount": 0,
              "Encrypted": false,
              "RequestResponses": [
                  {
                      "RecordId": "9D2OJ6t2EqCTZTXwGzeSv/EVHxRoRCw89xd+o3+sXg8DhYOaWKPSmZy/CGlRVEys1u1xbeKh6VofEYKkoeiDrcjrxhQp9iF7sUW7pujiMEQ5LzlrzCkGosxQn+3boDnURDEaD42V7GiixpOyLJkYZcae1i7HzlCEoy9LJhMr8EjDSi4Om/9Vc2uhwwuAtGE0XKpxJ2WD7ZRWtAnYlKAnvgSPRgg7zOWL"
                  },
                  {
                      "RecordId": "jFirejqxCLlK5xjH/UNmlMVcjktEN76I7916X9PaZ+PVaOSXDfU1WGOqEZhxq2js7xcZ552eoeDxsuTU1MSq9nZTbVfb6cQTIXnm/GsuF37Uhg67GKmR5z90l6XKJ+/+pDloFv7Hh9a3oUS6wYm3DcNRLTHHAimANp1PhkQvWpvLRfzbuCUkBphR2QVzhP9OiHLbzGwy8/DfH8sqWEUYASNJKS8GXP5s"
                  },
                  {
                      "RecordId": "oy0amQ40o5Y2YV4vxzufdcMOOw6n3EPr3tpPJGoYVNKH4APPVqNcbUgefo1stEFRg4hTLrf2k6eliHu/9+YJ5R3iiedHkdsfkIqX0XTySSutvgFYTjNY1TSrK0pM2sWxpjqqnk3+2UX1MV5z88xGro3cQm/DTBt3qBlmTj7Xq8SKVbO1S7YvMTpWkMKA86f8JfmT8BMKoMb4XZS/sOkQLe+qh0sYKXWl"
                  }
              ]
          }

       For  more information, see Sending Data to an Amazon Kinesis Data Fire-
       hose Delivery Stream in the  Amazon  Kinesis  Data  Firehose  Developer
       Guide.

OUTPUT
       FailedPutCount -> (integer)
          The number of records that might have failed processing. This number
          might be greater than 0 even if the  PutRecordBatch  call  succeeds.
          Check FailedPutCount to determine whether there are records that you
          need to resend.

       Encrypted -> (boolean)
          Indicates whether server-side encryption (SSE)  was  enabled  during
          this operation.

       RequestResponses -> (list)
          The  results  array. For each record, the index of the response ele-
          ment is the same as the index used in the request array.

          (structure)
              Contains the result for an individual record from a   PutRecord-
              Batch  request.  If the record is successfully added to your de-
              livery stream, it receives a record ID. If the record  fails  to
              be  added  to your delivery stream, the result includes an error
              code and an error message.

              RecordId -> (string)
                 The ID of the record.

              ErrorCode -> (string)
                 The error code for an individual record result.

              ErrorMessage -> (string)
                 The error message for an individual record result.



                                                            PUT-RECORD-BATCH()
