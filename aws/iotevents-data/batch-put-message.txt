BATCH-PUT-MESSAGE()                                        BATCH-PUT-MESSAGE()



NAME
       batch-put-message -

DESCRIPTION
       Sends  a set of messages to the IoT Events system. Each message payload
       is transformed into the input you specify ("inputName" )  and  ingested
       into  any  detectors  that monitor that input. If multiple messages are
       sent, the order in which the messages are processed  isn't  guaranteed.
       To  guarantee  ordering,  you must send messages one at a time and wait
       for a successful response.

       See also: AWS API Documentation

SYNOPSIS
            batch-put-message
          --messages <value>
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --messages (list)
          The list of messages to send. Each message has the following format:
          '{   "messageId":   "string",   "inputName":   "string",  "payload":
          "string"}'

          (structure)
              Information about a message.

              messageId -> (string)
                 The ID to assign to the message. Within each batch sent, each
                 "messageId" must be unique.

              inputName -> (string)
                 The  name  of  the  input  into  which the message payload is
                 transformed.

              payload -> (blob)
                 The payload of the message. This can be a JSON  string  or  a
                 Base-64-encoded  string  representing  binary  data (in which
                 case you must decode it).

              timestamp -> (structure)
                 The timestamp associated with the message.

                 timeInMillis -> (long)
                     The value of the timestamp, in the Unix epoch format.

       Shorthand Syntax:

          messageId=string,inputName=string,payload=blob,timestamp={timeInMillis=long} ...

       JSON Syntax:

          [
            {
              "messageId": "string",
              "inputName": "string",
              "payload": blob,
              "timestamp": {
                "timeInMillis": long
              }
            }
            ...
          ]

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

EXAMPLES
       NOTE:
          To  use  the following examples, you must have the AWS CLI installed
          and configured. See the Getting started guide in the  AWS  CLI  User
          Guide for more information.

          Unless  otherwise  stated,  all  examples  have  unix-like quotation
          rules. These examples will need to be  adapted  to  your  terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To send messages (inputs) to AWS IoT Events

       The following batch-put-message example sends a set of messages to  the
       AWS IoT Events system. Each message payload is transformed into the in-
       put you specify ( inputName ) and ingested into any detectors that mon-
       itor  that input. If multiple messages are sent, the order in which the
       messages are processed isn't guaranteed.  To  guarantee  ordering,  you
       must send messages one at a time and wait for a successful response.

          aws iotevents-data batch-put-message \
              --cli-input-json file://highPressureMessage.json

       Contents of highPressureMessage.json:

          {
              "messages": [
                  {
                      "messageId": "00001",
                      "inputName": "PressureInput",
                      "payload": "{\"motorid\": \"Fulton-A32\", \"sensorData\": {\"pressure\": 80, \"temperature\": 39} }"
                  }
              ]
          }

       Output:

          {
              "BatchPutMessageErrorEntries": []
          }

       For  more information, see BatchPutMessage in the AWS IoT Events Devel-
       oper Guide*.

OUTPUT
       BatchPutMessageErrorEntries -> (list)
          A list of any errors encountered when sending the messages.

          (structure)
              Contains information about the errors encountered.

              messageId -> (string)
                 The ID of the message that caused the error. (See  the  value
                 corresponding  to  the  "messageId"  key in the "message" ob-
                 ject.)

              errorCode -> (string)
                 The error code.

              errorMessage -> (string)
                 A message that describes the error.



                                                           BATCH-PUT-MESSAGE()
