UPLOAD-BUILD()                                                  UPLOAD-BUILD()



NAME
       upload-build -

DESCRIPTION
       Upload a new build to AWS GameLift.

SYNOPSIS
            upload-build
          --name <value>
          --build-version <value>
          --build-root <value>
          [--server-sdk-version <value>]
          [--operating-system <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --name (string) The name of the build

       --build-version (string) The version of the build

       --build-root (string) The path to the directory containing the build to
       upload

       --server-sdk-version (string) The version of the  GameLift  server  SDK
       used to create the game server

       --operating-system (string) The operating system the build runs on

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable  automatic pagination. If automatic pagination is disabled, the
       AWS CLI will only make one call, for the first page of results.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

EXAMPLES
       NOTE:
          To use the following examples, you must have the AWS  CLI  installed
          and  configured.  See  the Getting started guide in the AWS CLI User
          Guide for more information.

          Unless otherwise  stated,  all  examples  have  unix-like  quotation
          rules.  These  examples  will  need to be adapted to your terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       Example1: To upload a Linux game server build

       The  following  upload-build  example  uploads  Linux game server build
       files from a file directory to the GameLift service and creates a build
       resource.

          aws gamelift upload-build \
              --name MegaFrogRaceServer.NA \
              --build-version 2.0.1 \
              --build-root ~/MegaFrogRace_Server/release-na \
              --operating-system AMAZON_LINUX_2
              --server-sdk-version 4.0.2

       Output:

          Uploading ~/MegaFrogRace_Server/release-na:  16.0 KiB / 74.6 KiB (21.45%)
          Uploading ~/MegaFrogRace_Server/release-na:  32.0 KiB / 74.6 KiB (42.89%)
          Uploading ~/MegaFrogRace_Server/release-na:  48.0 KiB / 74.6 KiB (64.34%)
          Uploading ~/MegaFrogRace_Server/release-na:  64.0 KiB / 74.6 KiB (85.79%)
          Uploading ~/MegaFrogRace_Server/release-na:  74.6 KiB / 74.6 KiB (100.00%)
          Successfully uploaded ~/MegaFrogRace_Server/release-na to AWS GameLift
          Build ID: build-a1b2c3d4-5678-90ab-cdef-EXAMPLE11111

       Example2: To upload a Windows game server build

       The  following  upload-build  example uploads Windows game server build
       files from a directory to the GameLift  service  and  creates  a  build
       record.

          aws gamelift upload-build \
              --name MegaFrogRaceServer.NA \
              --build-version 2.0.1 \
              --build-root C:\MegaFrogRace_Server\release-na \
              --operating-system WINDOWS_2012
              --server-sdk-version 4.0.2

       Output:

          Uploading C:\MegaFrogRace_Server\release-na:  16.0 KiB / 74.6 KiB (21.45%)
          Uploading C:\MegaFrogRace_Server\release-na:  32.0 KiB / 74.6 KiB (42.89%)
          Uploading C:\MegaFrogRace_Server\release-na:  48.0 KiB / 74.6 KiB (64.34%)
          Uploading C:\MegaFrogRace_Server\release-na:  64.0 KiB / 74.6 KiB (85.79%)
          Uploading C:\MegaFrogRace_Server\release-na:  74.6 KiB / 74.6 KiB (100.00%)
          Successfully uploaded C:\MegaFrogRace_Server\release-na to AWS GameLift
          Build ID: build-a1b2c3d4-5678-90ab-cdef-EXAMPLE11111

       For  more  information, see Upload a Custom Server Build to GameLift in
       the Amazon GameLift Developer Guide.



                                                                UPLOAD-BUILD()
