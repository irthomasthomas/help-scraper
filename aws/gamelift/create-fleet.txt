CREATE-FLEET()                                                  CREATE-FLEET()



NAME
       create-fleet -

DESCRIPTION
       Creates  a  fleet  of  compute resources to host your game servers. Use
       this operation to set up the following types of fleets based on compute
       type:
          Managed EC2 fleet

       An  EC2 fleet is a set of Amazon Elastic Compute Cloud (Amazon EC2) in-
       stances. Your game server build is deployed  to  each  fleet  instance.
       Amazon  GameLift manages the fleet's instances and controls the lifecy-
       cle of game server processes, which host game sessions for players. EC2
       fleets  can  have instances in multiple locations. Each instance in the
       fleet is designated a Compute .

       To create an EC2 fleet, provide these required parameters:

       o Either BuildId or ScriptId

       o ComputeType set to EC2 (the default value)

       o EC2InboundPermissions

       o EC2InstanceType

       o FleetType

       o Name

       o RuntimeConfiguration with at least one ServerProcesses configuration

       If successful, this operation creates a new fleet resource  and  places
       it  in  NEW  status  while Amazon GameLift initiates the fleet creation
       workflow . To debug your fleet, fetch logs, view performance metrics or
       other  actions  on  the  fleet,  create  a  development fleet with port
       22/3389 open. As a best practice, we recommend opening ports for remote
       access only when you need them and closing them when you're finished.

       When  the  fleet status is ACTIVE, you can adjust capacity settings and
       turn autoscaling on/off for each location.
          Anywhere fleet

       An Anywhere fleet represents compute resources that are  not  owned  or
       managed  by  Amazon  GameLift.  You might create an Anywhere fleet with
       your local machine for testing, or use one to host  game  servers  with
       on-premises hardware or other game hosting solutions.

       To create an Anywhere fleet, provide these required parameters:

       o ComputeType set to ANYWHERE

       o Locations specifying a custom location

       o Name

       If  successful,  this operation creates a new fleet resource and places
       it in ACTIVE status. You can register computes with a fleet  in  ACTIVE
       status.
          Learn more

          Setting up fleets

          Debug fleet creation issues

          Multi-location fleets

       See also: AWS API Documentation

SYNOPSIS
            create-fleet
          --name <value>
          [--description <value>]
          [--build-id <value>]
          [--script-id <value>]
          [--server-launch-path <value>]
          [--server-launch-parameters <value>]
          [--log-paths <value>]
          [--ec2-instance-type <value>]
          [--ec2-inbound-permissions <value>]
          [--new-game-session-protection-policy <value>]
          [--runtime-configuration <value>]
          [--resource-creation-limit-policy <value>]
          [--metric-groups <value>]
          [--peer-vpc-aws-account-id <value>]
          [--peer-vpc-id <value>]
          [--fleet-type <value>]
          [--instance-role-arn <value>]
          [--certificate-configuration <value>]
          [--locations <value>]
          [--tags <value>]
          [--compute-type <value>]
          [--anywhere-configuration <value>]
          [--instance-role-credentials-provider <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --name (string)
          A  descriptive label that is associated with a fleet. Fleet names do
          not need to be unique.

       --description (string)
          A description for the fleet.

       --build-id (string)
          The unique identifier for a custom game server build to be  deployed
          to  a  fleet with compute type EC2 . You can use either the build ID
          or ARN. The build must be uploaded to Amazon GameLift and  in  READY
          status. This fleet property can't be changed after the fleet is cre-
          ated.

       --script-id (string)
          The unique identifier for a Realtime configuration script to be  de-
          ployed  to  a  fleet  with compute type EC2 . You can use either the
          script ID or ARN. Scripts must be uploaded to Amazon GameLift  prior
          to  creating  the  fleet. This fleet property can't be changed after
          the fleet is created.

       --server-launch-path (string)
          This parameter is no longer used. Specify a server launch path using
          the RuntimeConfiguration parameter. Requests that use this parameter
          instead continue to be valid.

       --server-launch-parameters (string)
          This parameter is no longer used. Specify server  launch  parameters
          using the RuntimeConfiguration parameter. Requests that use this pa-
          rameter instead continue to be valid.

       --log-paths (list)
              This parameter is  no  longer  used.  To  specify  where  Amazon
              GameLift  should  store  log  files  once a server process shuts
              down, use the Amazon  GameLift  server  API  ProcessReady()  and
              specify  one or more directory paths in logParameters . For more
              information, see Initialize the server  process  in  the  Amazon
              GameLift Developer Guide .

          (string)

       Syntax:

          "string" "string" ...

       --ec2-instance-type (string)
          The  Amazon  GameLift-supported Amazon EC2 instance type to use with
          managed EC2 fleets. Instance type determines the computing resources
          that  will be used to host your game servers, including CPU, memory,
          storage, and networking capacity. See Amazon Elastic  Compute  Cloud
          Instance  Types  for  detailed  descriptions  of Amazon EC2 instance
          types.

          Possible values:

          o t2.micro

          o t2.small

          o t2.medium

          o t2.large

          o c3.large

          o c3.xlarge

          o c3.2xlarge

          o c3.4xlarge

          o c3.8xlarge

          o c4.large

          o c4.xlarge

          o c4.2xlarge

          o c4.4xlarge

          o c4.8xlarge

          o c5.large

          o c5.xlarge

          o c5.2xlarge

          o c5.4xlarge

          o c5.9xlarge

          o c5.12xlarge

          o c5.18xlarge

          o c5.24xlarge

          o c5a.large

          o c5a.xlarge

          o c5a.2xlarge

          o c5a.4xlarge

          o c5a.8xlarge

          o c5a.12xlarge

          o c5a.16xlarge

          o c5a.24xlarge

          o r3.large

          o r3.xlarge

          o r3.2xlarge

          o r3.4xlarge

          o r3.8xlarge

          o r4.large

          o r4.xlarge

          o r4.2xlarge

          o r4.4xlarge

          o r4.8xlarge

          o r4.16xlarge

          o r5.large

          o r5.xlarge

          o r5.2xlarge

          o r5.4xlarge

          o r5.8xlarge

          o r5.12xlarge

          o r5.16xlarge

          o r5.24xlarge

          o r5a.large

          o r5a.xlarge

          o r5a.2xlarge

          o r5a.4xlarge

          o r5a.8xlarge

          o r5a.12xlarge

          o r5a.16xlarge

          o r5a.24xlarge

          o m3.medium

          o m3.large

          o m3.xlarge

          o m3.2xlarge

          o m4.large

          o m4.xlarge

          o m4.2xlarge

          o m4.4xlarge

          o m4.10xlarge

          o m5.large

          o m5.xlarge

          o m5.2xlarge

          o m5.4xlarge

          o m5.8xlarge

          o m5.12xlarge

          o m5.16xlarge

          o m5.24xlarge

          o m5a.large

          o m5a.xlarge

          o m5a.2xlarge

          o m5a.4xlarge

          o m5a.8xlarge

          o m5a.12xlarge

          o m5a.16xlarge

          o m5a.24xlarge

          o c5d.large

          o c5d.xlarge

          o c5d.2xlarge

          o c5d.4xlarge

          o c5d.9xlarge

          o c5d.12xlarge

          o c5d.18xlarge

          o c5d.24xlarge

          o c6a.large

          o c6a.xlarge

          o c6a.2xlarge

          o c6a.4xlarge

          o c6a.8xlarge

          o c6a.12xlarge

          o c6a.16xlarge

          o c6a.24xlarge

          o c6i.large

          o c6i.xlarge

          o c6i.2xlarge

          o c6i.4xlarge

          o c6i.8xlarge

          o c6i.12xlarge

          o c6i.16xlarge

          o c6i.24xlarge

          o r5d.large

          o r5d.xlarge

          o r5d.2xlarge

          o r5d.4xlarge

          o r5d.8xlarge

          o r5d.12xlarge

          o r5d.16xlarge

          o r5d.24xlarge

          o m6g.medium

          o m6g.large

          o m6g.xlarge

          o m6g.2xlarge

          o m6g.4xlarge

          o m6g.8xlarge

          o m6g.12xlarge

          o m6g.16xlarge

          o c6g.medium

          o c6g.large

          o c6g.xlarge

          o c6g.2xlarge

          o c6g.4xlarge

          o c6g.8xlarge

          o c6g.12xlarge

          o c6g.16xlarge

          o r6g.medium

          o r6g.large

          o r6g.xlarge

          o r6g.2xlarge

          o r6g.4xlarge

          o r6g.8xlarge

          o r6g.12xlarge

          o r6g.16xlarge

          o c6gn.medium

          o c6gn.large

          o c6gn.xlarge

          o c6gn.2xlarge

          o c6gn.4xlarge

          o c6gn.8xlarge

          o c6gn.12xlarge

          o c6gn.16xlarge

          o c7g.medium

          o c7g.large

          o c7g.xlarge

          o c7g.2xlarge

          o c7g.4xlarge

          o c7g.8xlarge

          o c7g.12xlarge

          o c7g.16xlarge

          o r7g.medium

          o r7g.large

          o r7g.xlarge

          o r7g.2xlarge

          o r7g.4xlarge

          o r7g.8xlarge

          o r7g.12xlarge

          o r7g.16xlarge

          o m7g.medium

          o m7g.large

          o m7g.xlarge

          o m7g.2xlarge

          o m7g.4xlarge

          o m7g.8xlarge

          o m7g.12xlarge

          o m7g.16xlarge

          o g5g.xlarge

          o g5g.2xlarge

          o g5g.4xlarge

          o g5g.8xlarge

          o g5g.16xlarge

       --ec2-inbound-permissions (list)
          The IP address ranges and port settings that allow  inbound  traffic
          to  access  game server processes and other processes on this fleet.
          Set this parameter for managed EC2 fleets. You can leave this param-
          eter  empty when creating the fleet, but you must call  UpdateFleet-
          PortSettings to set it before players can connect to game  sessions.
          As  a  best  practice,  we recommend opening ports for remote access
          only when you need them and closing them when you're  finished.  For
          Realtime  Servers fleets, Amazon GameLift automatically sets TCP and
          UDP ranges.

          (structure)
              A range of IP addresses and port  settings  that  allow  inbound
              traffic  to connect to processes on an instance in a fleet. Pro-
              cesses are assigned an IP address/port number combination, which
              must fall into the fleet's allowed ranges. For managed container
              fleets, the port settings must use the same port numbers as  the
              fleet's connection ports.

              For Realtime Servers fleets, Amazon GameLift automatically opens
              two port ranges, one for TCP messaging and one for UDP.

              FromPort -> (integer)
                 A starting value for a range of allowed port numbers.

                 For fleets using Linux builds, only ports 22  and  1026-60000
                 are valid.

                 For  fleets  using  Windows builds, only ports 1026-60000 are
                 valid.

              ToPort -> (integer)
                 An ending value for a range of  allowed  port  numbers.  Port
                 numbers  are  end-inclusive.  This  value must be equal to or
                 greater than FromPort .

                 For fleets using Linux builds, only ports 22  and  1026-60000
                 are valid.

                 For  fleets  using  Windows builds, only ports 1026-60000 are
                 valid.

              IpRange -> (string)
                 A range of allowed IP addresses. This value must be expressed
                 in  CIDR  notation. Example: "000.000.000.000/[subnet mask] "
                 or optionally the shortened version "0.0.0.0/[subnet mask] ".

              Protocol -> (string)
                 The network communication protocol used by the fleet.

       Shorthand Syntax:

          FromPort=integer,ToPort=integer,IpRange=string,Protocol=string ...

       JSON Syntax:

          [
            {
              "FromPort": integer,
              "ToPort": integer,
              "IpRange": "string",
              "Protocol": "TCP"|"UDP"
            }
            ...
          ]

       --new-game-session-protection-policy (string)
          The status of termination protection for active game sessions on the
          fleet.  By  default,  this property is set to NoProtection . You can
          also set game session protection for an individual game  session  by
          calling UpdateGameSession .

          o NoProtection - Game sessions can be terminated during active game-
            play as a result of a scale-down event.

          o FullProtection - Game sessions in ACTIVE status cannot  be  termi-
            nated during a scale-down event.

          Possible values:

          o NoProtection

          o FullProtection

       --runtime-configuration (structure)
          Instructions  for  how  to  launch  and  run server processes on the
          fleet. Set runtime configuration for managed EC2 fleets. For an Any-
          where  fleets,  set  this parameter only if the fleet is running the
          Amazon GameLift Agent. The runtime configuration defines one or more
          server process configurations. Each server process identifies a game
          executable or Realtime script file and the number  of  processes  to
          run concurrently.

          NOTE:
              This  parameter  replaces  the  parameters  ServerLaunchPath and
              ServerLaunchParameters , which are still supported for  backward
              compatibility.

          ServerProcesses -> (list)
              A collection of server process configurations that identify what
              server processes to run on fleet computes.

              (structure)
                 A set of instructions for launching server processes on fleet
                 computes. Server processes run either an executable in a cus-
                 tom game build or a Realtime Servers script.  Server  process
                 configurations are part of a fleet's runtime configuration.

                 LaunchPath -> (string)
                     The  location  of  a  game  build  executable or Realtime
                     script. Game builds and Realtime scripts are installed on
                     instances at the root:

                     o Windows  (custom  game builds only): C:\game . Example:
                       "C:\game\MyGame\server.exe "

                     o Linux:     /local/game      .      Examples:      "/lo-
                       cal/game/MyGame/server.exe  "  or  "/local/game/MyReal-
                       timeScript.js "

                     NOTE:
                        Amazon GameLift  doesn't  support  the  use  of  setup
                        scripts  that  launch  the game executable. For custom
                        game builds, this parameter  must  indicate  the  exe-
                        cutable that calls the server SDK operations initSDK()
                        and ProcessReady() .

                 Parameters -> (string)
                     An optional list of parameters to pass to the server exe-
                     cutable or Realtime script on launch.

                 ConcurrentExecutions -> (integer)
                     The  number  of server processes using this configuration
                     that run concurrently on each instance or compute.

          MaxConcurrentGameSessionActivations -> (integer)
              The number of game sessions in status ACTIVATING to allow on  an
              instance. This setting limits the instance resources that can be
              used for new game activations at any one time.

          GameSessionActivationTimeoutSeconds -> (integer)
              The maximum amount of time (in seconds) allowed to launch a  new
              game  session  and  have it report ready to host players. During
              this time, the game session is in status  ACTIVATING  .  If  the
              game  session  does  not become active before the timeout, it is
              ended and the game session status is changed to TERMINATED .

       Shorthand Syntax:

          ServerProcesses=[{LaunchPath=string,Parameters=string,ConcurrentExecutions=integer},{LaunchPath=string,Parameters=string,ConcurrentExecutions=integer}],MaxConcurrentGameSessionActivations=integer,GameSessionActivationTimeoutSeconds=integer

       JSON Syntax:

          {
            "ServerProcesses": [
              {
                "LaunchPath": "string",
                "Parameters": "string",
                "ConcurrentExecutions": integer
              }
              ...
            ],
            "MaxConcurrentGameSessionActivations": integer,
            "GameSessionActivationTimeoutSeconds": integer
          }

       --resource-creation-limit-policy (structure)
          A policy that limits the number of game sessions that an  individual
          player can create on instances in this fleet within a specified span
          of time.

          NewGameSessionsPerCreator -> (integer)
              A policy that puts limits on the number of game sessions that  a
              player  can  create  within  a specified span of time. With this
              policy, you can control players' ability  to  consume  available
              resources.

              The policy is evaluated when a player tries to create a new game
              session.  On  receiving  a  CreateGameSession  request,   Amazon
              GameLift  checks  that the player (identified by CreatorId ) has
              created fewer than game session limit in the specified time  pe-
              riod.

          PolicyPeriodInMinutes -> (integer)
              The  time  span  used  in evaluating the resource creation limit
              policy.

       Shorthand Syntax:

          NewGameSessionsPerCreator=integer,PolicyPeriodInMinutes=integer

       JSON Syntax:

          {
            "NewGameSessionsPerCreator": integer,
            "PolicyPeriodInMinutes": integer
          }

       --metric-groups (list)
          The name of an Amazon Web Services CloudWatch metric  group  to  add
          this  fleet  to. A metric group is used to aggregate the metrics for
          multiple fleets. You can specify an existing metric  group  name  or
          set a new name to create a new metric group. A fleet can be included
          in only one metric group at a time.

          (string)

       Syntax:

          "string" "string" ...

       --peer-vpc-aws-account-id (string)
          Used when peering your Amazon GameLift fleet with a VPC, the  unique
          identifier  for  the  Amazon Web Services account that owns the VPC.
          You can find your account ID in the Amazon Web  Services  Management
          Console under account settings.

       --peer-vpc-id (string)
          A  unique identifier for a VPC with resources to be accessed by your
          Amazon GameLift fleet. The VPC must be in the same  Region  as  your
          fleet.  To look up a VPC ID, use the VPC Dashboard in the Amazon Web
          Services Management Console. Learn more about  VPC  peering  in  VPC
          Peering with Amazon GameLift Fleets .

       --fleet-type (string)
          Indicates whether to use On-Demand or Spot instances for this fleet.
          By default, this property is set to ON_DEMAND  .  Learn  more  about
          when  to  use  On-Demand versus Spot Instances . This fleet property
          can't be changed after the fleet is created.

          Possible values:

          o ON_DEMAND

          o SPOT

       --instance-role-arn (string)
          A unique identifier for an IAM role that manages access to your Ama-
          zon Web Services services. With an instance role ARN set, any appli-
          cation that runs on an instance in this fleet can assume  the  role,
          including install scripts, server processes, and daemons (background
          processes). Create a role or look up a role's ARN by using  the  IAM
          dashboard  in the Amazon Web Services Management Console. Learn more
          about using on-box credentials for your game servers at  Access  ex-
          ternal  resources  from a game server . This fleet property can't be
          changed after the fleet is created.

       --certificate-configuration (structure)
          Prompts Amazon GameLift to generate a TLS/SSL  certificate  for  the
          fleet.  Amazon GameLift uses the certificates to encrypt traffic be-
          tween game clients and the game servers running on Amazon  GameLift.
          By  default,  the  CertificateConfiguration  is DISABLED . You can't
          change this property after you create the fleet.

          Certificate Manager (ACM) certificates expire after 13 months.  Cer-
          tificate  expiration  can  cause  fleets to fail, preventing players
          from connecting to instances in the fleet. We recommend you  replace
          fleets  before  13 months, consider using fleet aliases for a smooth
          transition.

          NOTE:
              ACM isn't available in all Amazon Web Services regions. A  fleet
              creation  request  with certificate generation enabled in an un-
              supported Region, fails with a 4xx error. For  more  information
              about  the  supported Regions, see Supported Regions in the Cer-
              tificate Manager User Guide .

          CertificateType -> (string)
              Indicates whether a  TLS/SSL  certificate  is  generated  for  a
              fleet.

              Valid values include:

              o GENERATED -- Generate a TLS/SSL certificate for this fleet.

              o DISABLED  --  (default)  Do not generate a TLS/SSL certificate
                for this fleet.

       Shorthand Syntax:

          CertificateType=string

       JSON Syntax:

          {
            "CertificateType": "DISABLED"|"GENERATED"
          }

       --locations (list)
          A set of remote locations to deploy additional instances to and man-
          age  as  a  multi-location fleet. Use this parameter when creating a
          fleet in Amazon Web Services Regions  that  support  multiple  loca-
          tions.  You  can  add  any  Amazon Web Services Region or Local Zone
          that's supported by Amazon GameLift. Provide a list of one  or  more
          Amazon  Web Services Region codes, such as us-west-2 , or Local Zone
          names. When using this parameter, Amazon GameLift  requires  you  to
          include  your  home location in the request. For a list of supported
          Regions and Local Zones, see Amazon GameLift service  locations  for
          managed hosting.

          (structure)
              A  remote  location where a multi-location fleet can deploy game
              servers for game hosting.

              Location -> (string)
                 An Amazon Web Services Region code, such as us-west-2 . For a
                 list  of  supported  Regions  and  Local  Zones,  see  Amazon
                 GameLift service locations for managed hosting.

       Shorthand Syntax:

          Location=string ...

       JSON Syntax:

          [
            {
              "Location": "string"
            }
            ...
          ]

       --tags (list)
          A list of labels to assign to the new fleet resource. Tags  are  de-
          veloper-defined  key-value  pairs.  Tagging  Amazon Web Services re-
          sources are useful for resource management,  access  management  and
          cost  allocation.  For more information, see Tagging Amazon Web Ser-
          vices Resources in the Amazon Web Services General Reference .

          (structure)
              A label that you can assign to a Amazon GameLift resource.
                 Learn more

                 Tagging Amazon Web Services Resources in the Amazon Web  Ser-
                 vices General Reference

                 Amazon Web Services Tagging Strategies

                 Related actions

                 All APIs by task

              Key -> (string)
                 The key for a developer-defined key value pair for tagging an
                 Amazon Web Services resource.

              Value -> (string)
                 The value for a developer-defined key value pair for  tagging
                 an Amazon Web Services resource.

       Shorthand Syntax:

          Key=string,Value=string ...

       JSON Syntax:

          [
            {
              "Key": "string",
              "Value": "string"
            }
            ...
          ]

       --compute-type (string)
          The type of compute resource used to host your game servers.

          o EC2  The game server build is deployed to Amazon EC2 instances for
            cloud hosting. This is the default setting.

          o ANYWHERE  Your game server and supporting software is deployed  to
            compute  resources that are provided and managed by you. With this
            compute type, you can also set the  AnywhereConfiguration  parame-
            ter.

          Possible values:

          o EC2

          o ANYWHERE

       --anywhere-configuration (structure)
          Amazon GameLift Anywhere configuration options.

          Cost -> (string)
              The  cost  to  run your fleet per hour. Amazon GameLift uses the
              provided cost of your fleet to balance usage in queues. For more
              information  about  queues,  see Setting up queues in the Amazon
              GameLift Developer Guide .

       Shorthand Syntax:

          Cost=string

       JSON Syntax:

          {
            "Cost": "string"
          }

       --instance-role-credentials-provider (string)
          Prompts Amazon GameLift to generate a shared  credentials  file  for
          the  IAM role that's defined in InstanceRoleArn . The shared creden-
          tials file is stored on each fleet instance and refreshed as needed.
          Use shared credentials for applications that are deployed along with
          the game server executable, if the game server  is  integrated  with
          server SDK version 5.x. For more information about using shared cre-
          dentials, see Communicate with other Amazon Web  Services  resources
          from your fleets .

          Possible values:

          o SHARED_CREDENTIAL_FILE

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination. If automatic pagination is disabled,  the
       AWS CLI will only make one call, for the first page of results.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

EXAMPLES
       NOTE:
          To  use  the following examples, you must have the AWS CLI installed
          and configured. See the Getting started guide in the  AWS  CLI  User
          Guide for more information.

          Unless  otherwise  stated,  all  examples  have  unix-like quotation
          rules. These examples will need to be  adapted  to  your  terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       Example 1: To create a basic Linux fleet

       The following create-fleet example creates a minimally configured fleet
       of  on-demand  Linux  instances  to host a custom server build. You can
       complete the configuration by using update-fleet.

          aws gamelift create-fleet \
              --name MegaFrogRaceServer.NA.v2 \
              --description 'Hosts for v2 North America' \
              --build-id build-1111aaaa-22bb-33cc-44dd-5555eeee66ff \
              --certificate-configuration 'CertificateType=GENERATED' \
              --ec2-instance-type c4.large \
              --fleet-type ON_DEMAND \
              --runtime-configuration 'ServerProcesses=[{LaunchPath=/local/game/release-na/MegaFrogRace_Server.exe,ConcurrentExecutions=1}]'

       Output:

          {
              "FleetAttributes": {
                  "BuildId": "build-1111aaaa-22bb-33cc-44dd-5555eeee66ff",
                  "CertificateConfiguration": {
                      "CertificateType": "GENERATED"
                  },
                  "CreationTime": 1496365885.44,
                  "Description": "Hosts for v2 North America",
                  "FleetArn": "arn:aws:gamelift:us-west-2:444455556666:fleet/fleet-2222bbbb-33cc-44dd-55ee-6666ffff77aa",
                  "FleetId": "fleet-2222bbbb-33cc-44dd-55ee-6666ffff77aa",
                  "FleetType": "ON_DEMAND",
                  "InstanceType": "c4.large",
                  "MetricGroups": ["default"],
                  "Name": "MegaFrogRace.NA.v2",
                  "NewGameSessionProtectionPolicy": "NoProtection",
                  "OperatingSystem": "AMAZON_LINUX",
                  "ServerLaunchPath": "/local/game/release-na/MegaFrogRace_Server.exe",
                  "Status": "NEW"
              }
          }

       Example 2: To create a basic Windows fleet

       The following create-fleet example creates a minimally configured fleet
       of  spot  Windows instances to host a custom server build. You can com-
       plete the configuration by using update-fleet.

          aws gamelift create-fleet \
              --name MegaFrogRace.NA.v2 \
              --description 'Hosts for v2 North America' \
              --build-id build-2222aaaa-33bb-44cc-55dd-6666eeee77ff  \
              --certificate-configuration 'CertificateType=GENERATED' \
              --ec2-instance-type c4.large \
              --fleet-type SPOT \
              --runtime-configuration 'ServerProcesses=[{LaunchPath=C:\game\Bin64.Release.Dedicated\MegaFrogRace_Server.exe,ConcurrentExecutions=1}]'

       Output:

          {
              "FleetAttributes": {
                  "BuildId": "build-2222aaaa-33bb-44cc-55dd-6666eeee77ff",
                  "CertificateConfiguration": {
                      "CertificateType": "GENERATED"
                  },
                  "CreationTime": 1496365885.44,
                  "Description": "Hosts for v2 North America",
                  "FleetArn": "arn:aws:gamelift:us-west-2:444455556666:fleet/fleet-2222bbbb-33cc-44dd-55ee-6666ffff77aa",
                  "FleetId": "fleet-2222bbbb-33cc-44dd-55ee-6666ffff77aa",
                  "FleetType": "SPOT",
                  "InstanceType": "c4.large",
                  "MetricGroups": ["default"],
                  "Name": "MegaFrogRace.NA.v2",
                  "NewGameSessionProtectionPolicy": "NoProtection",
                  "OperatingSystem": "WINDOWS_2012",
                  "ServerLaunchPath": "C:\game\Bin64.Release.Dedicated\MegaFrogRace_Server.exe",
                  "Status": "NEW"
              }
          }

       Example 3: To create a fully configured fleet

       The following create-fleet example creates a fleet of Spot Windows  in-
       stances  for  a custom server build, with most commonly used configura-
       tion settings provided.

          aws gamelift create-fleet \
              --name MegaFrogRace.NA.v2 \
              --description 'Hosts for v2 North America' \
              --build-id build-2222aaaa-33bb-44cc-55dd-6666eeee77ff \
              --certificate-configuration 'CertificateType=GENERATED' \
              --ec2-instance-type c4.large \
              --ec2-inbound-permissions 'FromPort=33435,ToPort=33435,IpRange=10.24.34.0/23,Protocol=UDP' \
              --fleet-type SPOT \
              --new-game-session-protection-policy FullProtection \
              --runtime-configuration file://runtime-config.json \
              --metric-groups default \
              --instance-role-arn 'arn:aws:iam::444455556666:role/GameLiftS3Access'

       Contents of runtime-config.json:

          GameSessionActivationTimeoutSeconds=300,
           MaxConcurrentGameSessionActivations=2,
           ServerProcesses=[
             {LaunchPath=C:\game\Bin64.Release.Dedicated\MegaFrogRace_Server.exe,Parameters=-debug,ConcurrentExecutions=1},
             {LaunchPath=C:\game\Bin64.Release.Dedicated\MegaFrogRace_Server.exe,ConcurrentExecutions=1}]

       Output:

          {
              "FleetAttributes": {
                  "InstanceRoleArn": "arn:aws:iam::444455556666:role/GameLiftS3Access",
                  "Status": "NEW",
                  "InstanceType": "c4.large",
                  "FleetArn": "arn:aws:gamelift:us-west-2:444455556666:fleet/fleet-2222bbbb-33cc-44dd-55ee-6666ffff77aa",
                  "FleetId": "fleet-2222bbbb-33cc-44dd-55ee-6666ffff77aa",
                  "Description": "Hosts for v2 North America",
                  "FleetType": "SPOT",
                  "OperatingSystem": "WINDOWS_2012",
                  "Name": "MegaFrogRace.NA.v2",
                  "CreationTime": 1569309011.11,
                  "MetricGroups": [
                      "default"
                  ],
                  "BuildId": "build-2222aaaa-33bb-44cc-55dd-6666eeee77ff",
                  "ServerLaunchParameters": "abc",
                  "ServerLaunchPath": "C:\\game\\Bin64.Release.Dedicated\\MegaFrogRace_Server.exe",
                  "NewGameSessionProtectionPolicy": "FullProtection",
                  "CertificateConfiguration": {
                      "CertificateType": "GENERATED"
                  }
              }
          }

       Example 4: To create a Realtime Servers fleet

       The following create-fleet example creates a fleet  of  Spot  instances
       with  a  Realtime configuration script that has been uploaded to Amazon
       GameLift. All Realtime servers are deployed onto  Linux  machines.  For
       the  purposes of this example, assume that the uploaded Realtime script
       includes multiple script files, with the Init() function located in the
       script  file called MainScript.js. As shown, this file is identified as
       the launch script in the runtime configuration.

          aws gamelift create-fleet \
              --name MegaFrogRace.NA.realtime \
              --description 'Mega Frog Race Realtime fleet' \
              --script-id script-1111aaaa-22bb-33cc-44dd-5555eeee66ff \
              --ec2-instance-type c4.large \
              --fleet-type SPOT \
              --certificate-configuration 'CertificateType=GENERATED' --runtime-configuration 'ServerProcesses=[{LaunchPath=/local/game/MainScript.js,Parameters=+map Winter444,ConcurrentExecutions=5}]'

       Output:

          {
              "FleetAttributes": {
                  "FleetId": "fleet-2222bbbb-33cc-44dd-55ee-6666ffff77aa",
                  "Status": "NEW",
                  "CreationTime": 1569310745.212,
                  "InstanceType": "c4.large",
                  "NewGameSessionProtectionPolicy": "NoProtection",
                  "CertificateConfiguration": {
                      "CertificateType": "GENERATED"
                  },
                  "Name": "MegaFrogRace.NA.realtime",
                  "ScriptId": "script-1111aaaa-22bb-33cc-44dd-5555eeee66ff",
                  "FleetArn": "arn:aws:gamelift:us-west-2:444455556666:fleet/fleet-2222bbbb-33cc-44dd-55ee-6666ffff77aa",
                  "FleetType": "SPOT",
                  "MetricGroups": [
                      "default"
                  ],
                  "Description": "Mega Frog Race Realtime fleet",
                  "OperatingSystem": "AMAZON_LINUX"
              }
          }

OUTPUT
       FleetAttributes -> (structure)
          The properties for the new fleet, including the current status.  All
          fleets are placed in NEW status on creation.

          FleetId -> (string)
              A unique identifier for the fleet.

          FleetArn -> (string)
              The  Amazon  Resource  Name  (ARN ) that is assigned to a Amazon
              GameLift fleet resource and uniquely  identifies  it.  ARNs  are
              unique  across  all  Regions.  Format  is  arn:aws:gamelift:<re-
              gion>::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912 .  In  a
              GameLift fleet ARN, the resource ID matches the FleetId value.

          FleetType -> (string)
              Indicates  whether  the  fleet uses On-Demand or Spot instances.
              For more information, see On-Demand versus Spot Instances . This
              fleet property can't be changed after the fleet is created.

          InstanceType -> (string)
              The  Amazon EC2 instance type that the fleet uses. Instance type
              determines the computing  resources  of  each  instance  in  the
              fleet,  including CPU, memory, storage, and networking capacity.
              See Amazon Elastic Compute Cloud Instance Types for detailed de-
              scriptions. This attribute is used with fleets where ComputeType
              is "EC2".

          Description -> (string)
              A human-readable description of the fleet.

          Name -> (string)
              A descriptive label that is associated with a fleet. Fleet names
              do not need to be unique.

          CreationTime -> (timestamp)
              A  time stamp indicating when this data object was created. For-
              mat is a number expressed in Unix time as milliseconds (for  ex-
              ample "1469498468.057" ).

          TerminationTime -> (timestamp)
              A  time  stamp  indicating when this data object was terminated.
              Format is a number expressed in Unix time as  milliseconds  (for
              example "1469498468.057" ).

          Status -> (string)
              Current status of the fleet. Possible fleet statuses include the
              following:

              o NEW -- A new  fleet  resource  has  been  defined  and  Amazon
                GameLift  has started creating the fleet. Desired instances is
                set to 1.

              o DOWNLOADING/VALIDATING/BUILDING -- Amazon GameLift is download
                the game server build, running install scripts, and then vali-
                dating  the  build  files.  When  complete,  Amazon   GameLift
                launches a fleet instance.

              o ACTIVATING  --  Amazon  GameLift  is  launching  a game server
                process and testing its connectivity with the Amazon  GameLift
                service.

              o ACTIVE -- The fleet is now ready to host game sessions.

              o ERROR  --  An  error  occurred  when  downloading, validating,
                building, or activating the fleet.

              o DELETING -- Hosts are responding to a delete fleet request.

              o TERMINATED -- The fleet no longer exists.

          BuildId -> (string)
              A unique identifier for the build resource that is  deployed  on
              instances  in  this  fleet.  This  attribute is used with fleets
              where ComputeType is "EC2".

          BuildArn -> (string)
              The Amazon Resource Name  (ARN  )  associated  with  the  Amazon
              GameLift  build  resource  that is deployed on instances in this
              fleet. In a GameLift build ARN,  the  resource  ID  matches  the
              BuildId value. This attribute is used with fleets where Compute-
              Type is "EC2".

          ScriptId -> (string)
              A unique identifier for the Realtime script resource that is de-
              ployed  on  instances in this fleet. This attribute is used with
              fleets where ComputeType is "EC2".

          ScriptArn -> (string)
              The Amazon Resource Name (ARN )  associated  with  the  GameLift
              script  resource that is deployed on instances in this fleet. In
              a GameLift script ARN, the  resource  ID  matches  the  ScriptId
              value.

          ServerLaunchPath -> (string)
              This  parameter  is  no longer used. Server launch paths are now
              defined using the fleet's RuntimeConfiguration .  Requests  that
              use this parameter continue to be valid.

          ServerLaunchParameters -> (string)
              This  parameter  is no longer used. Server launch parameters are
              now defined using the fleet's  runtime  configuration.  Requests
              that use this parameter continue to be valid.

          LogPaths -> (list)
                 This  parameter is no longer used. Game session log paths are
                 now defined using the Amazon  GameLift  server  API  Process-
                 Ready()   logParameters  . See more information in the Server
                 API Reference .

              (string)

          NewGameSessionProtectionPolicy -> (string)
              The type of game session protection to set on all new  instances
              that  are  started  in  the  fleet.  This attribute is used with
              fleets where ComputeType is "EC2".

              o NoProtection -- The game session can be  terminated  during  a
                scale-down event.

              o FullProtection  -- If the game session is in an ACTIVE status,
                it cannot be terminated during a scale-down event.

          OperatingSystem -> (string)
              The operating system  of  the  fleet's  computing  resources.  A
              fleet's operating system is determined by the OS of the build or
              script that is deployed on this fleet. This  attribute  is  used
              with fleets where ComputeType is "EC2".

              NOTE:
                 Amazon  Linux 2 (AL2) will reach end of support on 6/30/2025.
                 See more details in the  Amazon  Linux  2  FAQs  .  For  game
                 servers that are hosted on AL2 and use Amazon GameLift server
                 SDK 4.x, first update the game server  build  to  server  SDK
                 5.x, and then deploy to AL2023 instances. See Migrate to Ama-
                 zon GameLift server SDK version 5.

          ResourceCreationLimitPolicy -> (structure)
              A policy that puts limits on the number of game sessions that  a
              player  can  create  within  a specified span of time. With this
              policy, you can control players' ability  to  consume  available
              resources.

              The policy is evaluated when a player tries to create a new game
              session.  On  receiving  a  CreateGameSession  request,   Amazon
              GameLift  checks  that the player (identified by CreatorId ) has
              created fewer than game session limit in the specified time  pe-
              riod.

              NewGameSessionsPerCreator -> (integer)
                 A policy that puts limits on the number of game sessions that
                 a player can create within a specified  span  of  time.  With
                 this  policy,  you  can  control  players' ability to consume
                 available resources.

                 The policy is evaluated when a player tries to create  a  new
                 game  session. On receiving a CreateGameSession request, Ama-
                 zon GameLift checks that the player (identified by  CreatorId
                 )  has created fewer than game session limit in the specified
                 time period.

              PolicyPeriodInMinutes -> (integer)
                 The time span used in evaluating the resource creation  limit
                 policy.

          MetricGroups -> (list)
              Name of a metric group that metrics for this fleet are added to.
              In Amazon CloudWatch, you can view aggregated metrics for fleets
              that  are in a metric group. A fleet can be included in only one
              metric group at a time. This attribute is used with fleets where
              ComputeType is "EC2".

              (string)

          StoppedActions -> (list)
              A   list  of  fleet  activity  that  has  been  suspended  using
              StopFleetActions . This includes fleet auto-scaling. This attri-
              bute is used with fleets where ComputeType is "EC2".

              (string)

          InstanceRoleArn -> (string)
              A  unique identifier for an IAM role that manages access to your
              Amazon Web Services services. With an instance role ARN set, any
              application  that  runs  on an instance in this fleet can assume
              the role, including install scripts, server processes, and  dae-
              mons  (background  processes). Create a role or look up a role's
              ARN by using the IAM dashboard in the Amazon Web  Services  Man-
              agement  Console.  Learn more about using on-box credentials for
              your game servers at  Access  external  resources  from  a  game
              server . This attribute is used with fleets where ComputeType is
              "EC2".

          CertificateConfiguration -> (structure)
              Determines whether a TLS/SSL  certificate  is  generated  for  a
              fleet. This feature must be enabled when creating the fleet. All
              instances in a fleet share the same certificate.

              CertificateType -> (string)
                 Indicates whether a TLS/SSL certificate is  generated  for  a
                 fleet.

                 Valid values include:

                 o GENERATED -- Generate a TLS/SSL certificate for this fleet.

                 o DISABLED -- (default) Do not generate a TLS/SSL certificate
                   for this fleet.

          ComputeType -> (string)
              The type of compute resource used to host your game servers. You
              can use your own compute resources with Amazon GameLift Anywhere
              or use Amazon EC2 instances with managed Amazon GameLift.

          AnywhereConfiguration -> (structure)
              Amazon GameLift Anywhere configuration options.

              Cost -> (string)
                 The cost to run your fleet per hour. Amazon GameLift uses the
                 provided  cost  of your fleet to balance usage in queues. For
                 more information about queues, see Setting up queues  in  the
                 Amazon GameLift Developer Guide .

          InstanceRoleCredentialsProvider -> (string)
              Indicates  that  fleet  instances  maintain a shared credentials
              file for the IAM role defined in InstanceRoleArn .  Shared  cre-
              dentials  allow  applications  that  are  deployed with the game
              server executable to communicate with other Amazon Web  Services
              resources.  This  property  is used only when the game server is
              integrated with the server SDK version 5.x. For more information
              about  using shared credentials, see Communicate with other Ama-
              zon Web Services resources from your fleets . This attribute  is
              used with fleets where ComputeType is "EC2".

       LocationStates -> (list)
          The  fleet's  locations  and life-cycle status of each location. For
          new fleets, the status of all locations is set to NEW . During fleet
          creation,  Amazon GameLift updates each location status as instances
          are deployed there and prepared for game hosting. This list includes
          an  entry for the fleet's home Region. For fleets with no remote lo-
          cations, only one entry, representing the home Region, is returned.

          (structure)
              A fleet location and its life-cycle state. A location state  ob-
              ject might be used to describe a fleet's remote location or home
              Region. Life-cycle state tracks the progress  of  launching  the
              first instance in a new location and preparing it for game host-
              ing, and then removing all instances and deleting  the  location
              from the fleet.

              o NEW  --  A new fleet location has been defined and desired in-
                stances is set to 1.

              o DOWNLOADING/VALIDATING/BUILDING/ACTIVATING -- Amazon  GameLift
                is  setting  up the new fleet location, creating new instances
                with the game build or Realtime  script  and  starting  server
                processes.

              o ACTIVE -- Hosts can now accept game sessions.

              o ERROR  --  An  error  occurred  when  downloading, validating,
                building, or activating the fleet location.

              o DELETING -- Hosts are responding to a  delete  fleet  location
                request.

              o TERMINATED -- The fleet location no longer exists.

              o NOT_FOUND  --  The fleet location was not found. This could be
                because the custom location was removed or not created.

              Location -> (string)
                 The fleet location, expressed as an Amazon Web  Services  Re-
                 gion code such as us-west-2 .

              Status -> (string)
                 The life-cycle status of a fleet location.



                                                                CREATE-FLEET()
