UPDATE-USER-POOL-CLIENT()                            UPDATE-USER-POOL-CLIENT()



NAME
       update-user-pool-client -

DESCRIPTION
       Updates  the  specified  user  pool  app  client with the specified at-
       tributes. You can get a list of the current user pool app  client  set-
       tings using DescribeUserPoolClient .

       WARNING:
          If you don't provide a value for an attribute, it will be set to the
          default value.

       You can also use this operation to enable  token  revocation  for  user
       pool   clients.   For  more  information  about  revoking  tokens,  see
       RevokeToken .

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            update-user-pool-client
          --user-pool-id <value>
          --client-id <value>
          [--client-name <value>]
          [--refresh-token-validity <value>]
          [--access-token-validity <value>]
          [--id-token-validity <value>]
          [--token-validity-units <value>]
          [--read-attributes <value>]
          [--write-attributes <value>]
          [--explicit-auth-flows <value>]
          [--supported-identity-providers <value>]
          [--callback-urls <value>]
          [--logout-urls <value>]
          [--default-redirect-uri <value>]
          [--allowed-o-auth-flows <value>]
          [--allowed-o-auth-scopes <value>]
          [--allowed-o-auth-flows-user-pool-client | --no-allowed-o-auth-flows-user-pool-client]
          [--analytics-configuration <value>]
          [--prevent-user-existence-errors <value>]
          [--enable-token-revocation | --no-enable-token-revocation]
          [--enable-propagate-additional-user-context-data | --no-enable-propagate-additional-user-context-data]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]

OPTIONS
       --user-pool-id (string)
          The user pool ID for the user pool where you want to update the user
          pool client.

       --client-id (string)
          The ID of the client associated with the user pool.

       --client-name (string)
          The client name from the update user pool client request.

       --refresh-token-validity (integer)
          The  refresh  token  time limit. After this limit expires, your user
          can't use their refresh token. To specify the time unit for Refresh-
          TokenValidity  as seconds , minutes , hours , or days , set a Token-
          ValidityUnits value in your API request.

          For example, when you set RefreshTokenValidity as 10 and TokenValid-
          ityUnits  as days , your user can refresh their session and retrieve
          new access and ID tokens for 10 days.

          The default time unit for RefreshTokenValidity in an API request  is
          days.  You  can't  set  RefreshTokenValidity to 0. If you do, Amazon
          Cognito overrides the value with the default value of 30 days. Valid
          range is displayed below in seconds.

       --access-token-validity (integer)
          The  access  token  time  limit. After this limit expires, your user
          can't use their access token. To specify the time unit for AccessTo-
          kenValidity  as seconds , minutes , hours , or days , set a TokenVa-
          lidityUnits value in your API request.

          For example, when you set AccessTokenValidity to 10 and TokenValidi-
          tyUnits  to hours , your user can authorize access with their access
          token for 10 hours.

          The default time unit for AccessTokenValidity in an API  request  is
          hours. Valid range is displayed below in seconds.

       --id-token-validity (integer)
          The  ID  token time limit. After this limit expires, your user can't
          use their ID token. To specify the time unit for IdTokenValidity  as
          seconds , minutes , hours , or days , set a TokenValidityUnits value
          in your API request.

          For example, when you set IdTokenValidity as 10 and  TokenValidityU-
          nits  as hours , your user can authenticate their session with their
          ID token for 10 hours.

          The default time unit for AccessTokenValidity in an API  request  is
          hours. Valid range is displayed below in seconds.

       --token-validity-units (structure)
          The  units  in which the validity times are represented. The default
          unit for RefreshToken is days, and the default for ID and access to-
          kens is hours.

          AccessToken -> (string)
              A time unit of seconds , minutes , hours , or days for the value
              that you set in the AccessTokenValidity parameter.  The  default
              AccessTokenValidity time unit is hours.

          IdToken -> (string)
              A time unit of seconds , minutes , hours , or days for the value
              that you set in the IdTokenValidity parameter. The default IdTo-
              kenValidity time unit is hours.

          RefreshToken -> (string)
              A time unit of seconds , minutes , hours , or days for the value
              that you set in the RefreshTokenValidity parameter. The  default
              RefreshTokenValidity time unit is days.

       Shorthand Syntax:

          AccessToken=string,IdToken=string,RefreshToken=string

       JSON Syntax:

          {
            "AccessToken": "seconds"|"minutes"|"hours"|"days",
            "IdToken": "seconds"|"minutes"|"hours"|"days",
            "RefreshToken": "seconds"|"minutes"|"hours"|"days"
          }

       --read-attributes (list)
          The read-only attributes of the user pool.

          (string)

       Syntax:

          "string" "string" ...

       --write-attributes (list)
          The writeable attributes of the user pool.

          (string)

       Syntax:

          "string" "string" ...

       --explicit-auth-flows (list)
          The  authentication  flows  that  are  supported  by  the  user pool
          clients. Flow names without the ALLOW_ prefix  are  no  longer  sup-
          ported  in favor of new names with the ALLOW_ prefix. Note that val-
          ues with ALLOW_ prefix must be used only along with values with  the
          ALLOW_ prefix.

          Valid values include:

          o ALLOW_ADMIN_USER_PASSWORD_AUTH  : Enable admin based user password
            authentication flow ADMIN_USER_PASSWORD_AUTH .  This  setting  re-
            places  the  ADMIN_NO_SRP_AUTH  setting.  With this authentication
            flow, Amazon Cognito receives the password in the request  instead
            of using the Secure Remote Password (SRP) protocol to verify pass-
            words.

          o ALLOW_CUSTOM_AUTH : Enable Lambda trigger based authentication.

          o ALLOW_USER_PASSWORD_AUTH : Enable user password-based  authentica-
            tion.  In  this  flow, Amazon Cognito receives the password in the
            request instead of using the SRP protocol to verify passwords.

          o ALLOW_USER_SRP_AUTH : Enable SRP-based authentication.

          o ALLOW_REFRESH_TOKEN_AUTH : Enable authflow to refresh tokens.

          (string)

       Syntax:

          "string" "string" ...

          Where valid values are:
            ADMIN_NO_SRP_AUTH
            CUSTOM_AUTH_FLOW_ONLY
            USER_PASSWORD_AUTH
            ALLOW_ADMIN_USER_PASSWORD_AUTH
            ALLOW_CUSTOM_AUTH
            ALLOW_USER_PASSWORD_AUTH
            ALLOW_USER_SRP_AUTH
            ALLOW_REFRESH_TOKEN_AUTH

       --supported-identity-providers (list)
          A list of provider names for the IdPs that this client supports. The
          following  are supported: COGNITO , Facebook , Google  LoginWithAma-
          zon , and the names of your own SAML and OIDC providers.

          (string)

       Syntax:

          "string" "string" ...

       --callback-urls (list)
          A list of allowed redirect (callback) URLs for the IdPs.

          A redirect URI must:

          o Be an absolute URI.

          o Be registered with the authorization server.

          o Not include a fragment component.

          See OAuth 2.0 - Redirection Endpoint .

          Amazon Cognito requires HTTPS over HTTP except for  http://localhost
          for testing purposes only.

          App callback URLs such as myapp://example are also supported.

          (string)

       Syntax:

          "string" "string" ...

       --logout-urls (list)
          A list of allowed logout URLs for the IdPs.

          (string)

       Syntax:

          "string" "string" ...

       --default-redirect-uri (string)
          The default redirect URI. Must be in the CallbackURLs list.

          A redirect URI must:

          o Be an absolute URI.

          o Be registered with the authorization server.

          o Not include a fragment component.

          See OAuth 2.0 - Redirection Endpoint .

          Amazon  Cognito requires HTTPS over HTTP except for http://localhost
          for testing purposes only.

          App callback URLs such as myapp://example are also supported.

       --allowed-o-auth-flows (list)
          The allowed OAuth flows.
              code

          Use a code grant flow, which provides an authorization code  as  the
          response.  This  code  can  be  exchanged for access tokens with the
          /oauth2/token endpoint.
              implicit

          Issue the access token (and, optionally, ID token, based on  scopes)
          directly to your user.
              client_credentials

          Issue the access token from the /oauth2/token endpoint directly to a
          non-person user using a combination of the client ID and client  se-
          cret.
              (string)

       Syntax:

          "string" "string" ...

          Where valid values are:
            code
            implicit
            client_credentials

       --allowed-o-auth-scopes (list)
          The  allowed  OAuth  scopes.  Possible  values provided by OAuth are
          phone , email , openid , and profile . Possible values  provided  by
          Amazon  Web  Services  are  aws.cognito.signin.user.admin  .  Custom
          scopes created in Resource Servers are also supported.

          (string)

       Syntax:

          "string" "string" ...

       --allowed-o-auth-flows-user-pool-client           |            --no-al-
       lowed-o-auth-flows-user-pool-client (boolean)
          Set  to  true  if the client is allowed to follow the OAuth protocol
          when interacting with Amazon Cognito user pools.

       --analytics-configuration (structure)
          The Amazon Pinpoint analytics  configuration  necessary  to  collect
          metrics for this user pool.

          NOTE:
              In  Amazon  Web  Services  Regions  where  Amazon Pinpoint isn't
              available, user pools only support sending events to Amazon Pin-
              point projects in us-east-1. In Regions where Amazon Pinpoint is
              available, user pools support sending events to Amazon  Pinpoint
              projects within that same Region.

          ApplicationId -> (string)
              The application ID for an Amazon Pinpoint application.

          ApplicationArn -> (string)
              The  Amazon  Resource  Name (ARN) of an Amazon Pinpoint project.
              You can use the Amazon Pinpoint project to  integrate  with  the
              chosen  user pool Client. Amazon Cognito publishes events to the
              Amazon Pinpoint project that the app ARN declares.

          RoleArn -> (string)
              The ARN of an Identity and Access Management  role  that  autho-
              rizes  Amazon  Cognito to publish events to Amazon Pinpoint ana-
              lytics.

          ExternalId -> (string)
              The external ID.

          UserDataShared -> (boolean)
              If UserDataShared is true , Amazon Cognito includes user data in
              the events that it publishes to Amazon Pinpoint analytics.

       Shorthand Syntax:

          ApplicationId=string,ApplicationArn=string,RoleArn=string,ExternalId=string,UserDataShared=boolean

       JSON Syntax:

          {
            "ApplicationId": "string",
            "ApplicationArn": "string",
            "RoleArn": "string",
            "ExternalId": "string",
            "UserDataShared": true|false
          }

       --prevent-user-existence-errors (string)
          Errors  and  responses  that  you want Amazon Cognito APIs to return
          during authentication, account confirmation, and  password  recovery
          when  the  user  doesn't exist in the user pool. When set to ENABLED
          and the user doesn't exist, authentication returns an error indicat-
          ing either the username or password was incorrect. Account confirma-
          tion and password recovery return a response indicating a  code  was
          sent to a simulated destination. When set to LEGACY , those APIs re-
          turn a UserNotFoundException exception if the user doesn't exist  in
          the user pool.

          Valid values include:

          o ENABLED - This prevents user existence-related errors.

          o LEGACY  -  This  represents  the  early behavior of Amazon Cognito
            where user existence related errors aren't prevented.

          Possible values:

          o LEGACY

          o ENABLED

       --enable-token-revocation | --no-enable-token-revocation (boolean)
          Activates or deactivates  token  revocation.  For  more  information
          about revoking tokens, see RevokeToken .

       --enable-propagate-additional-user-context-data   |  --no-enable-propa-
       gate-additional-user-context-data (boolean)
          Activates the propagation of additional user context data. For  more
          information  about  propagation of user context data, see Adding ad-
          vanced security to a user pool . If you dont include this parameter,
          you  can't  send device fingerprint information, including source IP
          address, to Amazon Cognito advanced security. You can only  activate
          EnablePropagateAdditionalUserContextData in an app client that has a
          client secret.

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       NOTE:
          To  use  the following examples, you must have the AWS CLI installed
          and configured. See the Getting started guide in the  AWS  CLI  User
          Guide for more information.

          Unless  otherwise  stated,  all  examples  have  unix-like quotation
          rules. These examples will need to be  adapted  to  your  terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To update a user pool client

       This example updates the name of a user pool client.  It  also  adds  a
       writeable attribute "nickname".

       Command:

          aws cognito-idp update-user-pool-client --user-pool-id us-west-2_aaaaaaaaa --client-id 3n4b5urk1ft4fl3mg5e62d9ado --client-name "NewClientName" --write-attributes "nickname"

       Output:

          {
            "UserPoolClient": {
                "UserPoolId": "us-west-2_aaaaaaaaa",
                "ClientName": "NewClientName",
                "ClientId": "3n4b5urk1ft4fl3mg5e62d9ado",
                "LastModifiedDate": 1548802761.334,
                "CreationDate": 1548178931.258,
                "RefreshTokenValidity": 30,
                "WriteAttributes": [
                    "nickname"
                ],
                "AllowedOAuthFlowsUserPoolClient": false
            }
          }

OUTPUT
       UserPoolClient -> (structure)
          The  user  pool  client value from the response from the server when
          you request to update the user pool client.

          UserPoolId -> (string)
              The user pool ID for the user pool client.

          ClientName -> (string)
              The client name from the user pool request of the client type.

          ClientId -> (string)
              The ID of the client associated with the user pool.

          ClientSecret -> (string)
              The client secret from the user pool request of the client type.

          LastModifiedDate -> (timestamp)
              The date the user pool client was last modified.

          CreationDate -> (timestamp)
              The date the user pool client was created.

          RefreshTokenValidity -> (integer)
              The refresh token time limit. After  this  limit  expires,  your
              user can't use their refresh token. To specify the time unit for
              RefreshTokenValidity as seconds , minutes , hours ,  or  days  ,
              set a TokenValidityUnits value in your API request.

              For  example, when you set RefreshTokenValidity as 10 and Token-
              ValidityUnits as days , your user can refresh their session  and
              retrieve new access and ID tokens for 10 days.

              The default time unit for RefreshTokenValidity in an API request
              is days. You can't set RefreshTokenValidity to  0.  If  you  do,
              Amazon  Cognito overrides the value with the default value of 30
              days. Valid range is displayed below in seconds.

          AccessTokenValidity -> (integer)
              The access token time limit. After this limit expires, your user
              can't  use  their access token. To specify the time unit for Ac-
              cessTokenValidity as seconds , minutes , hours , or days , set a
              TokenValidityUnits value in your API request.

              For example, when you set AccessTokenValidity to 10 and TokenVa-
              lidityUnits to hours , your user can authorize access with their
              access token for 10 hours.

              The  default time unit for AccessTokenValidity in an API request
              is hours. Valid range is displayed below in seconds.

          IdTokenValidity -> (integer)
              The ID token time limit. After this  limit  expires,  your  user
              can't  use their ID token. To specify the time unit for IdToken-
              Validity as seconds , minutes , hours , or days , set a TokenVa-
              lidityUnits value in your API request.

              For example, when you set IdTokenValidity as 10 and TokenValidi-
              tyUnits as hours , your user can authenticate their session with
              their ID token for 10 hours.

              The  default time unit for AccessTokenValidity in an API request
              is hours. Valid range is displayed below in seconds.

          TokenValidityUnits -> (structure)
              The time units used to specify the token validity times of  each
              token type: ID, access, and refresh.

              AccessToken -> (string)
                 A  time  unit  of seconds , minutes , hours , or days for the
                 value that you set in the AccessTokenValidity parameter.  The
                 default AccessTokenValidity time unit is hours.

              IdToken -> (string)
                 A  time  unit  of seconds , minutes , hours , or days for the
                 value that you set in the IdTokenValidity parameter. The  de-
                 fault IdTokenValidity time unit is hours.

              RefreshToken -> (string)
                 A  time  unit  of seconds , minutes , hours , or days for the
                 value that you set in the RefreshTokenValidity parameter. The
                 default RefreshTokenValidity time unit is days.

          ReadAttributes -> (list)
              The Read-only attributes.

              (string)

          WriteAttributes -> (list)
              The writeable attributes.

              (string)

          ExplicitAuthFlows -> (list)
              The  authentication  flows  that  are supported by the user pool
              clients. Flow names without the ALLOW_ prefix are no longer sup-
              ported  in  favor of new names with the ALLOW_ prefix. Note that
              values with ALLOW_ prefix must be used only  along  with  values
              including the ALLOW_ prefix.

              Valid values include:

              o ALLOW_ADMIN_USER_PASSWORD_AUTH : Enable admin based user pass-
                word authentication flow ADMIN_USER_PASSWORD_AUTH . This  set-
                ting replaces the ADMIN_NO_SRP_AUTH setting. With this authen-
                tication flow, Amazon Cognito receives the password in the re-
                quest instead of using the Secure Remote Password (SRP) proto-
                col to verify passwords.

              o ALLOW_CUSTOM_AUTH : Enable Lambda  trigger  based  authentica-
                tion.

              o ALLOW_USER_PASSWORD_AUTH  : Enable user password-based authen-
                tication. In this flow, Amazon Cognito receives  the  password
                in  the  request  instead  of using the SRP protocol to verify
                passwords.

              o ALLOW_USER_SRP_AUTH : Enable SRP-based authentication.

              o ALLOW_REFRESH_TOKEN_AUTH : Enable authflow to refresh tokens.

              (string)

          SupportedIdentityProviders -> (list)
              A list of provider names for the IdPs that this client supports.
              The following are supported: COGNITO , Facebook , Google  Login-
              WithAmazon , and the names of your own SAML and OIDC providers.

              (string)

          CallbackURLs -> (list)
              A list of allowed redirect (callback) URLs for the IdPs.

              A redirect URI must:

              o Be an absolute URI.

              o Be registered with the authorization server.

              o Not include a fragment component.

              See OAuth 2.0 - Redirection Endpoint .

              Amazon   Cognito   requires   HTTPS   over   HTTP   except   for
              http://localhost for testing purposes only.

              App callback URLs such as myapp://example are also supported.

              (string)

          LogoutURLs -> (list)
              A list of allowed logout URLs for the IdPs.

              (string)

          DefaultRedirectURI -> (string)
              The default redirect URI. Must be in the CallbackURLs list.

              A redirect URI must:

              o Be an absolute URI.

              o Be registered with the authorization server.

              o Not include a fragment component.

              See OAuth 2.0 - Redirection Endpoint .

              Amazon   Cognito   requires   HTTPS   over   HTTP   except   for
              http://localhost for testing purposes only.

              App callback URLs such as myapp://example are also supported.

          AllowedOAuthFlows -> (list)
              The allowed OAuth flows.
                 code

              Use a code grant flow, which provides an authorization  code  as
              the  response. This code can be exchanged for access tokens with
              the /oauth2/token endpoint.
                 implicit

              Issue the access token (and,  optionally,  ID  token,  based  on
              scopes) directly to your user.
                 client_credentials

              Issue  the access token from the /oauth2/token endpoint directly
              to a non-person user using a combination of the  client  ID  and
              client secret.

              (string)

          AllowedOAuthScopes -> (list)
              The  OAuth scopes that your app client supports. Possible values
              that OAuth provides are phone , email , openid , and  profile  .
              Possible  values  that Amazon Web Services provides are aws.cog-
              nito.signin.user.admin . Amazon  Cognito  also  supports  custom
              scopes that you create in Resource Servers.

              (string)

          AllowedOAuthFlowsUserPoolClient -> (boolean)
              Set  to true if the client is allowed to follow the OAuth proto-
              col when interacting with Amazon Cognito user pools.

          AnalyticsConfiguration -> (structure)
              The Amazon Pinpoint analytics configuration for  the  user  pool
              client.

              NOTE:
                 Amazon Cognito user pools only support sending events to Ama-
                 zon Pinpoint projects in the US East (N. Virginia)  us-east-1
                 Region, regardless of the Region where the user pool resides.

              ApplicationId -> (string)
                 The application ID for an Amazon Pinpoint application.

              ApplicationArn -> (string)
                 The Amazon Resource Name (ARN) of an Amazon Pinpoint project.
                 You can use the Amazon Pinpoint project to integrate with the
                 chosen  user  pool Client. Amazon Cognito publishes events to
                 the Amazon Pinpoint project that the app ARN declares.

              RoleArn -> (string)
                 The ARN of an Identity and Access Management role that autho-
                 rizes Amazon Cognito to publish events to Amazon Pinpoint an-
                 alytics.

              ExternalId -> (string)
                 The external ID.

              UserDataShared -> (boolean)
                 If UserDataShared is true , Amazon Cognito includes user data
                 in the events that it publishes to Amazon Pinpoint analytics.

          PreventUserExistenceErrors -> (string)
              Errors and responses that you want Amazon Cognito APIs to return
              during authentication, account confirmation, and password recov-
              ery  when  the  user doesn't exist in the user pool. When set to
              ENABLED and the user doesn't exist,  authentication  returns  an
              error  indicating either the username or password was incorrect.
              Account confirmation and password recovery return a response in-
              dicating a code was sent to a simulated destination. When set to
              LEGACY , those APIs return a UserNotFoundException exception  if
              the user doesn't exist in the user pool.

              Valid values include:

              o ENABLED - This prevents user existence-related errors.

              o LEGACY  -  This  represents the old behavior of Amazon Cognito
                where user existence related errors aren't prevented.

          EnableTokenRevocation -> (boolean)
              Indicates whether token revocation is  activated  for  the  user
              pool client. When you create a new user pool client, token revo-
              cation is activated by default. For more information  about  re-
              voking tokens, see RevokeToken .

          EnablePropagateAdditionalUserContextData -> (boolean)
              When  EnablePropagateAdditionalUserContextData  is  true, Amazon
              Cognito accepts an IpAddress value that you send in the UserCon-
              textData parameter. The UserContextData parameter sends informa-
              tion to Amazon Cognito advanced security for risk analysis.  You
              can  send UserContextData when you sign in Amazon Cognito native
              users with the InitiateAuth and RespondToAuthChallenge API oper-
              ations.

              When   EnablePropagateAdditionalUserContextData  is  false,  you
              can't send your user's source IP address to Amazon  Cognito  ad-
              vanced security with unauthenticated API operations. EnableProp-
              agateAdditionalUserContextData doesn't affect  whether  you  can
              send a source IP address in a ContextData parameter with the au-
              thenticated API operations AdminInitiateAuth  and  AdminRespond-
              ToAuthChallenge .

              You  can  only activate EnablePropagateAdditionalUserContextData
              in an app client that has a client secret. For more  information
              about  propagation  of user context data, see Adding user device
              and session data to API requests .



                                                     UPDATE-USER-POOL-CLIENT()
