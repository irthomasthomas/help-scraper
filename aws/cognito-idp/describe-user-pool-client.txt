DESCRIBE-USER-POOL-CLIENT()                        DESCRIBE-USER-POOL-CLIENT()



NAME
       describe-user-pool-client -

DESCRIPTION
       Client  method for returning the configuration information and metadata
       of the specified user pool app client.

       NOTE:
          Amazon Cognito evaluates Identity and Access Management (IAM)  poli-
          cies  in  requests  for  this API operation. For this operation, you
          must use IAM credentials to authorize requests, and you  must  grant
          yourself the corresponding IAM permission in a policy.
              Learn more

          o Signing Amazon Web Services API Requests

          o Using the Amazon Cognito user pools API and user pool endpoints

       See also: AWS API Documentation

SYNOPSIS
            describe-user-pool-client
          --user-pool-id <value>
          --client-id <value>
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --user-pool-id (string)
          The user pool ID for the user pool you want to describe.

       --client-id (string)
          The app client ID of the app associated with the user pool.

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination. If automatic pagination is disabled,  the
       AWS CLI will only make one call, for the first page of results.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

EXAMPLES
       NOTE:
          To  use  the following examples, you must have the AWS CLI installed
          and configured. See the Getting started guide in the  AWS  CLI  User
          Guide for more information.

          Unless  otherwise  stated,  all  examples  have  unix-like quotation
          rules. These examples will need to be  adapted  to  your  terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To describe a user pool client

       This example describes a user pool client.

       Command:

          aws cognito-idp describe-user-pool-client --user-pool-id us-west-2_aaaaaaaaa --client-id 38fjsnc484p94kpqsnet7mpld0

       Output:

          {
            "UserPoolClient": {
                "UserPoolId": "us-west-2_aaaaaaaaa",
                "ClientName": "MyApp",
                "ClientId": "38fjsnc484p94kpqsnet7mpld0",
                "ClientSecret": "CLIENT_SECRET",
                "LastModifiedDate": 1548108676.163,
                "CreationDate": 1548108676.163,
                "RefreshTokenValidity": 30,
                "ReadAttributes": [
                    "address",
                    "birthdate",
                    "custom:CustomAttr1",
                    "custom:CustomAttr2",
                    "email",
                    "email_verified",
                    "family_name",
                    "gender",
                    "given_name",
                    "locale",
                    "middle_name",
                    "name",
                    "nickname",
                    "phone_number",
                    "phone_number_verified",
                    "picture",
                    "preferred_username",
                    "profile",
                    "updated_at",
                    "website",
                    "zoneinfo"
                ],
                "WriteAttributes": [
                    "address",
                    "birthdate",
                    "custom:CustomAttr1",
                    "custom:CustomAttr2",
                    "email",
                    "family_name",
                    "gender",
                    "given_name",
                    "locale",
                    "middle_name",
                    "name",
                    "nickname",
                    "phone_number",
                    "picture",
                    "preferred_username",
                    "profile",
                    "updated_at",
                    "website",
                    "zoneinfo"
                ],
                "ExplicitAuthFlows": [
                    "ADMIN_NO_SRP_AUTH",
                    "USER_PASSWORD_AUTH"
                ],
                "AllowedOAuthFlowsUserPoolClient": false
            }
          }

OUTPUT
       UserPoolClient -> (structure)
          The user pool client from a server response  to  describe  the  user
          pool client.

          UserPoolId -> (string)
              The ID of the user pool associated with the app client.

          ClientName -> (string)
              The name of the app client.

          ClientId -> (string)
              The ID of the app client.

          ClientSecret -> (string)
              The app client secret.

          LastModifiedDate -> (timestamp)
              The date and time when the item was modified. Amazon Cognito re-
              turns this timestamp in UNIX epoch time format. Your  SDK  might
              render  the output in a human-readable format like ISO 8601 or a
              Java Date object.

          CreationDate -> (timestamp)
              The date and time when the item was created. Amazon Cognito  re-
              turns  this  timestamp in UNIX epoch time format. Your SDK might
              render the output in a human-readable format like ISO 8601 or  a
              Java Date object.

          RefreshTokenValidity -> (integer)
              The  refresh  token  time  limit. After this limit expires, your
              user can't use their refresh token. To specify the time unit for
              RefreshTokenValidity  as  seconds  , minutes , hours , or days ,
              set a TokenValidityUnits value in your API request.

              For example, when you set RefreshTokenValidity as 10 and  Token-
              ValidityUnits  as days , your user can refresh their session and
              retrieve new access and ID tokens for 10 days.

              The default time unit for RefreshTokenValidity in an API request
              is  days.  You  can't  set RefreshTokenValidity to 0. If you do,
              Amazon Cognito overrides the value with the default value of  30
              days. Valid range is displayed below in seconds.

              If  you don't specify otherwise in the configuration of your app
              client, your refresh tokens are valid for 30 days.

          AccessTokenValidity -> (integer)
              The access token time limit. After this limit expires, your user
              can't  use  their access token. To specify the time unit for Ac-
              cessTokenValidity as seconds , minutes , hours , or days , set a
              TokenValidityUnits value in your API request.

              For example, when you set AccessTokenValidity to 10 and TokenVa-
              lidityUnits to hours , your user can authorize access with their
              access token for 10 hours.

              The  default time unit for AccessTokenValidity in an API request
              is hours. Valid range is displayed below in seconds.

              If you don't specify otherwise in the configuration of your  app
              client, your access tokens are valid for one hour.

          IdTokenValidity -> (integer)
              The  ID  token  time  limit. After this limit expires, your user
              can't use their ID token. To specify the time unit for  IdToken-
              Validity as seconds , minutes , hours , or days , set a TokenVa-
              lidityUnits value in your API request.

              For example, when you set IdTokenValidity as 10 and TokenValidi-
              tyUnits as hours , your user can authenticate their session with
              their ID token for 10 hours.

              The default time unit for IdTokenValidity in an API  request  is
              hours. Valid range is displayed below in seconds.

              If  you don't specify otherwise in the configuration of your app
              client, your ID tokens are valid for one hour.

          TokenValidityUnits -> (structure)
              The time units that, with IdTokenValidity ,  AccessTokenValidity
              , and RefreshTokenValidity , set and display the duration of ID,
              access, and refresh tokens for an app client. You can  assign  a
              separate token validity unit to each type of token.

              AccessToken -> (string)
                 A  time unit for the value that you set in the AccessTokenVa-
                 lidity parameter. The default AccessTokenValidity  time  unit
                 is  hours  . AccessTokenValidity duration can range from five
                 minutes to one day.

              IdToken -> (string)
                 A time unit for the value that you set in the IdTokenValidity
                 parameter.  The  default IdTokenValidity time unit is hours .
                 IdTokenValidity duration can range from five minutes  to  one
                 day.

              RefreshToken -> (string)
                 A time unit for the value that you set in the RefreshTokenVa-
                 lidity parameter. The default RefreshTokenValidity time  unit
                 is  days  .  RefreshTokenValidity  duration can range from 60
                 minutes to 10 years.

          ReadAttributes -> (list)
              The list of user attributes that you want  your  app  client  to
              have  read access to. After your user authenticates in your app,
              their access token authorizes them to read their  own  attribute
              value for any attribute in this list. An example of this kind of
              activity is when your user selects a link to view their  profile
              information.  Your  app  makes a GetUser API request to retrieve
              and display your user's profile data.

              When you don't specify the ReadAttributes for your  app  client,
              your  app  can  read  the  values of email_verified , phone_num-
              ber_verified , and the Standard attributes of  your  user  pool.
              When  your user pool app client has read access to these default
              attributes, ReadAttributes doesn't return any information.  Ama-
              zon Cognito only populates ReadAttributes in the API response if
              you have specified your own custom set of read attributes.

              (string)

          WriteAttributes -> (list)
              The list of user attributes that you want  your  app  client  to
              have write access to. After your user authenticates in your app,
              their access token authorizes them to set or  modify  their  own
              attribute  value  for  any attribute in this list. An example of
              this kind of activity is when you present your user with a  form
              to  update  their profile information and they change their last
              name. Your app then makes an  UpdateUserAttributes  API  request
              and sets family_name to the new value.

              When  you don't specify the WriteAttributes for your app client,
              your app can write the values of the Standard attributes of your
              user pool. When your user pool has write access to these default
              attributes, WriteAttributes doesn't return any information. Ama-
              zon  Cognito  only populates WriteAttributes in the API response
              if you have specified your own custom set of write attributes.

              If your app client allows users to sign in through an IdP,  this
              array  must  include  all attributes that you have mapped to IdP
              attributes. Amazon Cognito updates mapped attributes when  users
              sign  in  to your application through an IdP. If your app client
              does not have write access to a mapped attribute, Amazon Cognito
              throws  an error when it tries to update the attribute. For more
              information, see Specifying IdP Attribute Mappings for Your user
              pool .

              (string)

          ExplicitAuthFlows -> (list)
              The  authentication flows that you want your user pool client to
              support. For each app client in your user pool, you can sign  in
              your  users with any combination of one or more flows, including
              with a user name and Secure Remote Password (SRP), a  user  name
              and password, or a custom authentication process that you define
              with Lambda functions.

              NOTE:
                 If you don't specify a value  for  ExplicitAuthFlows  ,  your
                 user   client   supports   ALLOW_REFRESH_TOKEN_AUTH   ,   AL-
                 LOW_USER_SRP_AUTH , and ALLOW_CUSTOM_AUTH .

              Valid values include:

              o ALLOW_USER_AUTH  :   Enable   selection-based   sign-in   with
                USER_AUTH  . This setting covers username-password, secure re-
                mote password (SRP), passwordless, and passkey authentication.
                This  authentiation  flow can do username-password and SRP au-
                thentication without other ExplicitAuthFlows permitting  them.
                For  example  users  can  complete  an  SRP  challenge through
                USER_AUTH without the flow USER_SRP_AUTH being active for  the
                app client. This flow doesn't include CUSTOM_AUTH .

              o ALLOW_ADMIN_USER_PASSWORD_AUTH : Enable admin based user pass-
                word authentication flow ADMIN_USER_PASSWORD_AUTH . This  set-
                ting replaces the ADMIN_NO_SRP_AUTH setting. With this authen-
                tication flow, your app passes a user  name  and  password  to
                Amazon Cognito in the request, instead of using the Secure Re-
                mote Password (SRP) protocol to securely  transmit  the  pass-
                word.

              o ALLOW_CUSTOM_AUTH  :  Enable  Lambda trigger based authentica-
                tion.

              o ALLOW_USER_PASSWORD_AUTH : Enable user password-based  authen-
                tication.  In  this flow, Amazon Cognito receives the password
                in the request instead of using the  SRP  protocol  to  verify
                passwords.

              o ALLOW_USER_SRP_AUTH : Enable SRP-based authentication.

              o ALLOW_REFRESH_TOKEN_AUTH : Enable authflow to refresh tokens.

              In  some environments, you will see the values ADMIN_NO_SRP_AUTH
              , CUSTOM_AUTH_FLOW_ONLY , or USER_PASSWORD_AUTH . You can't  as-
              sign  these legacy ExplicitAuthFlows values to user pool clients
              at the same time as values that begin with  ALLOW_  ,  like  AL-
              LOW_USER_SRP_AUTH .

              (string)

          SupportedIdentityProviders -> (list)
              A  list of provider names for the identity providers (IdPs) that
              are supported on this client. The following are supported:  COG-
              NITO , Facebook , Google , SignInWithApple , and LoginWithAmazon
              . You can also specify the names that  you  configured  for  the
              SAML  and  OIDC IdPs in your user pool, for example MySAMLIdP or
              MyOIDCIdP .

              This setting applies to providers that you can access  with  the
              hosted  UI  and  OAuth 2.0 authorization server . The removal of
              COGNITO from this list doesn't prevent authentication operations
              for  local  users  with the user pools API in an Amazon Web Ser-
              vices SDK. The only way to prevent API-based  authentication  is
              to block access with a WAF rule .

              (string)

          CallbackURLs -> (list)
              A list of allowed redirect (callback) URLs for the IdPs.

              A redirect URI must:

              o Be an absolute URI.

              o Be registered with the authorization server.

              o Not include a fragment component.

              See OAuth 2.0 - Redirection Endpoint .

              Amazon   Cognito   requires   HTTPS   over   HTTP   except   for
              http://localhost for testing purposes only.

              App callback URLs such as myapp://example are also supported.

              (string)

          LogoutURLs -> (list)
              A list of allowed logout URLs for the IdPs.

              (string)

          DefaultRedirectURI -> (string)
              The default redirect URI. Must be in the CallbackURLs list.

              A redirect URI must:

              o Be an absolute URI.

              o Be registered with the authorization server.

              o Not include a fragment component.

              See OAuth 2.0 - Redirection Endpoint .

              Amazon   Cognito   requires   HTTPS   over   HTTP   except   for
              http://localhost for testing purposes only.

              App callback URLs such as myapp://example are also supported.

          AllowedOAuthFlows -> (list)
              The OAuth grant types that you want your app client to generate.
              To create  an  app  client  that  generates  client  credentials
              grants,  you  must  add  client_credentials  as the only allowed
              OAuth flow.
                 code

              Use a code grant flow, which provides an authorization  code  as
              the  response. This code can be exchanged for access tokens with
              the /oauth2/token endpoint.
                 implicit

              Issue the access token (and,  optionally,  ID  token,  based  on
              scopes) directly to your user.
                 client_credentials

              Issue  the access token from the /oauth2/token endpoint directly
              to a non-person user using a combination of the  client  ID  and
              client secret.

              (string)

          AllowedOAuthScopes -> (list)
              The  OAuth  2.0 scopes that you want your app client to support.
              Can include standard OAuth scopes like phone , email , openid  ,
              and profile . Can also include the aws.cognito.signin.user.admin
              scope that authorizes user profile self-service  operations  and
              custom scopes from resource servers.

              (string)

          AllowedOAuthFlowsUserPoolClient -> (boolean)
              Set  to  true  to  use  OAuth 2.0 features in your user pool app
              client.
                 AllowedOAuthFlowsUserPoolClient must be true before  you  can
                 configure the following features in your app client.

              o CallBackURLs : Callback URLs.

              o LogoutURLs : Sign-out redirect URLs.

              o AllowedOAuthScopes : OAuth 2.0 scopes.

              o AllowedOAuthFlows  : Support for authorization code, implicit,
                and client credentials OAuth 2.0 grants.

              To use OAuth 2.0 features, configure one of  these  features  in
              the  Amazon  Cognito  console  or set AllowedOAuthFlowsUserPool-
              Client to true in a CreateUserPoolClient or UpdateUserPoolClient
              API request. If you don't set a value for AllowedOAuthFlowsUser-
              PoolClient in a request with the CLI or  SDKs,  it  defaults  to
              false .

          AnalyticsConfiguration -> (structure)
              The user pool analytics configuration for collecting metrics and
              sending them to your Amazon Pinpoint campaign.

              NOTE:
                 In Amazon Web Services Regions where  Amazon  Pinpoint  isn't
                 available,  user  pools only support sending events to Amazon
                 Pinpoint projects in Amazon Web Services Region us-east-1. In
                 Regions  where  Amazon Pinpoint is available, user pools sup-
                 port sending events to Amazon Pinpoint projects  within  that
                 same Region.

              ApplicationId -> (string)
                 Your Amazon Pinpoint project ID.

              ApplicationArn -> (string)
                 The  Amazon Resource Name (ARN) of an Amazon Pinpoint project
                 that you want to connect to your user pool app client. Amazon
                 Cognito  publishes events to the Amazon Pinpoint project that
                 ApplicationArn declares. You can also configure your applica-
                 tion  to pass an endpoint ID in the AnalyticsMetadata parame-
                 ter of sign-in operations. The  endpoint  ID  is  information
                 about the destination for push notifications

              RoleArn -> (string)
                 The  ARN  of  an Identity and Access Management role that has
                 the permissions required for Amazon Cognito to publish events
                 to Amazon Pinpoint analytics.

              ExternalId -> (string)
                 The  external  ID  of the role that Amazon Cognito assumes to
                 send analytics data to Amazon Pinpoint.

              UserDataShared -> (boolean)
                 If UserDataShared is true , Amazon Cognito includes user data
                 in the events that it publishes to Amazon Pinpoint analytics.

          PreventUserExistenceErrors -> (string)
              Errors and responses that you want Amazon Cognito APIs to return
              during authentication, account confirmation, and password recov-
              ery  when  the  user doesn't exist in the user pool. When set to
              ENABLED and the user doesn't exist,  authentication  returns  an
              error  indicating either the username or password was incorrect.
              Account confirmation and password recovery return a response in-
              dicating a code was sent to a simulated destination. When set to
              LEGACY , those APIs return a UserNotFoundException exception  if
              the user doesn't exist in the user pool.

              Valid values include:

              o ENABLED - This prevents user existence-related errors.

              o LEGACY  - This represents the early behavior of Amazon Cognito
                where user existence related errors aren't prevented.

              Defaults to LEGACY when you don't provide a value.

          EnableTokenRevocation -> (boolean)
              Indicates whether token revocation is  activated  for  the  user
              pool client. When you create a new user pool client, token revo-
              cation is activated by default. For more information  about  re-
              voking tokens, see RevokeToken .

          EnablePropagateAdditionalUserContextData -> (boolean)
              When  EnablePropagateAdditionalUserContextData  is  true, Amazon
              Cognito accepts an IpAddress value that you send in the UserCon-
              textData parameter. The UserContextData parameter sends informa-
              tion to Amazon Cognito advanced security for risk analysis.  You
              can  send UserContextData when you sign in Amazon Cognito native
              users with the InitiateAuth and RespondToAuthChallenge API oper-
              ations.

              When   EnablePropagateAdditionalUserContextData  is  false,  you
              can't send your user's source IP address to Amazon  Cognito  ad-
              vanced security with unauthenticated API operations. EnableProp-
              agateAdditionalUserContextData doesn't affect  whether  you  can
              send a source IP address in a ContextData parameter with the au-
              thenticated API operations AdminInitiateAuth  and  AdminRespond-
              ToAuthChallenge .

              You  can  only activate EnablePropagateAdditionalUserContextData
              in an app client that has a client secret. For more  information
              about  propagation  of user context data, see Adding user device
              and session data to API requests .

          AuthSessionValidity -> (integer)
              Amazon Cognito creates a session token for each API  request  in
              an  authentication flow. AuthSessionValidity is the duration, in
              minutes, of that session token. Your user pool native user  must
              respond  to each authentication challenge before the session ex-
              pires.



                                                   DESCRIBE-USER-POOL-CLIENT()
