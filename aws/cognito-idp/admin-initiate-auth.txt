ADMIN-INITIATE-AUTH()                                    ADMIN-INITIATE-AUTH()



NAME
       admin-initiate-auth -

DESCRIPTION
       Initiates the authentication flow, as an administrator.

       NOTE:
          This  action  might  generate  an SMS text message. Starting June 1,
          2021, US telecom carriers require you  to  register  an  origination
          phone  number  before you can send SMS messages to US phone numbers.
          If you use SMS text messages in Amazon Cognito, you must register  a
          phone  number  with Amazon Pinpoint . Amazon Cognito uses the regis-
          tered number automatically. Otherwise, Amazon Cognito users who must
          receive  SMS  messages  might not be able to sign up, activate their
          accounts, or sign in.

          If you have never used SMS text messages with Amazon Cognito or  any
          other  Amazon  Web Services service, Amazon Simple Notification Ser-
          vice might place your account in the SMS sandbox. In * sandbox  mode
          *  , you can send messages only to verified phone numbers. After you
          test your app while in the sandbox environment, you can move out  of
          the  sandbox and into production. For more information, see SMS mes-
          sage settings for Amazon Cognito user pools in  the  Amazon  Cognito
          Developer Guide .

       NOTE:
          Amazon  Cognito evaluates Identity and Access Management (IAM) poli-
          cies in requests for this API operation.  For  this  operation,  you
          must  use  IAM credentials to authorize requests, and you must grant
          yourself the corresponding IAM permission in a policy.
              Learn more

          o Signing Amazon Web Services API Requests

          o Using the Amazon Cognito user pools API and user pool endpoints

       See also: AWS API Documentation

SYNOPSIS
            admin-initiate-auth
          --user-pool-id <value>
          --client-id <value>
          --auth-flow <value>
          [--auth-parameters <value>]
          [--client-metadata <value>]
          [--analytics-metadata <value>]
          [--context-data <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --user-pool-id (string)
          The ID of the Amazon Cognito user pool.

       --client-id (string)
          The app client ID.

       --auth-flow (string)
          The authentication flow for this call to run. The  API  action  will
          depend on this value. For example:

          o REFRESH_TOKEN_AUTH  will  take in a valid refresh token and return
            new tokens.

          o USER_SRP_AUTH will take in USERNAME and SRP_A and return  the  Se-
            cure  Remote Password (SRP) protocol variables to be used for next
            challenge execution.

          o ADMIN_USER_PASSWORD_AUTH will take in USERNAME  and  PASSWORD  and
            return the next challenge or tokens.

          Valid values include:

          o USER_SRP_AUTH : Authentication flow for the Secure Remote Password
            (SRP) protocol.

          o REFRESH_TOKEN_AUTH /REFRESH_TOKEN : Authentication  flow  for  re-
            freshing  the  access  token and ID token by supplying a valid re-
            fresh token.

          o CUSTOM_AUTH : Custom authentication flow.

          o ADMIN_NO_SRP_AUTH : Non-SRP authentication flow; you can  pass  in
            the  USERNAME  and  PASSWORD  directly  if the flow is enabled for
            calling the app client.

          o ADMIN_USER_PASSWORD_AUTH : Admin-based user  password  authentica-
            tion.  This replaces the ADMIN_NO_SRP_AUTH authentication flow. In
            this flow, Amazon Cognito receives the password in the request in-
            stead of using the SRP process to verify passwords.

          Possible values:

          o USER_SRP_AUTH

          o REFRESH_TOKEN_AUTH

          o REFRESH_TOKEN

          o CUSTOM_AUTH

          o ADMIN_NO_SRP_AUTH

          o USER_PASSWORD_AUTH

          o ADMIN_USER_PASSWORD_AUTH

       --auth-parameters (map)
          The authentication parameters. These are inputs corresponding to the
          AuthFlow that you're invoking. The required  values  depend  on  the
          value of AuthFlow :

          o For  USER_SRP_AUTH  :  USERNAME  (required), SRP_A (required), SE-
            CRET_HASH (required if the app client is configured with a  client
            secret), DEVICE_KEY .

          o For  ADMIN_USER_PASSWORD_AUTH : USERNAME (required), PASSWORD (re-
            quired), SECRET_HASH (required if the  app  client  is  configured
            with a client secret), DEVICE_KEY .

          o For  REFRESH_TOKEN_AUTH/REFRESH_TOKEN  : REFRESH_TOKEN (required),
            SECRET_HASH (required if the  app  client  is  configured  with  a
            client secret), DEVICE_KEY .

          o For  CUSTOM_AUTH : USERNAME (required), SECRET_HASH (if app client
            is configured with client secret), DEVICE_KEY . To start  the  au-
            thentication  flow  with password verification, include Challenge-
            Name: SRP_A and SRP_A: (The SRP_A Value) .

          For more information about SECRET_HASH , see Computing  secret  hash
          values  .  For  information about DEVICE_KEY , see Working with user
          devices in your user pool .

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --client-metadata (map)
          A map of custom key-value pairs that you can provide  as  input  for
          certain custom workflows that this action triggers.

          You  create  custom  workflows by assigning Lambda functions to user
          pool triggers. When you use the AdminInitiateAuth API action, Amazon
          Cognito  invokes the Lambda functions that are specified for various
          triggers. The ClientMetadata value is passed as input to  the  func-
          tions for only the following triggers:

          o Pre signup

          o Pre authentication

          o User migration

          When  Amazon  Cognito  invokes  the functions for these triggers, it
          passes a JSON payload, which the function receives  as  input.  This
          payload contains a validationData attribute, which provides the data
          that you assigned to the ClientMetadata parameter in your  AdminIni-
          tiateAuth  request. In your function code in Lambda, you can process
          the validationData value to enhance your workflow for your  specific
          needs.

          When  you  use the AdminInitiateAuth API action, Amazon Cognito also
          invokes the functions for the following  triggers,  but  it  doesn't
          provide the ClientMetadata value as input:

          o Post authentication

          o Custom message

          o Pre token generation

          o Create auth challenge

          o Define auth challenge

          For  more  information,  see  Customizing  user  pool Workflows with
          Lambda Triggers in the Amazon Cognito Developer Guide .

          NOTE:
              When you use the ClientMetadata parameter, remember that  Amazon
              Cognito won't do the following:

              o Store the ClientMetadata value. This data is available only to
                Lambda triggers that are assigned to a user  pool  to  support
                custom  workflows. If your user pool configuration doesn't in-
                clude triggers, the ClientMetadata parameter  serves  no  pur-
                pose.

              o Validate the ClientMetadata value.

              o Encrypt  the ClientMetadata value. Don't use Amazon Cognito to
                provide sensitive information.

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --analytics-metadata (structure)
          The analytics metadata for collecting Amazon  Pinpoint  metrics  for
          AdminInitiateAuth calls.

          AnalyticsEndpointId -> (string)
              The endpoint ID.

       Shorthand Syntax:

          AnalyticsEndpointId=string

       JSON Syntax:

          {
            "AnalyticsEndpointId": "string"
          }

       --context-data (structure)
          Contextual  data about your user session, such as the device finger-
          print, IP address, or location.  Amazon  Cognito  advanced  security
          evaluates  the  risk of an authentication event based on the context
          that your app generates and passes to Amazon Cognito when  it  makes
          API requests.

          IpAddress -> (string)
              The source IP address of your user's device.

          ServerName -> (string)
              Your server endpoint where this API is invoked.

          ServerPath -> (string)
              Your server path where this API is invoked.

          HttpHeaders -> (list)
              HttpHeaders received on your server in same order.

              (structure)
                 The HTTP header.

                 headerName -> (string)
                     The header name.

                 headerValue -> (string)
                     The header value.

          EncodedData -> (string)
              Encoded  device-fingerprint details that your app collected with
              the Amazon Cognito context data collection library. For more in-
              formation,  see  Adding  user device and session data to API re-
              quests .

       Shorthand Syntax:

          IpAddress=string,ServerName=string,ServerPath=string,HttpHeaders=[{headerName=string,headerValue=string},{headerName=string,headerValue=string}],EncodedData=string

       JSON Syntax:

          {
            "IpAddress": "string",
            "ServerName": "string",
            "ServerPath": "string",
            "HttpHeaders": [
              {
                "headerName": "string",
                "headerValue": "string"
              }
              ...
            ],
            "EncodedData": "string"
          }

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

EXAMPLES
       NOTE:
          To  use  the following examples, you must have the AWS CLI installed
          and configured. See the Getting started guide in the  AWS  CLI  User
          Guide for more information.

          Unless  otherwise  stated,  all  examples  have  unix-like quotation
          rules. These examples will need to be  adapted  to  your  terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To initiate authorization

       This example initiates authorization using the  ADMIN_NO_SRP_AUTH  flow
       for username jane@example.com

       The  client  must have sign-in API for server-based authentication (AD-
       MIN_NO_SRP_AUTH) enabled.

       Use  the  session   information   in   the   return   value   to   call
       admin-respond-to-auth-challenge.

       Command:

          aws cognito-idp admin-initiate-auth --user-pool-id us-west-2_aaaaaaaaa --client-id 3n4b5urk1ft4fl3mg5e62d9ado --auth-flow ADMIN_NO_SRP_AUTH --auth-parameters USERNAME=jane@example.com,PASSWORD=password

       Output:

          {
            "ChallengeName": "NEW_PASSWORD_REQUIRED",
            "Session": "SESSION",
            "ChallengeParameters": {
                "USER_ID_FOR_SRP": "84514837-dcbc-4af1-abff-f3c109334894",
                "requiredAttributes": "[]",
                "userAttributes": "{\"email_verified\":\"true\",\"phone_number_verified\":\"true\",\"phone_number\":\"+01xxx5550100\",\"email\":\"jane@example.com\"}"
            }
          }

OUTPUT
       ChallengeName -> (string)
          The  name of the challenge that you're responding to with this call.
          This is returned in the AdminInitiateAuth response if you must  pass
          another challenge.

          o MFA_SETUP  : If MFA is required, users who don't have at least one
            of the MFA methods set up are presented with  an  MFA_SETUP  chal-
            lenge.  The  user must set up at least one MFA type to continue to
            authenticate.

          o SELECT_MFA_TYPE : Selects the MFA  type.  Valid  MFA  options  are
            SMS_MFA  for  text  SMS MFA, and SOFTWARE_TOKEN_MFA for time-based
            one-time password (TOTP) software token MFA.

          o SMS_MFA : Next challenge is to supply an SMS_MFA_CODE ,  delivered
            via SMS.

          o PASSWORD_VERIFIER   :   Next   challenge   is   to   supply  PASS-
            WORD_CLAIM_SIGNATURE , PASSWORD_CLAIM_SECRET_BLOCK , and TIMESTAMP
            after the client-side SRP calculations.

          o CUSTOM_CHALLENGE  : This is returned if your custom authentication
            flow determines that the user should pass another challenge before
            tokens are issued.

          o DEVICE_SRP_AUTH  :  If  device tracking was activated in your user
            pool and the previous challenges were passed,  this  challenge  is
            returned so that Amazon Cognito can start tracking this device.

          o DEVICE_PASSWORD_VERIFIER  : Similar to PASSWORD_VERIFIER , but for
            devices only.

          o ADMIN_NO_SRP_AUTH : This is returned if you must authenticate with
            USERNAME  and  PASSWORD directly. An app client must be enabled to
            use this flow.

          o NEW_PASSWORD_REQUIRED : For users who are required to change their
            passwords  after successful first login. Respond to this challenge
            with NEW_PASSWORD and any required attributes that Amazon  Cognito
            returned  in  the  requiredAttributes  parameter. You can also set
            values for attributes that aren't required by your user  pool  and
            that  your  app  client  can  write.  For  more  information,  see
            AdminRespondToAuthChallenge .

          NOTE:
              In a NEW_PASSWORD_REQUIRED challenge response, you can't  modify
              a  required attribute that already has a value. In AdminRespond-
              ToAuthChallenge , set a value for any keys that  Amazon  Cognito
              returned  in  the requiredAttributes parameter, then use the Ad-
              minUpdateUserAttributes API operation to modify the value of any
              additional attributes.

          o MFA_SETUP : For users who are required to set up an MFA factor be-
            fore they can sign in. The MFA types activated for the  user  pool
            will  be  listed in the challenge parameters MFAS_CAN_SETUP value.
            To set up software token MFA, use the session returned  here  from
            InitiateAuth  as  an input to AssociateSoftwareToken , and use the
            session returned by VerifySoftwareToken as an  input  to  Respond-
            ToAuthChallenge with challenge name MFA_SETUP to complete sign-in.
            To set up SMS MFA, users will need help from an  administrator  to
            add  a  phone  number  to their account and then call InitiateAuth
            again to restart sign-in.

       Session -> (string)
          The session that should be passed both  ways  in  challenge-response
          calls  to  the  service.  If  AdminInitiateAuth or AdminRespondToAu-
          thChallenge API call determines that the caller  must  pass  another
          challenge,  they  return  a session with other challenge parameters.
          This session should be passed as it is to the next AdminRespondToAu-
          thChallenge API call.

       ChallengeParameters -> (map)
          The challenge parameters. These are returned to you in the AdminIni-
          tiateAuth response if you must pass another challenge. The responses
          in  this parameter should be used to compute inputs to the next call
          (AdminRespondToAuthChallenge ).

          All challenges require USERNAME and SECRET_HASH (if applicable).

          The value of the USER_ID_FOR_SRP  attribute  is  the  user's  actual
          username, not an alias (such as email address or phone number), even
          if you specified an alias in your call to AdminInitiateAuth  .  This
          happens because, in the AdminRespondToAuthChallenge API ChallengeRe-
          sponses , the USERNAME attribute can't be an alias.

          key -> (string)

          value -> (string)

       AuthenticationResult -> (structure)
          The result of the authentication response. This is only returned  if
          the  caller  doesn't  need  to pass another challenge. If the caller
          does need to pass another challenge before it gets tokens,  Challen-
          geName , ChallengeParameters , and Session are returned.

          AccessToken -> (string)
              A  valid access token that Amazon Cognito issued to the user who
              you want to authenticate.

          ExpiresIn -> (integer)
              The expiration period of the authentication result in seconds.

          TokenType -> (string)
              The token type.

          RefreshToken -> (string)
              The refresh token.

          IdToken -> (string)
              The ID token.

          NewDeviceMetadata -> (structure)
              The new device metadata from an authentication result.

              DeviceKey -> (string)
                 The device key.

              DeviceGroupKey -> (string)
                 The device group key.



                                                         ADMIN-INITIATE-AUTH()
