GET-HLS-STREAMING-SESSION-URL()                GET-HLS-STREAMING-SESSION-URL()



NAME
       get-hls-streaming-session-url -

DESCRIPTION
       Retrieves an HTTP Live Streaming (HLS) URL for the stream. You can then
       open the URL in a browser or media player to view the stream contents.

       Both the StreamName and the StreamARN parameters are optional, but  you
       must  specify either the StreamName or the StreamARN when invoking this
       API operation.

       An Amazon Kinesis video stream has the following requirements for  pro-
       viding data through HLS:

       o For  streaming  video,  the media must contain H.264 or H.265 encoded
         video and, optionally, AAC encoded audio. Specifically, the codec  ID
         of  track  1  should be V_MPEG/ISO/AVC (for H.264) or V_MPEG/ISO/HEVC
         (for H.265). Optionally, the codec ID of track 2 should  be  A_AAC  .
         For audio only streaming, the codec ID of track 1 should be A_AAC .

       o Data retention must be greater than 0.

       o The  video  track of each fragment must contain codec private data in
         the Advanced Video Coding (AVC) for H.264 format or  HEVC  for  H.265
         format  (MPEG-4  specification  ISO/IEC  14496-15  ). For information
         about adapting stream data to a  given  format,  see  NAL  Adaptation
         Flags .

       o The audio track (if present) of each fragment must contain codec pri-
         vate data in the AAC format (AAC specification ISO/IEC 13818-7 ).

       Kinesis Video Streams HLS sessions contain fragments in the  fragmented
       MPEG-4  form (also called fMP4 or CMAF) or the MPEG-2 form (also called
       TS chunks, which the HLS specification also supports). For more  infor-
       mation about HLS fragment types, see the HLS specification .

       The  following  procedure  shows  how  to  use  HLS  with Kinesis Video
       Streams:

       o Get an endpoint using GetDataEndpoint  ,  specifying  GET_HLS_STREAM-
         ING_SESSION_URL for the APIName parameter.

       o Retrieve  the HLS URL using GetHLSStreamingSessionURL . Kinesis Video
         Streams creates an HLS streaming session to  be  used  for  accessing
         content in a stream using the HLS protocol. GetHLSStreamingSessionURL
         returns an authenticated URL (that includes an encrypted session  to-
         ken)  for the session's HLS master playlist (the root resource needed
         for streaming with HLS).

       NOTE:
              Don't share or store this token  where  an  unauthorized  entity
              could access it. The token provides access to the content of the
              stream. Safeguard the token with  the  same  measures  that  you
              would use with your Amazon Web Services credentials.

          The  media that is made available through the playlist consists only
          of the requested stream, time range, and format. No other media data
          (such  as frames outside the requested window or alternate bitrates)
          is made available.

       o Provide the URL (containing the encrypted session token) for the  HLS
         master playlist to a media player that supports the HLS protocol. Ki-
         nesis Video Streams makes  the  HLS  media  playlist,  initialization
         fragment,  and  media fragments available through the master playlist
         URL. The initialization fragment contains the codec private data  for
         the  stream,  and  other data needed to set up the video or audio de-
         coder and renderer. The media fragments contain  H.264-encoded  video
         frames or AAC-encoded audio samples.

       o The  media  player receives the authenticated URL and requests stream
         metadata and media data normally.  When  the  media  player  requests
         data, it calls the following actions:

         o GetHLSMasterPlaylist:  Retrieves an HLS master playlist, which con-
           tains a URL for the GetHLSMediaPlaylist action for each track,  and
           additional  metadata  for the media player, including estimated bi-
           trate and resolution.

         o GetHLSMediaPlaylist: Retrieves an HLS media  playlist,  which  con-
           tains  a  URL  to  access  the MP4 initialization fragment with the
           GetMP4InitFragment action, and URLs to access the MP4  media  frag-
           ments  with the GetMP4MediaFragment actions. The HLS media playlist
           also contains metadata about the stream that the  player  needs  to
           play  it,  such  as whether the PlaybackMode is LIVE or ON_DEMAND .
           The HLS media playlist is typically  static  for  sessions  with  a
           PlaybackType  of  ON_DEMAND . The HLS media playlist is continually
           updated with new fragments for sessions with a PlaybackType of LIVE
           .  There  is  a distinct HLS media playlist for the video track and
           the audio track (if applicable) that contains MP4  media  URLs  for
           the specific track.

         o GetMP4InitFragment:  Retrieves the MP4 initialization fragment. The
           media player typically loads  the  initialization  fragment  before
           loading any media fragments. This fragment contains the "fytp " and
           "moov " MP4 atoms, and the child atoms that are needed to  initial-
           ize  the media player decoder. The initialization fragment does not
           correspond to a fragment in a Kinesis  video  stream.  It  contains
           only  the  codec  private data for the stream and respective track,
           which the media player needs to decode the media frames.

         o GetMP4MediaFragment: Retrieves MP4 media fragments. These fragments
           contain  the  "moof  " and "mdat " MP4 atoms and their child atoms,
           containing the encoded fragment's  media  frames  and  their  time-
           stamps.

         NOTE:
                For  the  HLS  streaming  session, in-track codec private data
                (CPD) changes are supported. After the first media fragment is
                made  available  in a streaming session, fragments can contain
                CPD changes for each track. Therefore, the fragments in a ses-
                sion  can  have a different resolution, bit rate, or other in-
                formation in the CPD without interrupting  playback.  However,
                any  change made in the track number or track codec format can
                return an error  when  those  different  media  fragments  are
                loaded.  For  example, streaming will fail if the fragments in
                the stream change from having only video to having both  audio
                and  video, or if an AAC audio track is changed to an ALAW au-
                dio track. For each streaming session, only  500  CPD  changes
                are allowed.

            Data  retrieved with this action is billable. For information, see
            Pricing .

         o GetTSFragment: Retrieves MPEG TS fragments containing both initial-
           ization and media data for all tracks in the stream.

         NOTE:
                If  the  ContainerFormat is MPEG_TS , this API is used instead
                of  GetMP4InitFragment  and  GetMP4MediaFragment  to  retrieve
                stream media.

            Data retrieved with this action is billable. For more information,
            see Kinesis Video Streams pricing .

       A streaming session URL must not be shared between players. The service
       might  throttle a session if multiple media players are sharing it. For
       connection limits, see Kinesis Video Streams Limits .

       You can monitor the amount of data that the media  player  consumes  by
       monitoring the GetMP4MediaFragment.OutgoingBytes Amazon CloudWatch met-
       ric. For information about using CloudWatch to  monitor  Kinesis  Video
       Streams,  see  Monitoring  Kinesis Video Streams . For pricing informa-
       tion, see Amazon Kinesis Video Streams Pricing and Amazon Web  Services
       Pricing  .  Charges  for both HLS sessions and outgoing Amazon Web Ser-
       vices data apply.

       For more information about HLS, see HTTP Live Streaming  on  the  Apple
       Developer site .

       WARNING:
          If  an  error  is  thrown  after  invoking  a  Kinesis Video Streams
          archived media API, in addition to the HTTP status code and the  re-
          sponse body, it includes the following pieces of information:

          o x-amz-ErrorType  HTTP  header  contains a more specific error type
            in addition to what the HTTP status code provides.

          o x-amz-RequestId HTTP header  if you want to  report  an  issue  to
            Amazon  Web  Services,  the  support  team can better diagnose the
            problem if given the Request Id.

          Both the HTTP status code and the ErrorType header can  be  utilized
          to  make  programmatic decisions about whether errors are retry-able
          and under what conditions, as well as provide  information  on  what
          actions  the  client  programmer might need to take in order to suc-
          cessfully try again.

          For more information, see the Errors section at the bottom  of  this
          topic, as well as Common Errors .

       See also: AWS API Documentation

SYNOPSIS
            get-hls-streaming-session-url
          [--stream-name <value>]
          [--stream-arn <value>]
          [--playback-mode <value>]
          [--hls-fragment-selector <value>]
          [--container-format <value>]
          [--discontinuity-mode <value>]
          [--display-fragment-timestamp <value>]
          [--expires <value>]
          [--max-media-playlist-fragment-results <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --stream-name (string)
          The name of the stream for which to retrieve the HLS master playlist
          URL.

          You must specify either the StreamName or the StreamARN .

       --stream-arn (string)
          The Amazon Resource Name (ARN) of the stream for which  to  retrieve
          the HLS master playlist URL.

          You must specify either the StreamName or the StreamARN .

       --playback-mode (string)
          Whether to retrieve live, live replay, or archived, on-demand data.

          Features of the three types of sessions include the following:

          o

            **
            LIVE  **  :  For  sessions of this type, the HLS media playlist is
            continually updated with  the  latest  fragments  as  they  become
            available.  We  recommend  that  the  media  player retrieve a new
            playlist on a one-second interval. When this type  of  session  is
            played  in a media player, the user interface typically displays a
            "live" notification, with no scrubber control for choosing the po-
            sition in the playback window to display.

          System Message: WARNING/2 (<string>:, line 209)
            Inline strong start-string without end-string.

          NOTE:
              In  LIVE mode, the newest available fragments are included in an
              HLS media playlist, even if there is  a  gap  between  fragments
              (that is, if a fragment is missing). A gap like this might cause
              a media player to halt or cause a  jump  in  playback.  In  this
              mode,  fragments are not added to the HLS media playlist if they
              are older than the newest fragment in the playlist. If the miss-
              ing  fragment  becomes  available after a subsequent fragment is
              added to the playlist, the older fragment is not added, and  the
              gap is not filled.

          o

            **
            LIVE_REPLAY ** : For sessions of this type, the HLS media playlist
            is updated similarly to how it is updated  for  LIVE  mode  except
            that it starts by including fragments from a given start time. In-
            stead of fragments being added as they are ingested, fragments are
            added  as  the duration of the next fragment elapses. For example,
            if the fragments in the session are two seconds long, then  a  new
            fragment  is  added  to the media playlist every two seconds. This
            mode is useful to be able to start playback from when an event  is
            detected  and  continue live streaming media that has not yet been
            ingested as of the time of the session creation. This mode is also
            useful  to  stream previously archived media without being limited
            by the 1,000 fragment limit in the ON_DEMAND mode.

          System Message: WARNING/2 (<string>:, line 217)
            Inline strong start-string without end-string.

          o

            **
            ON_DEMAND ** : For sessions of this type, the HLS  media  playlist
            contains  all the fragments for the session, up to the number that
            is specified in  MaxMediaPlaylistFragmentResults  .  The  playlist
            must  be  retrieved  only once for each session. When this type of
            session is played in a media player, the user interface  typically
            displays a scrubber control for choosing the position in the play-
            back window to display.

          System Message: WARNING/2 (<string>:, line 219)
            Inline strong start-string without end-string.

          In all playback modes, if FragmentSelectorType is PRODUCER_TIMESTAMP
          , and if there are multiple fragments with the same start timestamp,
          the fragment that has the largest fragment number (that is, the new-
          est fragment) is included in the HLS media playlist. The other frag-
          ments are not included. Fragments that have different timestamps but
          have  overlapping  durations  are  still  included  in the HLS media
          playlist. This can lead to unexpected behavior in the media player.

          The default is LIVE .

          Possible values:

          o LIVE

          o LIVE_REPLAY

          o ON_DEMAND

       --hls-fragment-selector (structure)
          The time range of the requested fragment and the source of the time-
          stamps.

          This  parameter is required if PlaybackMode is ON_DEMAND or LIVE_RE-
          PLAY . This parameter is optional if PlaybackMode is LIVE . If Play-
          backMode  is  LIVE  ,  the  FragmentSelectorType can be set, but the
          TimestampRange should not be set. If PlaybackMode  is  ON_DEMAND  or
          LIVE_REPLAY  ,  both FragmentSelectorType and TimestampRange must be
          set.

          FragmentSelectorType -> (string)
              The source of the timestamps for the requested media.

              When  FragmentSelectorType  is  set  to  PRODUCER_TIMESTAMP  and
              GetHLSStreamingSessionURLInput$PlaybackMode   is   ON_DEMAND  or
              LIVE_REPLAY , the first fragment ingested with a producer  time-
              stamp  within  the specified  FragmentSelector$TimestampRange is
              included in the media playlist. In addition, the fragments  with
              producer  timestamps  within the TimestampRange ingested immedi-
              ately following the first fragment  (up  to  the   GetHLSStream-
              ingSessionURLInput$MaxMediaPlaylistFragmentResults   value)  are
              included.

              Fragments that have duplicate producer timestamps  are  dedupli-
              cated.  This  means  that if producers are producing a stream of
              fragments with producer timestamps that are approximately  equal
              to the true clock time, the HLS media playlists will contain all
              of the fragments within the requested timestamp range.  If  some
              fragments  are ingested within the same time range and very dif-
              ferent points in time, only the oldest  ingested  collection  of
              fragments are returned.

              When  FragmentSelectorType  is  set  to  PRODUCER_TIMESTAMP  and
              GetHLSStreamingSessionURLInput$PlaybackMode is LIVE ,  the  pro-
              ducer  timestamps are used in the MP4 fragments and for dedupli-
              cation. But the most recently ingested fragments based on server
              timestamps  are  included  in the HLS media playlist. This means
              that even if fragments ingested in the past have producer  time-
              stamps  with  values now, they are not included in the HLS media
              playlist.

              The default is SERVER_TIMESTAMP .

          TimestampRange -> (structure)
              The start and end of the timestamp range for the  requested  me-
              dia.

              This value should not be present if PlaybackType is LIVE .

              StartTimestamp -> (timestamp)
                 The start of the timestamp range for the requested media.

                 If  the HLSTimestampRange value is specified, the StartTimes-
                 tamp value is required.

                 Only fragments that start exactly at or after  StartTimestamp
                 are  included  in  the  session.  Fragments that start before
                 StartTimestamp and continue past it aren't  included  in  the
                 session.  If  FragmentSelectorType  is SERVER_TIMESTAMP , the
                 StartTimestamp must be later than the stream head.

              EndTimestamp -> (timestamp)
                 The end of the timestamp range for the requested media.  This
                 value must be within 24 hours of the specified StartTimestamp
                 , and it must be later than the StartTimestamp value.

                 If FragmentSelectorType for the request is SERVER_TIMESTAMP ,
                 this value must be in the past.

                 The  EndTimestamp  value  is required for ON_DEMAND mode, but
                 optional for LIVE_REPLAY mode. If the EndTimestamp is not set
                 for  LIVE_REPLAY  mode  then the session will continue to in-
                 clude newly ingested fragments until the session expires.

                 NOTE:
                     This value is inclusive. The EndTimestamp is compared  to
                     the  (starting) timestamp of the fragment. Fragments that
                     start before the EndTimestamp value and continue past  it
                     are included in the session.

       Shorthand Syntax:

          FragmentSelectorType=string,TimestampRange={StartTimestamp=timestamp,EndTimestamp=timestamp}

       JSON Syntax:

          {
            "FragmentSelectorType": "PRODUCER_TIMESTAMP"|"SERVER_TIMESTAMP",
            "TimestampRange": {
              "StartTimestamp": timestamp,
              "EndTimestamp": timestamp
            }
          }

       --container-format (string)
          Specifies which format should be used for packaging the media. Spec-
          ifying the FRAGMENTED_MP4 container format packages the  media  into
          MP4  fragments (fMP4 or CMAF). This is the recommended packaging be-
          cause there is minimal packaging overhead. The other container  for-
          mat  option  is  MPEG_TS . HLS has supported MPEG TS chunks since it
          was released and is sometimes the only supported packaging on  older
          HLS  players.  MPEG  TS typically has a 5-25 percent packaging over-
          head. This means MPEG TS typically requires 5-25 percent more  band-
          width and cost than fMP4.

          The default is FRAGMENTED_MP4 .

          Possible values:

          o FRAGMENTED_MP4

          o MPEG_TS

       --discontinuity-mode (string)
          Specifies  when  flags marking discontinuities between fragments are
          added to the media playlists.

          Media players typically build a timeline of media content  to  play,
          based  on  the timestamps of each fragment. This means that if there
          is any overlap or gap between fragments (as is typical if   HLSFrag-
          mentSelector is set to SERVER_TIMESTAMP ), the media player timeline
          will also have small gaps between fragments in some places, and will
          overwrite  frames in other places. Gaps in the media player timeline
          can cause playback to stall and overlaps can cause  playback  to  be
          jittery.  When  there are discontinuity flags between fragments, the
          media player is expected to reset the  timeline,  resulting  in  the
          next fragment being played immediately after the previous fragment.

          The following modes are supported:

          o ALWAYS  :  a discontinuity marker is placed between every fragment
            in the HLS media playlist. It is recommended to use a value of AL-
            WAYS if the fragment timestamps are not accurate.

          o NEVER : no discontinuity markers are placed anywhere. It is recom-
            mended to use a value of NEVER to ensure the media player timeline
            most accurately maps to the producer timestamps.

          o ON_DISCONTINUITY  : a discontinuity marker is placed between frag-
            ments that have a gap or overlap of more than 50 milliseconds. For
            most  playback  scenarios,  it  is  recommended  to use a value of
            ON_DISCONTINUITY so that the media player timeline is  only  reset
            when  there is a significant issue with the media timeline (e.g. a
            missing fragment).

          The  default  is  ALWAYS  when   HLSFragmentSelector   is   set   to
          SERVER_TIMESTAMP , and NEVER when it is set to PRODUCER_TIMESTAMP .

          Possible values:

          o ALWAYS

          o NEVER

          o ON_DISCONTINUITY

       --display-fragment-timestamp (string)
          Specifies  when  the fragment start timestamps should be included in
          the HLS media playlist. Typically, media players report the playhead
          position  as  a  time relative to the start of the first fragment in
          the playback session. However, when the  start  timestamps  are  in-
          cluded  in  the  HLS media playlist, some media players might report
          the current playhead as an absolute time based on the fragment time-
          stamps.  This  can be useful for creating a playback experience that
          shows viewers the wall-clock time of the media.

          The default is NEVER . When  HLSFragmentSelector is SERVER_TIMESTAMP
          ,  the  timestamps  will  be the server start timestamps. Similarly,
          when  HLSFragmentSelector is  PRODUCER_TIMESTAMP  ,  the  timestamps
          will be the producer start timestamps.

          Possible values:

          o ALWAYS

          o NEVER

       --expires (integer)
          The  time in seconds until the requested session expires. This value
          can be between 300 (5 minutes) and 43200 (12 hours).

          When a session expires, no new calls to GetHLSMasterPlaylist , GetH-
          LSMediaPlaylist  ,  GetMP4InitFragment  ,  GetMP4MediaFragment  , or
          GetTSFragment can be made for that session.

          The default is 300 (5 minutes).

       --max-media-playlist-fragment-results (long)
          The maximum number of fragments that are returned in the  HLS  media
          playlists.

          When  the  PlaybackMode  is LIVE , the most recent fragments are re-
          turned up to this value. When the PlaybackMode is  ON_DEMAND  ,  the
          oldest fragments are returned, up to this maximum number.

          When  there are a higher number of fragments available in a live HLS
          media playlist, video players often buffer content  before  starting
          playback. Increasing the buffer size increases the playback latency,
          but it decreases the likelihood that rebuffering will  occur  during
          playback. We recommend that a live HLS media playlist have a minimum
          of 3 fragments and a maximum of 10 fragments.

          The default is 5 fragments if PlaybackMode is LIVE or LIVE_REPLAY  ,
          and 1,000 if PlaybackMode is ON_DEMAND .

          The  maximum  value  of  5,000 fragments corresponds to more than 80
          minutes of video on streams with 1-second fragments, and  more  than
          13 hours of video on streams with 10-second fragments.

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

OUTPUT
       HLSStreamingSessionURL -> (string)
          The URL (containing the session token) that a media player  can  use
          to retrieve the HLS master playlist.



                                               GET-HLS-STREAMING-SESSION-URL()
