CREATE-PIPELINE()                                            CREATE-PIPELINE()



NAME
       create-pipeline -

DESCRIPTION
       Creates a pipeline. A pipeline consumes messages from a channel and al-
       lows you to process the messages before storing them in a  data  store.
       You  must  specify both a channel and a datastore activity and, option-
       ally, as many as 23 additional activities in the pipelineActivities ar-
       ray.

       See also: AWS API Documentation

SYNOPSIS
            create-pipeline
          --pipeline-name <value>
          --pipeline-activities <value>
          [--tags <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --pipeline-name (string)
          The name of the pipeline.

       --pipeline-activities (list)
          A  list  of PipelineActivity objects. Activities perform transforma-
          tions on your messages, such as removing, renaming or adding message
          attributes;  filtering  messages based on attribute values; invoking
          your Lambda unctions on messages for advanced  processing;  or  per-
          forming mathematical transformations to normalize device data.

          The  list can be 2-25 PipelineActivity objects and must contain both
          a channel and a datastore activity. Each entry in the list must con-
          tain only one activity. For example:
              pipelineActivities = [ { "channel": { ... } }, { "lambda": { ...
              } }, ... ]

          (structure)
              An activity that performs a transformation on a message.

              channel -> (structure)
                 Determines the source of the messages to be processed.

                 name -> (string)
                     The name of the channel activity.

                 channelName -> (string)
                     The name of the channel from which the messages are  pro-
                     cessed.

                 next -> (string)
                     The next activity in the pipeline.

              lambda -> (structure)
                 Runs a Lambda function to modify the message.

                 name -> (string)
                     The name of the lambda activity.

                 lambdaName -> (string)
                     The  name  of the Lambda function that is run on the mes-
                     sage.

                 batchSize -> (integer)
                     The number of messages passed to the Lambda function  for
                     processing.

                     The  Lambda function must be able to process all of these
                     messages within five minutes, which is the maximum  time-
                     out duration for Lambda functions.

                 next -> (string)
                     The next activity in the pipeline.

              datastore -> (structure)
                 Specifies where to store the processed message data.

                 name -> (string)
                     The name of the datastore activity.

                 datastoreName -> (string)
                     The  name  of the data store where processed messages are
                     stored.

              addAttributes -> (structure)
                 Adds other attributes based on  existing  attributes  in  the
                 message.

                 name -> (string)
                     The name of the addAttributes activity.

                 attributes -> (map)
                     A  list  of 1-50 AttributeNameMapping objects that map an
                     existing attribute to a new attribute.

                     NOTE:
                        The existing attributes remain in the message,  so  if
                        you want to remove the originals, use RemoveAttribute-
                        Activity .

                     key -> (string)

                     value -> (string)

                 next -> (string)
                     The next activity in the pipeline.

              removeAttributes -> (structure)
                 Removes attributes from a message.

                 name -> (string)
                     The name of the removeAttributes activity.

                 attributes -> (list)
                     A list of 1-50 attributes to remove from the message.

                     (string)

                 next -> (string)
                     The next activity in the pipeline.

              selectAttributes -> (structure)
                 Used to create a new message using  only  the  specified  at-
                 tributes from the original message.

                 name -> (string)
                     The name of the selectAttributes activity.

                 attributes -> (list)
                     A list of the attributes to select from the message.

                     (string)

                 next -> (string)
                     The next activity in the pipeline.

              filter -> (structure)
                 Filters a message based on its attributes.

                 name -> (string)
                     The name of the filter activity.

                 filter -> (string)
                     An  expression  that  looks  like a SQL WHERE clause that
                     must return a Boolean value. Messages  that  satisfy  the
                     condition are passed to the next activity.

                 next -> (string)
                     The next activity in the pipeline.

              math -> (structure)
                 Computes  an  arithmetic  expression  using the message's at-
                 tributes and adds it to the message.

                 name -> (string)
                     The name of the math activity.

                 attribute -> (string)
                     The name of the attribute that contains the result of the
                     math operation.

                 math -> (string)
                     An  expression  that uses one or more existing attributes
                     and must return an integer value.

                 next -> (string)
                     The next activity in the pipeline.

              deviceRegistryEnrich -> (structure)
                 Adds data from the IoT device registry to your message.

                 name -> (string)
                     The name of the deviceRegistryEnrich activity.

                 attribute -> (string)
                     The name of the attribute that is added to the message.

                 thingName -> (string)
                     The name of the IoT device whose registry information  is
                     added to the message.

                 roleArn -> (string)
                     The  ARN  of  the role that allows access to the device's
                     registry information.

                 next -> (string)
                     The next activity in the pipeline.

              deviceShadowEnrich -> (structure)
                 Adds information from the IoT Device Shadow service to a mes-
                 sage.

                 name -> (string)
                     The name of the deviceShadowEnrich activity.

                 attribute -> (string)
                     The name of the attribute that is added to the message.

                 thingName -> (string)
                     The  name  of  the IoT device whose shadow information is
                     added to the message.

                 roleArn -> (string)
                     The ARN of the role that allows access  to  the  device's
                     shadow.

                 next -> (string)
                     The next activity in the pipeline.

       Shorthand Syntax:

          channel={name=string,channelName=string,next=string},lambda={name=string,lambdaName=string,batchSize=integer,next=string},datastore={name=string,datastoreName=string},addAttributes={name=string,attributes={KeyName1=string,KeyName2=string},next=string},removeAttributes={name=string,attributes=[string,string],next=string},selectAttributes={name=string,attributes=[string,string],next=string},filter={name=string,filter=string,next=string},math={name=string,attribute=string,math=string,next=string},deviceRegistryEnrich={name=string,attribute=string,thingName=string,roleArn=string,next=string},deviceShadowEnrich={name=string,attribute=string,thingName=string,roleArn=string,next=string} ...

       JSON Syntax:

          [
            {
              "channel": {
                "name": "string",
                "channelName": "string",
                "next": "string"
              },
              "lambda": {
                "name": "string",
                "lambdaName": "string",
                "batchSize": integer,
                "next": "string"
              },
              "datastore": {
                "name": "string",
                "datastoreName": "string"
              },
              "addAttributes": {
                "name": "string",
                "attributes": {"string": "string"
                  ...},
                "next": "string"
              },
              "removeAttributes": {
                "name": "string",
                "attributes": ["string", ...],
                "next": "string"
              },
              "selectAttributes": {
                "name": "string",
                "attributes": ["string", ...],
                "next": "string"
              },
              "filter": {
                "name": "string",
                "filter": "string",
                "next": "string"
              },
              "math": {
                "name": "string",
                "attribute": "string",
                "math": "string",
                "next": "string"
              },
              "deviceRegistryEnrich": {
                "name": "string",
                "attribute": "string",
                "thingName": "string",
                "roleArn": "string",
                "next": "string"
              },
              "deviceShadowEnrich": {
                "name": "string",
                "attribute": "string",
                "thingName": "string",
                "roleArn": "string",
                "next": "string"
              }
            }
            ...
          ]

       --tags (list)
          Metadata which can be used to manage the pipeline.

          (structure)
              A set of key-value pairs that are used to manage the resource.

              key -> (string)
                 The tag's key.

              value -> (string)
                 The tag's value.

       Shorthand Syntax:

          key=string,value=string ...

       JSON Syntax:

          [
            {
              "key": "string",
              "value": "string"
            }
            ...
          ]

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination. If automatic pagination is disabled,  the
       AWS CLI will only make one call, for the first page of results.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

EXAMPLES
       NOTE:
          To  use  the following examples, you must have the AWS CLI installed
          and configured. See the Getting started guide in the  AWS  CLI  User
          Guide for more information.

          Unless  otherwise  stated,  all  examples  have  unix-like quotation
          rules. These examples will need to be  adapted  to  your  terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       Create an IoT Analytics Pipeline

       The following create-pipeline example creates a  pipeline.  A  pipeline
       consumes messages from a channel and allows you to process the messages
       before storing them in a data store. You must specify  both  a  channel
       and a data store activity and, optionally, as many as 23 additional ac-
       tivities in the pipelineActivities array.

          aws iotanalytics create-pipeline \
              --cli-input-json file://create-pipeline.json

       Contents of create-pipeline.json:

          {
              "pipelineName": "mypipeline",
              "pipelineActivities": [
                  {
                      "channel": {
                          "name": "myChannelActivity",
                          "channelName": "mychannel",
                          "next": "myMathActivity"
                      }
                  },
                  {
                      "datastore": {
                          "name": "myDatastoreActivity",
                          "datastoreName": "mydatastore"
                      }
                  },
                  {
                      "math": {
                          "name": "myMathActivity",
                          "math": "((temp - 32) * 5.0) / 9.0",
                          "attribute": "tempC",
                          "next": "myDatastoreActivity"
                      }
                  }
              ],
              "tags": [
                  {
                      "key": "Environment",
                      "value": "Beta"
                  }
              ]
          }

       Output:

          {
              "pipelineArn": "arn:aws:iotanalytics:us-west-2:123456789012:pipeline/mypipeline",
              "pipelineName": "mypipeline"
          }

       For more information, see CreatePipeline in the AWS IoT  Analytics  API
       Reference.

OUTPUT
       pipelineName -> (string)
          The name of the pipeline.

       pipelineArn -> (string)
          The ARN of the pipeline.



                                                             CREATE-PIPELINE()
