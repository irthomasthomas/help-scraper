RUN-PIPELINE-ACTIVITY()                                RUN-PIPELINE-ACTIVITY()



NAME
       run-pipeline-activity -

DESCRIPTION
       Simulates  the results of running a pipeline activity on a message pay-
       load.

       See also: AWS API Documentation

SYNOPSIS
            run-pipeline-activity
          --pipeline-activity <value>
          --payloads <value>
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --pipeline-activity (structure)
          The pipeline activity that is run. This must not be a channel activ-
          ity  or a data store activity because these activities are used in a
          pipeline only to load the original message and to store the  (possi-
          bly)  transformed  message.  If a Lambda activity is specified, only
          short-running Lambda functions (those with a timeout of less than 30
          seconds or less) can be used.

          channel -> (structure)
              Determines the source of the messages to be processed.

              name -> (string)
                 The name of the channel activity.

              channelName -> (string)
                 The  name  of  the  channel  from which the messages are pro-
                 cessed.

              next -> (string)
                 The next activity in the pipeline.

          lambda -> (structure)
              Runs a Lambda function to modify the message.

              name -> (string)
                 The name of the lambda activity.

              lambdaName -> (string)
                 The name of the Lambda function that is run on the message.

              batchSize -> (integer)
                 The number of messages passed to the Lambda function for pro-
                 cessing.

                 The Lambda function must be able to process all of these mes-
                 sages within five minutes, which is the maximum timeout dura-
                 tion for Lambda functions.

              next -> (string)
                 The next activity in the pipeline.

          datastore -> (structure)
              Specifies where to store the processed message data.

              name -> (string)
                 The name of the datastore activity.

              datastoreName -> (string)
                 The  name  of  the  data  store  where processed messages are
                 stored.

          addAttributes -> (structure)
              Adds other attributes based on existing attributes in  the  mes-
              sage.

              name -> (string)
                 The name of the addAttributes activity.

              attributes -> (map)
                 A  list  of 1-50 AttributeNameMapping objects that map an ex-
                 isting attribute to a new attribute.

                 NOTE:
                     The existing attributes remain in the message, so if  you
                     want to remove the originals, use RemoveAttributeActivity
                     .

                 key -> (string)

                 value -> (string)

              next -> (string)
                 The next activity in the pipeline.

          removeAttributes -> (structure)
              Removes attributes from a message.

              name -> (string)
                 The name of the removeAttributes activity.

              attributes -> (list)
                 A list of 1-50 attributes to remove from the message.

                 (string)

              next -> (string)
                 The next activity in the pipeline.

          selectAttributes -> (structure)
              Used to create a new message using only the specified attributes
              from the original message.

              name -> (string)
                 The name of the selectAttributes activity.

              attributes -> (list)
                 A list of the attributes to select from the message.

                 (string)

              next -> (string)
                 The next activity in the pipeline.

          filter -> (structure)
              Filters a message based on its attributes.

              name -> (string)
                 The name of the filter activity.

              filter -> (string)
                 An  expression  that  looks like a SQL WHERE clause that must
                 return a Boolean value. Messages that satisfy  the  condition
                 are passed to the next activity.

              next -> (string)
                 The next activity in the pipeline.

          math -> (structure)
              Computes an arithmetic expression using the message's attributes
              and adds it to the message.

              name -> (string)
                 The name of the math activity.

              attribute -> (string)
                 The name of the attribute that contains  the  result  of  the
                 math operation.

              math -> (string)
                 An  expression  that uses one or more existing attributes and
                 must return an integer value.

              next -> (string)
                 The next activity in the pipeline.

          deviceRegistryEnrich -> (structure)
              Adds data from the IoT device registry to your message.

              name -> (string)
                 The name of the deviceRegistryEnrich activity.

              attribute -> (string)
                 The name of the attribute that is added to the message.

              thingName -> (string)
                 The name of the IoT  device  whose  registry  information  is
                 added to the message.

              roleArn -> (string)
                 The  ARN  of the role that allows access to the device's reg-
                 istry information.

              next -> (string)
                 The next activity in the pipeline.

          deviceShadowEnrich -> (structure)
              Adds information from the IoT Device Shadow service  to  a  mes-
              sage.

              name -> (string)
                 The name of the deviceShadowEnrich activity.

              attribute -> (string)
                 The name of the attribute that is added to the message.

              thingName -> (string)
                 The  name of the IoT device whose shadow information is added
                 to the message.

              roleArn -> (string)
                 The ARN of the  role  that  allows  access  to  the  device's
                 shadow.

              next -> (string)
                 The next activity in the pipeline.

       Shorthand Syntax:

          channel={name=string,channelName=string,next=string},lambda={name=string,lambdaName=string,batchSize=integer,next=string},datastore={name=string,datastoreName=string},addAttributes={name=string,attributes={KeyName1=string,KeyName2=string},next=string},removeAttributes={name=string,attributes=[string,string],next=string},selectAttributes={name=string,attributes=[string,string],next=string},filter={name=string,filter=string,next=string},math={name=string,attribute=string,math=string,next=string},deviceRegistryEnrich={name=string,attribute=string,thingName=string,roleArn=string,next=string},deviceShadowEnrich={name=string,attribute=string,thingName=string,roleArn=string,next=string}

       JSON Syntax:

          {
            "channel": {
              "name": "string",
              "channelName": "string",
              "next": "string"
            },
            "lambda": {
              "name": "string",
              "lambdaName": "string",
              "batchSize": integer,
              "next": "string"
            },
            "datastore": {
              "name": "string",
              "datastoreName": "string"
            },
            "addAttributes": {
              "name": "string",
              "attributes": {"string": "string"
                ...},
              "next": "string"
            },
            "removeAttributes": {
              "name": "string",
              "attributes": ["string", ...],
              "next": "string"
            },
            "selectAttributes": {
              "name": "string",
              "attributes": ["string", ...],
              "next": "string"
            },
            "filter": {
              "name": "string",
              "filter": "string",
              "next": "string"
            },
            "math": {
              "name": "string",
              "attribute": "string",
              "math": "string",
              "next": "string"
            },
            "deviceRegistryEnrich": {
              "name": "string",
              "attribute": "string",
              "thingName": "string",
              "roleArn": "string",
              "next": "string"
            },
            "deviceShadowEnrich": {
              "name": "string",
              "attribute": "string",
              "thingName": "string",
              "roleArn": "string",
              "next": "string"
            }
          }

       --payloads (list)
          The sample message payloads on which the pipeline activity is run.

          (blob)

       Syntax:

          blob blob ...

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination. If automatic pagination is disabled,  the
       AWS CLI will only make one call, for the first page of results.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

EXAMPLES
       NOTE:
          To  use  the following examples, you must have the AWS CLI installed
          and configured. See the Getting started guide in the  AWS  CLI  User
          Guide for more information.

          Unless  otherwise  stated,  all  examples  have  unix-like quotation
          rules. These examples will need to be  adapted  to  your  terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To simulate a pipeline activity

       The following run-pipeline-activity example simulates  the  results  of
       running a pipeline activity on a message payload.

          aws iotanalytics run-pipeline-activity \
              --pipeline-activity file://maths.json \
              --payloads file://payloads.json

       Contents of maths.json:

          {
              "math": {
                  "name": "MyMathActivity",
                  "math": "((temp - 32) * 5.0) / 9.0",
                  "attribute": "tempC"
              }
          }

       Contents of payloads.json:

          [
              "{\"humidity\": 52, \"temp\": 68 }",
              "{\"humidity\": 52, \"temp\": 32 }"
          ]

       Output:

          {
              "logResult": "",
              "payloads": [
                  "eyJodW1pZGl0eSI6NTIsInRlbXAiOjY4LCJ0ZW1wQyI6MjB9",
                  "eyJodW1pZGl0eSI6NTIsInRlbXAiOjMyLCJ0ZW1wQyI6MH0="
              ]
          }

       For  more information, see RunPipelineActivity in the AWS IoT Analytics
       API Reference.

OUTPUT
       payloads -> (list)
          The enriched or transformed sample message  payloads  as  base64-en-
          coded strings. (The results of running the pipeline activity on each
          input sample message payload, encoded in base64.)

          (blob)

       logResult -> (string)
          In case the pipeline activity fails, the log message that is  gener-
          ated.



                                                       RUN-PIPELINE-ACTIVITY()
