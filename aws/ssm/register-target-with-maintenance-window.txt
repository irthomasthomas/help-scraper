REGISTER-TARGET-WITH-MAINTENANCE-WINDREGISTER-TARGET-WITH-MAINTENANCE-WINDOW()



NAME
       register-target-with-maintenance-window -

DESCRIPTION
       Registers a target with a maintenance window.

       See also: AWS API Documentation

SYNOPSIS
            register-target-with-maintenance-window
          --window-id <value>
          --resource-type <value>
          --targets <value>
          [--owner-information <value>]
          [--name <value>]
          [--description <value>]
          [--client-token <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --window-id (string)
          The  ID  of  the  maintenance window the target should be registered
          with.

       --resource-type (string)
          The type of target being registered with the maintenance window.

          Possible values:

          o INSTANCE

          o RESOURCE_GROUP

       --targets (list)
          The targets to register with the maintenance window. In other words,
          the  managed  nodes  to  run commands on when the maintenance window
          runs.

          NOTE:
              If a single maintenance window task is registered with  multiple
              targets, its task invocations occur sequentially and not in par-
              allel. If your task must run on multiple  targets  at  the  same
              time,  register  a  task for each target individually and assign
              each task the same priority level.

          You can specify targets  using  managed  node  IDs,  resource  group
          names, or tags that have been applied to managed nodes.
              Example 1 : Specify managed node IDs

              Key=InstanceIds,Values=<instance-id-1>,<instance-id-2>,<in-
              stance-id-3>

              Example 2 : Use tag key-pairs applied to managed nodes

              Key=tag:<my-tag-key>,Values=<my-tag-value-1>,<my-tag-value-2>

              Example 3 : Use tag-keys applied to managed nodes

              Key=tag-key,Values=<my-tag-key-1>,<my-tag-key-2>

              Example 4 : Use resource group names

              Key=resource-groups:Name,Values=<resource-group-name>

              Example 5 : Use filters for resource group types

              Key=resource-groups:ResourceTypeFilters,Values=<re-
              source-type-1>,<resource-type-2>

          NOTE:
              For  Key=resource-groups:ResourceTypeFilters  , specify resource
              types in the following format
                 Key=resource-groups:ResourceTypeFilters,Values=AWS::EC2::IN-
                 STANCE,AWS::EC2::VPC

          For  more  information  about  these examples formats, including the
          best use case for each one, see Examples: Register  targets  with  a
          maintenance  window  in the Amazon Web Services Systems Manager User
          Guide .

          (structure)
              An array of search criteria that targets managed nodes  using  a
              key-value pair that you specify.

              NOTE:
                 One  or more targets must be specified for maintenance window
                 Run Command-type tasks. Depending on the  task,  targets  are
                 optional for other maintenance window task types (Automation,
                 Lambda, and Step Functions). For more information about  run-
                 ning  tasks that don't specify targets, see Registering main-
                 tenance window tasks without targets in the Amazon  Web  Ser-
                 vices Systems Manager User Guide .

              Supported formats include the following.
                 For all Systems Manager capabilities:

              o Key=tag-key,Values=tag-value-1,tag-value-2
                 For Automation and Change Manager:

              o Key=tag:tag-key,Values=tag-value

              o Key=ResourceGroup,Values=resource-group-name

              o Key=ParameterValues,Values=value-1,value-2,value-3

              o To target all instances in the Amazon Web Services Region:

                o Key=AWS::EC2::Instance,Values=*

                o Key=InstanceIds,Values=*
                 For Run Command and Maintenance Windows:

              o Key=InstanceIds,Values=instance-id-1,instance-id-2,in-
                stance-id-3

              o Key=tag:tag-key,Values=tag-value-1,tag-value-2

              o Key=resource-groups:Name,Values=resource-group-name

              o Additionally, Maintenance Windows support  targeting  resource
                types:

                o Key=resource-groups:ResourceTypeFilters,Values=re-
                  source-type-1,resource-type-2
                 For State Manager:

              o Key=InstanceIds,Values=instance-id-1,instance-id-2,in-
                stance-id-3

              o Key=tag:tag-key,Values=tag-value-1,tag-value-2

              o To target all instances in the Amazon Web Services Region:

                o Key=InstanceIds,Values=*

              For more information about how to send commands that target man-
              aged nodes using Key,Value parameters,  see  Targeting  multiple
              managed  nodes  in  the Amazon Web Services Systems Manager User
              Guide .

              Key -> (string)
                 User-defined criteria for sending commands that  target  man-
                 aged nodes that meet the criteria.

              Values -> (list)
                 User-defined  criteria that maps to Key . For example, if you
                 specified tag:ServerRole , you could specify  value:WebServer
                 to  run  a  command  on  instances  that  include EC2 tags of
                 ServerRole,WebServer .

                 Depending on the type of target, the maximum number of values
                 for a key might be lower than the global maximum of 50.

                 (string)

       Shorthand Syntax:

          Key=string,Values=string,string ...

       JSON Syntax:

          [
            {
              "Key": "string",
              "Values": ["string", ...]
            }
            ...
          ]

       --owner-information (string)
          User-provided  value  that will be included in any Amazon CloudWatch
          Events events raised while running tasks for these targets  in  this
          maintenance window.

       --name (string)
          An optional name for the target.

       --description (string)
          An optional description for the target.

       --client-token (string)
          User-provided idempotency token.

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

EXAMPLES
       NOTE:
          To use the following examples, you must have the AWS  CLI  installed
          and  configured.  See  the Getting started guide in the AWS CLI User
          Guide for more information.

          Unless otherwise  stated,  all  examples  have  unix-like  quotation
          rules.  These  examples  will  need to be adapted to your terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       Example 1: To register a single target with a maintenance window

       The following register-target-with-maintenance-window example registers
       an instance with a maintenance window.

          aws ssm register-target-with-maintenance-window \
              --window-id "mw-ab12cd34ef56gh78" \
              --target "Key=InstanceIds,Values=i-0000293ffd8c57862" \
              --owner-information "Single instance" \
              --resource-type "INSTANCE"

       Output:

          {
              "WindowTargetId":"1a2b3c4d-1a2b-1a2b-1a2b-1a2b3c4d-1a2"
          }

       Example 2: To register multiple targets with a maintenance window using
       instance IDs

       The following register-target-with-maintenance-window example registers
       two instances with a maintenance window by  specifying  their  instance
       IDs.

          aws ssm register-target-with-maintenance-window \
              --window-id "mw-ab12cd34ef56gh78" \
              --target "Key=InstanceIds,Values=i-0000293ffd8c57862,i-0cb2b964d3e14fd9f" \
              --owner-information "Two instances in a list" \
              --resource-type "INSTANCE"

       Output:

          {
              "WindowTargetId":"1a2b3c4d-1a2b-1a2b-1a2b-1a2b3c4d-1a2"
          }

       Example 3: To register targets with a maintenance window using resource
       tags

       The following register-target-with-maintenance-window example registers
       instances  with  a  maintenance window by specifying resource tags that
       have been applied to the instances.

          aws ssm register-target-with-maintenance-window \
              --window-id "mw-06cf17cbefcb4bf4f" \
              --targets "Key=tag:Environment,Values=Prod" "Key=Role,Values=Web" \
              --owner-information "Production Web Servers" \
              --resource-type "INSTANCE"

       Output:

          {
              "WindowTargetId":"1a2b3c4d-1a2b-1a2b-1a2b-1a2b3c4d-1a2"
          }

       Example 4: To register targets using a group of tag keys

       The following register-target-with-maintenance-window example  register
       instances  that all have one or more tag keys assigned to them, regard-
       less of their key values.

          aws ssm register-target-with-maintenance-window \
              --window-id "mw-0c50858d01EXAMPLE" \
              --resource-type "INSTANCE" \
              --target "Key=tag-key,Values=Name,Instance-Type,CostCenter"

       Output:

          {
              "WindowTargetId":"1a2b3c4d-1a2b-1a2b-1a2b-1a2b3c4d-1a2"
          }

       Example 5: To register targets using a resource group name

       The following register-target-with-maintenance-window example  register
       a specified resource group, regardless of the type of resources it con-
       tains.

          aws ssm register-target-with-maintenance-window \
              --window-id "mw-0c50858d01EXAMPLE" \
              --resource-type "RESOURCE_GROUP" \
              --target "Key=resource-groups:Name,Values=MyResourceGroup"

       Output:

          {
              "WindowTargetId":"1a2b3c4d-1a2b-1a2b-1a2b-1a2b3c4d-1a2"
          }

       For more information, see Register a Target Instance with  the  Mainte-
       nance Window (AWS CLI) in the AWS Systems Manager User Guide.

OUTPUT
       WindowTargetId -> (string)
          The ID of the target definition in this maintenance window.



                                     REGISTER-TARGET-WITH-MAINTENANCE-WINDOW()
