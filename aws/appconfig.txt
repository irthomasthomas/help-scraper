APPCONFIG()                                                        APPCONFIG()



NAME
       appconfig -

DESCRIPTION
       AppConfig  feature  flags  and  dynamic  configurations  help  software
       builders quickly and securely adjust application behavior in production
       environments  without  full code deployments. AppConfig speeds up soft-
       ware release frequency, improves application resiliency, and helps  you
       address emergent issues more quickly. With feature flags, you can grad-
       ually release new capabilities to users and measure the impact of those
       changes  before fully deploying the new capabilities to all users. With
       operational flags and dynamic  configurations,  you  can  update  block
       lists,  allow  lists, throttling limits, logging verbosity, and perform
       other operational tuning to quickly respond to issues in production en-
       vironments.

       NOTE:
          AppConfig is a capability of Amazon Web Services Systems Manager.

       Despite  the  fact  that  application  configuration  content  can vary
       greatly from application to application, AppConfig supports the follow-
       ing use cases, which cover a broad spectrum of customer needs:

       o Feature  flags  and toggles - Safely release new capabilities to your
         customers in a controlled environment. Instantly roll back changes if
         you experience a problem.

       o Application  tuning  -  Carefully introduce application changes while
         testing the impact of those changes with users in production environ-
         ments.

       o Allow  list or block list - Control access to premium features or in-
         stantly block specific users without deploying new code.

       o Centralized configuration storage - Keep your configuration data  or-
         ganized and consistent across all of your workloads. You can use App-
         Config to deploy configuration data stored in  the  AppConfig  hosted
         configuration  store,  Secrets  Manager,  Systems  Manager, Parameter
         Store, or Amazon S3.
          How AppConfig works

       This section provides a high-level description of how  AppConfig  works
       and how you get started.

          1. Identify  configuration  values in code you want to manage in the
             cloud

       Before you start creating AppConfig artifacts, we recommend  you  iden-
       tify  configuration data in your code that you want to dynamically man-
       age using AppConfig. Good examples include feature  flags  or  toggles,
       allow  and  block  lists, logging verbosity, service limits, and throt-
       tling rules, to name a few.

       If your configuration data already exists in the cloud,  you  can  take
       advantage  of  AppConfig validation, deployment, and extension features
       to further streamline configuration data management.

          2. Create an application namespace

       To create a namespace, you create an AppConfig artifact called  an  ap-
       plication.  An application is simply an organizational construct like a
       folder.

          3. Create environments

       For each AppConfig application, you define one or more environments. An
       environment is a logical grouping of targets, such as applications in a
       Beta or Production environment, Lambda functions,  or  containers.  You
       can also define environments for application subcomponents, such as the
       Web , Mobile , and Back-end .

       You can configure Amazon CloudWatch alarms for  each  environment.  The
       system  monitors  alarms during a configuration deployment. If an alarm
       is triggered, the system rolls back the configuration.

          4. Create a configuration profile

       A configuration profile includes, among other things, a  URI  that  en-
       ables  AppConfig  to locate your configuration data in its stored loca-
       tion and a profile type. AppConfig supports two  configuration  profile
       types: feature flags and freeform configurations. Feature flag configu-
       ration profiles store their data in the AppConfig hosted  configuration
       store  and  the  URI is simply hosted . For freeform configuration pro-
       files, you can store your data in the  AppConfig  hosted  configuration
       store  or  any Amazon Web Services service that integrates with AppCon-
       fig, as described in Creating a free form configuration profile in  the
       the AppConfig User Guide .

       A  configuration profile can also include optional validators to ensure
       your configuration data is syntactically and semantically correct. App-
       Config  performs  a check using the validators when you start a deploy-
       ment. If any errors are detected, the deployment rolls back to the pre-
       vious configuration data.

          5. Deploy configuration data

       When you create a new deployment, you specify the following:

       o An application ID

       o A configuration profile ID

       o A configuration version

       o An environment ID where you want to deploy the configuration data

       o A  deployment  strategy ID that defines how fast you want the changes
         to take effect

       When you call the StartDeployment API action,  AppConfig  performs  the
       following tasks:

       o Retrieves  the  configuration  data from the underlying data store by
         using the location URI in the configuration profile.

       o Verifies the configuration data  is  syntactically  and  semantically
         correct  by  using the validators you specified when you created your
         configuration profile.

       o Caches a copy of the data so it is ready to be retrieved by your  ap-
         plication. This cached copy is called the deployed data .

         6. Retrieve the configuration

       You  can  configure  AppConfig Agent as a local host and have the agent
       poll  AppConfig  for  configuration  updates.  The  agent   calls   the
       StartConfigurationSession  and  GetLatestConfiguration  API actions and
       caches your configuration data locally. To retrieve the data, your  ap-
       plication  makes  an HTTP call to the localhost server. AppConfig Agent
       supports several use cases, as described in Simplified retrieval  meth-
       ods in the the AppConfig User Guide .

       If AppConfig Agent isn't supported for your use case, you can configure
       your application to poll AppConfig for  configuration  updates  by  di-
       rectly calling the StartConfigurationSession and GetLatestConfiguration
       API actions.

       This reference is intended to be used with the AppConfig User Guide .

AVAILABLE COMMANDS
       o create-application

       o create-configuration-profile

       o create-deployment-strategy

       o create-environment

       o create-extension

       o create-extension-association

       o create-hosted-configuration-version

       o delete-application

       o delete-configuration-profile

       o delete-deployment-strategy

       o delete-environment

       o delete-extension

       o delete-extension-association

       o delete-hosted-configuration-version

       o get-account-settings

       o get-application

       o get-configuration-profile

       o get-deployment

       o get-deployment-strategy

       o get-environment

       o get-extension

       o get-extension-association

       o get-hosted-configuration-version

       o help

       o list-applications

       o list-configuration-profiles

       o list-deployment-strategies

       o list-deployments

       o list-environments

       o list-extension-associations

       o list-extensions

       o list-hosted-configuration-versions

       o list-tags-for-resource

       o start-deployment

       o stop-deployment

       o tag-resource

       o untag-resource

       o update-account-settings

       o update-application

       o update-configuration-profile

       o update-deployment-strategy

       o update-environment

       o update-extension

       o update-extension-association

       o validate-configuration



                                                                   APPCONFIG()
