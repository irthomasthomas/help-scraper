CREATE-USER()                                                    CREATE-USER()



NAME
       create-user -

DESCRIPTION
       Creates  a user and associates them with an existing file transfer pro-
       tocol-enabled server. You can only  create  and  associate  users  with
       servers that have the IdentityProviderType set to SERVICE_MANAGED . Us-
       ing parameters for CreateUser , you can specify the user name, set  the
       home  directory,  store  the  user's  public key, and assign the user's
       Identity and Access Management (IAM) role. You can also optionally  add
       a  session  policy,  and  assign metadata with tags that can be used to
       group and search for users.

       See also: AWS API Documentation

SYNOPSIS
            create-user
          [--home-directory <value>]
          [--home-directory-type <value>]
          [--home-directory-mappings <value>]
          [--policy <value>]
          [--posix-profile <value>]
          --role <value>
          --server-id <value>
          [--ssh-public-key-body <value>]
          [--tags <value>]
          --user-name <value>
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --home-directory (string)
          The landing directory (folder) for a user when they log  in  to  the
          server using the client.

          A HomeDirectory example is /bucket_name/home/mydirectory .

       --home-directory-type (string)
          The  type  of  landing  directory (folder) that you want your users'
          home directory to be when they log in to the server. If you  set  it
          to  PATH  ,  the  user will see the absolute Amazon S3 bucket or EFS
          paths as is in their file transfer protocol clients. If you  set  it
          LOGICAL  , you need to provide mappings in the HomeDirectoryMappings
          for how you want to make Amazon S3 or Amazon EFS  paths  visible  to
          your users.

          Possible values:

          o PATH

          o LOGICAL

       --home-directory-mappings (list)
          Logical directory mappings that specify what Amazon S3 or Amazon EFS
          paths and keys should be visible to your user and how  you  want  to
          make them visible. You must specify the Entry and Target pair, where
          Entry shows how the path is made visible and Target  is  the  actual
          Amazon  S3  or  Amazon EFS path. If you only specify a target, it is
          displayed as is. You also must ensure that your Identity and  Access
          Management  (IAM)  role  provides  access  to paths in Target . This
          value can be set only when HomeDirectoryType is set to LOGICAL .

          The following is an Entry and Target pair example.
              [ { "Entry": "/directory1",  "Target":  "/bucket_name/home/mydi-
              rectory" } ]

          In  most cases, you can use this value instead of the session policy
          to lock your user down to the designated home directory ("chroot ").
          To  do this, you can set Entry to / and set Target to the HomeDirec-
          tory parameter value.

          The following is an Entry and Target pair example for chroot .
              [ { "Entry": "/", "Target": "/bucket_name/home/mydirectory" } ]

          (structure)
              Represents an object that contains entries and targets for Home-
              DirectoryMappings .

              The following is an Entry and Target pair example for chroot .
                 [ { "Entry": "/", "Target": "/bucket_name/home/mydirectory" }
                 ]

              Entry -> (string)
                 Represents an entry for HomeDirectoryMappings .

              Target -> (string)
                 Represents the map target that  is  used  in  a  HomeDirecto-
                 rymapEntry .

       Shorthand Syntax:

          Entry=string,Target=string ...

       JSON Syntax:

          [
            {
              "Entry": "string",
              "Target": "string"
            }
            ...
          ]

       --policy (string)
          A session policy for your user so that you can use the same Identity
          and Access Management (IAM) role across multiple users. This  policy
          scopes  down  a user's access to portions of their Amazon S3 bucket.
          Variables that you can  use  inside  this  policy  include  ${Trans-
          fer:UserName}  ,  ${Transfer:HomeDirectory}  ,  and ${Transfer:Home-
          Bucket} .

          NOTE:
              This policy applies only when the domain of ServerId  is  Amazon
              S3. Amazon EFS does not use session policies.

              For  session  policies,  Transfer  Family stores the policy as a
              JSON blob, instead of the Amazon Resource Name (ARN) of the pol-
              icy.  You save the policy as a JSON blob and pass it in the Pol-
              icy argument.

              For an example of a session policy, see Example session policy .

              For more information, see AssumeRole in the Amazon Web  Services
              Security Token Service API Reference .

       --posix-profile (structure)
          Specifies  the  full POSIX identity, including user ID (Uid ), group
          ID (Gid ), and any secondary groups IDs (SecondaryGids ), that  con-
          trols  your users' access to your Amazon EFS file systems. The POSIX
          permissions that are set on files and directories in Amazon EFS  de-
          termine  the  level of access your users get when transferring files
          into and out of your Amazon EFS file systems.

          Uid -> (long)
              The POSIX user ID used for all EFS operations by this user.

          Gid -> (long)
              The POSIX group ID used for all EFS operations by this user.

          SecondaryGids -> (list)
              The secondary POSIX group IDs used for  all  EFS  operations  by
              this user.

              (long)

       Shorthand Syntax:

          Uid=long,Gid=long,SecondaryGids=long,long

       JSON Syntax:

          {
            "Uid": long,
            "Gid": long,
            "SecondaryGids": [long, ...]
          }

       --role (string)
          The Amazon Resource Name (ARN) of the Identity and Access Management
          (IAM) role that controls your users' access to your Amazon S3 bucket
          or Amazon EFS file system. The policies attached to this role deter-
          mine the level of access that you want to provide  your  users  when
          transferring  files  into and out of your Amazon S3 bucket or Amazon
          EFS file system. The IAM role should also contain a trust  relation-
          ship  that allows the server to access your resources when servicing
          your users' transfer requests.

       --server-id (string)
          A system-assigned unique identifier for a server instance.  This  is
          the specific server that you added your user to.

       --ssh-public-key-body (string)
          The  public  portion of the Secure Shell (SSH) key used to authenti-
          cate the user to the server.

          The three standard SSH public key format elements are <key  type>  ,
          <body base64> , and an optional <comment> , with spaces between each
          element.

          Transfer Family accepts RSA, ECDSA, and ED25519 keys.

          o For RSA keys, the key type is ssh-rsa .

          o For ED25519 keys, the key type is ssh-ed25519 .

          o For ECDSA keys, the  key  type  is  either  ecdsa-sha2-nistp256  ,
            ecdsa-sha2-nistp384  ,  or  ecdsa-sha2-nistp521 , depending on the
            size of the key you generated.

       --tags (list)
          Key-value pairs that can be used to group and search for users. Tags
          are metadata attached to users for any purpose.

          (structure)
              Creates a key-value pair for a specific resource. Tags are meta-
              data that you can use to search for and  group  a  resource  for
              various  purposes.  You  can  apply  tags to servers, users, and
              roles. A tag key can take more than one value. For  example,  to
              group  servers  for  accounting purposes, you might create a tag
              called Group and assign the values Research  and  Accounting  to
              that group.

              Key -> (string)
                 The name assigned to the tag that you create.

              Value -> (string)
                 Contains one or more values that you assigned to the key name
                 you create.

       Shorthand Syntax:

          Key=string,Value=string ...

       JSON Syntax:

          [
            {
              "Key": "string",
              "Value": "string"
            }
            ...
          ]

       --user-name (string)
          A unique string that identifies a user  and  is  associated  with  a
          ServerId  .  This  user name must be a minimum of 3 and a maximum of
          100 characters long. The following are valid characters:  a-z,  A-Z,
          0-9,  underscore  '_',  hyphen '-', period '.', and at sign '@'. The
          user name can't start with a hyphen, period, or at sign.

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

OUTPUT
       ServerId -> (string)
          The identifier of the server that the user is attached to.

       UserName -> (string)
          A unique string that identifies a Transfer Family user.



                                                                 CREATE-USER()
