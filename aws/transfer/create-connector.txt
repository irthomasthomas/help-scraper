CREATE-CONNECTOR()                                          CREATE-CONNECTOR()



NAME
       create-connector -

DESCRIPTION
       Creates  the  connector, which captures the parameters for a connection
       for the AS2 or SFTP protocol. For AS2, the connector  is  required  for
       sending files to an externally hosted AS2 server. For SFTP, the connec-
       tor is required when sending files to an SFTP server or receiving files
       from  an  SFTP server. For more details about connectors, see Configure
       AS2 connectors and Create SFTP connectors .

       NOTE:
          You must specify exactly one configuration object:  either  for  AS2
          (As2Config ) or SFTP (SftpConfig ).

       See also: AWS API Documentation

SYNOPSIS
            create-connector
          --url <value>
          [--as2-config <value>]
          --access-role <value>
          [--logging-role <value>]
          [--tags <value>]
          [--sftp-config <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --url (string)
          The URL of the partner's AS2 or SFTP endpoint.

       --as2-config (structure)
          A  structure  that  contains the parameters for an AS2 connector ob-
          ject.

          LocalProfileId -> (string)
              A unique identifier for the AS2 local profile.

          PartnerProfileId -> (string)
              A unique identifier for the partner profile for the connector.

          MessageSubject -> (string)
              Used as the Subject HTTP header attribute in AS2  messages  that
              are being sent with the connector.

          Compression -> (string)
              Specifies whether the AS2 file is compressed.

          EncryptionAlgorithm -> (string)
              The algorithm that is used to encrypt the file.

              Note the following:

              o Do  not use the DES_EDE3_CBC algorithm unless you must support
                a legacy client that requires it, as it is a  weak  encryption
                algorithm.

              o You  can  only specify NONE if the URL for your connector uses
                HTTPS. Using HTTPS ensures that no traffic is  sent  in  clear
                text.

          SigningAlgorithm -> (string)
              The  algorithm  that  is used to sign the AS2 messages sent with
              the connector.

          MdnSigningAlgorithm -> (string)
              The signing algorithm for the MDN response.

              NOTE:
                 If set to  DEFAULT  (or  not  set  at  all),  the  value  for
                 SigningAlgorithm is used.

          MdnResponse -> (string)
              Used  for outbound requests (from an Transfer Family server to a
              partner AS2 server) to determine whether  the  partner  response
              for  transfers is synchronous or asynchronous. Specify either of
              the following values:

              o SYNC : The system expects a synchronous MDN response, confirm-
                ing that the file was transferred successfully (or not).

              o NONE : Specifies that no MDN response is required.

          BasicAuthSecretId -> (string)
              Provides Basic authentication support to the AS2 Connectors API.
              To use Basic authentication, you must provide the name or Amazon
              Resource Name (ARN) of a secret in Secrets Manager.

              The  default  value for this parameter is null , which indicates
              that Basic authentication is not enabled for the connector.

              If the connector should use  Basic  authentication,  the  secret
              needs to be in the following format:
                 { "Username": "user-name", "Password": "user-password" }

              Replace user-name and user-password with the credentials for the
              actual user that is being authenticated.

              Note the following:

              o You are storing these  credentials  in  Secrets  Manager,  not
                passing them directly into this API.

              o If you are using the API, SDKs, or CloudFormation to configure
                your connector, then you must create the secret before you can
                enable  Basic  authentication.  However,  if you are using the
                Amazon Web Services management console, you can have the  sys-
                tem create the secret for you.

              If  you  have previously enabled Basic authentication for a con-
              nector, you can disable it  by  using  the  UpdateConnector  API
              call.  For  example,  if  you are using the CLI, you can run the
              following command to remove Basic authentication:
                 update-connector --connector-id my-connector-id  --as2-config
                 'BasicAuthSecretId=""'

       Shorthand Syntax:

          LocalProfileId=string,PartnerProfileId=string,MessageSubject=string,Compression=string,EncryptionAlgorithm=string,SigningAlgorithm=string,MdnSigningAlgorithm=string,MdnResponse=string,BasicAuthSecretId=string

       JSON Syntax:

          {
            "LocalProfileId": "string",
            "PartnerProfileId": "string",
            "MessageSubject": "string",
            "Compression": "ZLIB"|"DISABLED",
            "EncryptionAlgorithm": "AES128_CBC"|"AES192_CBC"|"AES256_CBC"|"DES_EDE3_CBC"|"NONE",
            "SigningAlgorithm": "SHA256"|"SHA384"|"SHA512"|"SHA1"|"NONE",
            "MdnSigningAlgorithm": "SHA256"|"SHA384"|"SHA512"|"SHA1"|"NONE"|"DEFAULT",
            "MdnResponse": "SYNC"|"NONE",
            "BasicAuthSecretId": "string"
          }

       --access-role (string)
          Connectors  are used to send files using either the AS2 or SFTP pro-
          tocol. For the access role, provide the Amazon Resource  Name  (ARN)
          of the Identity and Access Management role to use.
              For AS2 connectors

          With AS2, you can send files by calling StartFileTransfer and speci-
          fying the file paths in the request parameter,  SendFilePaths  .  We
          use  the  files parent directory (for example, for --send-file-paths
          /bucket/dir/file.txt , parent directory is /bucket/dir/ ) to  tempo-
          rarily store a processed AS2 message file, store the MDN when we re-
          ceive them from the partner, and write a final JSON file  containing
          relevant  metadata  of the transmission. So, the AccessRole needs to
          provide read and write access to the parent directory  of  the  file
          location  used  in  the StartFileTransfer request. Additionally, you
          need to provide read and write access to the parent directory of the
          files that you intend to send with StartFileTransfer .

          If  you  are  using Basic authentication for your AS2 connector, the
          access role requires  the  secretsmanager:GetSecretValue  permission
          for  the secret. If the secret is encrypted using a customer-managed
          key instead of the Amazon Web Services managed key in  Secrets  Man-
          ager,  then  the role also needs the kms:Decrypt permission for that
          key.
              For SFTP connectors

          Make sure that the access role provides read and write access to the
          parent  directory of the file location that's used in the StartFile-
          Transfer request. Additionally, make sure that the role provides se-
          cretsmanager:GetSecretValue permission to Secrets Manager.

       --logging-role (string)
          The Amazon Resource Name (ARN) of the Identity and Access Management
          (IAM) role that allows a connector to turn on CloudWatch logging for
          Amazon  S3 events. When set, you can view connector activity in your
          CloudWatch logs.

       --tags (list)
          Key-value pairs that can be used to group and search for connectors.
          Tags are metadata attached to connectors for any purpose.

          (structure)
              Creates a key-value pair for a specific resource. Tags are meta-
              data that you can use to search for and  group  a  resource  for
              various  purposes.  You  can  apply  tags to servers, users, and
              roles. A tag key can take more than one value. For  example,  to
              group  servers  for  accounting purposes, you might create a tag
              called Group and assign the values Research  and  Accounting  to
              that group.

              Key -> (string)
                 The name assigned to the tag that you create.

              Value -> (string)
                 Contains one or more values that you assigned to the key name
                 you create.

       Shorthand Syntax:

          Key=string,Value=string ...

       JSON Syntax:

          [
            {
              "Key": "string",
              "Value": "string"
            }
            ...
          ]

       --sftp-config (structure)
          A structure that contains the parameters for an SFTP  connector  ob-
          ject.

          UserSecretId -> (string)
              The  identifier  for  the secret (in Amazon Web Services Secrets
              Manager) that contains the SFTP user's private key, password, or
              both.  The  identifier must be the Amazon Resource Name (ARN) of
              the secret.

          TrustedHostKeys -> (list)
              The public portion of the host key, or keys, that  are  used  to
              identify  the  external  server to which you are connecting. You
              can use the ssh-keyscan command against the SFTP server  to  re-
              trieve the necessary key.

              The three standard SSH public key format elements are <key type>
              , <body base64> , and an optional <comment> ,  with  spaces  be-
              tween  each  element.  Specify  only  the  <key  type> and <body
              base64> : do not enter the <comment> portion of the key.

              For the trusted host key, Transfer Family accepts RSA and  ECDSA
              keys.

              o For RSA keys, the <key type> string is ssh-rsa .

              o For   ECDSA   keys,   the   <key   type>   string   is  either
                ecdsa-sha2-nistp256     ,     ecdsa-sha2-nistp384     ,     or
                ecdsa-sha2-nistp521  ,  depending  on  the size of the key you
                generated.

              Run this command to retrieve the SFTP  server  host  key,  where
              your SFTP server name is ftp.host.com .
                 ssh-keyscan ftp.host.com

              This prints the public host key to standard output.
                 ftp.host.com ssh-rsa AAAAB3Nza...<long-string-for-public-key

              Copy  and  paste  this string into the TrustedHostKeys field for
              the create-connector command or into the Trusted host keys field
              in the console.

              (string)

       Shorthand Syntax:

          UserSecretId=string,TrustedHostKeys=string,string

       JSON Syntax:

          {
            "UserSecretId": "string",
            "TrustedHostKeys": ["string", ...]
          }

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

OUTPUT
       ConnectorId -> (string)
          The unique identifier for the connector, returned after the API call
          succeeds.



                                                            CREATE-CONNECTOR()
