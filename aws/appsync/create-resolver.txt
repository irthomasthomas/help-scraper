CREATE-RESOLVER()                                            CREATE-RESOLVER()



NAME
       create-resolver -

DESCRIPTION
       Creates a Resolver object.

       A  resolver converts incoming requests into a format that a data source
       can understand, and converts the data source's responses into GraphQL.

       See also: AWS API Documentation

SYNOPSIS
            create-resolver
          --api-id <value>
          --type-name <value>
          --field-name <value>
          [--data-source-name <value>]
          [--request-mapping-template <value>]
          [--response-mapping-template <value>]
          [--kind <value>]
          [--pipeline-config <value>]
          [--sync-config <value>]
          [--caching-config <value>]
          [--max-batch-size <value>]
          [--runtime <value>]
          [--code <value>]
          [--metrics-config <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --api-id (string)
          The ID for the GraphQL API for which the resolver is being created.

       --type-name (string)
          The name of the Type .

       --field-name (string)
          The name of the field to attach the resolver to.

       --data-source-name (string)
          The name of the data source for which the resolver is being created.

       --request-mapping-template (string)
          The mapping template to use for requests.

          A resolver uses a request mapping template to convert a GraphQL  ex-
          pression  into  a  format that a data source can understand. Mapping
          templates are written in Apache Velocity Template Language (VTL).

          VTL request mapping templates are optional when using an Lambda data
          source. For all other data sources, VTL request and response mapping
          templates are required.

       --response-mapping-template (string)
          The mapping template to use for responses from the data source.

       --kind (string)
          The resolver type.

          o UNIT : A UNIT resolver type. A UNIT resolver is  the  default  re-
            solver  type.  You  can use a UNIT resolver to run a GraphQL query
            against a single data source.

          o PIPELINE : A PIPELINE resolver type. You can use  a  PIPELINE  re-
            solver  to invoke a series of Function objects in a serial manner.
            You can use a pipeline resolver to run  a  GraphQL  query  against
            multiple data sources.

          Possible values:

          o UNIT

          o PIPELINE

       --pipeline-config (structure)
          The PipelineConfig .

          functions -> (list)
              A list of Function objects.

              (string)

       Shorthand Syntax:

          functions=string,string

       JSON Syntax:

          {
            "functions": ["string", ...]
          }

       --sync-config (structure)
          The SyncConfig for a resolver attached to a versioned data source.

          conflictHandler -> (string)
              The  Conflict  Resolution  strategy to perform in the event of a
              conflict.

              o OPTIMISTIC_CONCURRENCY : Resolve conflicts by rejecting  muta-
                tions  when  versions  don't  match  the latest version at the
                server.

              o AUTOMERGE : Resolve conflicts with the Automerge conflict res-
                olution strategy.

              o LAMBDA : Resolve conflicts with an Lambda function supplied in
                the LambdaConflictHandlerConfig .

          conflictDetection -> (string)
              The Conflict Detection strategy to use.

              o VERSION : Detect conflicts based on object versions  for  this
                resolver.

              o NONE : Do not detect conflicts when invoking this resolver.

          lambdaConflictHandlerConfig -> (structure)
              The  LambdaConflictHandlerConfig  when configuring LAMBDA as the
              Conflict Handler.

              lambdaConflictHandlerArn -> (string)
                 The Amazon Resource Name (ARN) for the Lambda function to use
                 as the Conflict Handler.

       Shorthand Syntax:

          conflictHandler=string,conflictDetection=string,lambdaConflictHandlerConfig={lambdaConflictHandlerArn=string}

       JSON Syntax:

          {
            "conflictHandler": "OPTIMISTIC_CONCURRENCY"|"LAMBDA"|"AUTOMERGE"|"NONE",
            "conflictDetection": "VERSION"|"NONE",
            "lambdaConflictHandlerConfig": {
              "lambdaConflictHandlerArn": "string"
            }
          }

       --caching-config (structure)
          The caching configuration for the resolver.

          ttl -> (long)
              The TTL in seconds for a resolver that has caching activated.

              Valid values are 13,600 seconds.

          cachingKeys -> (list)
              The caching keys for a resolver that has caching activated.

              Valid  values  are  entries  from the $context.arguments , $con-
              text.source , and $context.identity maps.

              (string)

       Shorthand Syntax:

          ttl=long,cachingKeys=string,string

       JSON Syntax:

          {
            "ttl": long,
            "cachingKeys": ["string", ...]
          }

       --max-batch-size (integer)
          The maximum batching size for a resolver.

       --runtime (structure)
          Describes a runtime used by an Amazon Web Services AppSync  pipeline
          resolver or Amazon Web Services AppSync function. Specifies the name
          and version of the runtime to use. Note that if a runtime is  speci-
          fied, code must also be specified.

          name -> (string)
              The  name  of  the  runtime  to use. Currently, the only allowed
              value is APPSYNC_JS .

          runtimeVersion -> (string)
              The version of the runtime to use. Currently, the  only  allowed
              version is 1.0.0 .

       Shorthand Syntax:

          name=string,runtimeVersion=string

       JSON Syntax:

          {
            "name": "APPSYNC_JS",
            "runtimeVersion": "string"
          }

       --code (string)
          The  resolver code that contains the request and response functions.
          When code is used, the runtime is required. The runtime  value  must
          be APPSYNC_JS .

       --metrics-config (string)
          Enables  or  disables  enhanced  resolver  metrics for specified re-
          solvers. Note that metricsConfig won't be used unless the  resolver-
          LevelMetricsBehavior  value  is set to PER_RESOLVER_METRICS . If the
          resolverLevelMetricsBehavior is set to FULL_REQUEST_RESOLVER_METRICS
          instead,  metricsConfig  will be ignored. However, you can still set
          its value.
              metricsConfig can be ENABLED or DISABLED .

          Possible values:

          o ENABLED

          o DISABLED

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable  automatic pagination. If automatic pagination is disabled, the
       AWS CLI will only make one call, for the first page of results.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

OUTPUT
       resolver -> (structure)
          The Resolver object.

          typeName -> (string)
              The resolver type name.

          fieldName -> (string)
              The resolver field name.

          dataSourceName -> (string)
              The resolver data source name.

          resolverArn -> (string)
              The resolver Amazon Resource Name (ARN).

          requestMappingTemplate -> (string)
              The request mapping template.

          responseMappingTemplate -> (string)
              The response mapping template.

          kind -> (string)
              The resolver type.

              o UNIT : A UNIT resolver type. A UNIT resolver  is  the  default
                resolver  type.  You  can use a UNIT resolver to run a GraphQL
                query against a single data source.

              o PIPELINE : A PIPELINE resolver type. You can  use  a  PIPELINE
                resolver  to  invoke  a series of Function objects in a serial
                manner. You can use a pipeline resolver to run a GraphQL query
                against multiple data sources.

          pipelineConfig -> (structure)
              The PipelineConfig .

              functions -> (list)
                 A list of Function objects.

                 (string)

          syncConfig -> (structure)
              The  SyncConfig  for  a  resolver  attached  to a versioned data
              source.

              conflictHandler -> (string)
                 The Conflict Resolution strategy to perform in the event of a
                 conflict.

                 o OPTIMISTIC_CONCURRENCY : Resolve conflicts by rejecting mu-
                   tations when versions don't match the latest version at the
                   server.

                 o AUTOMERGE  :  Resolve conflicts with the Automerge conflict
                   resolution strategy.

                 o LAMBDA : Resolve conflicts with an Lambda function supplied
                   in the LambdaConflictHandlerConfig .

              conflictDetection -> (string)
                 The Conflict Detection strategy to use.

                 o VERSION  :  Detect  conflicts  based on object versions for
                   this resolver.

                 o NONE : Do not detect conflicts when invoking this resolver.

              lambdaConflictHandlerConfig -> (structure)
                 The LambdaConflictHandlerConfig when  configuring  LAMBDA  as
                 the Conflict Handler.

                 lambdaConflictHandlerArn -> (string)
                     The Amazon Resource Name (ARN) for the Lambda function to
                     use as the Conflict Handler.

          cachingConfig -> (structure)
              The caching configuration for the resolver.

              ttl -> (long)
                 The TTL in seconds for a resolver that has caching activated.

                 Valid values are 13,600 seconds.

              cachingKeys -> (list)
                 The caching keys for a resolver that has caching activated.

                 Valid values are entries from the $context.arguments ,  $con-
                 text.source , and $context.identity maps.

                 (string)

          maxBatchSize -> (integer)
              The maximum batching size for a resolver.

          runtime -> (structure)
              Describes a runtime used by an Amazon Web Services AppSync pipe-
              line resolver or Amazon Web Services AppSync function. Specifies
              the  name and version of the runtime to use. Note that if a run-
              time is specified, code must also be specified.

              name -> (string)
                 The name of the runtime to use. Currently, the  only  allowed
                 value is APPSYNC_JS .

              runtimeVersion -> (string)
                 The  version  of  the runtime to use. Currently, the only al-
                 lowed version is 1.0.0 .

          code -> (string)
              The resolver code that contains the request and  response  func-
              tions.  When  code is used, the runtime is required. The runtime
              value must be APPSYNC_JS .

          metricsConfig -> (string)
              Enables or disables enhanced resolver metrics for specified  re-
              solvers.  Note  that  metricsConfig won't be used unless the re-
              solverLevelMetricsBehavior value is set to  PER_RESOLVER_METRICS
              . If the resolverLevelMetricsBehavior is set to FULL_REQUEST_RE-
              SOLVER_METRICS instead, metricsConfig will be ignored.  However,
              you can still set its value.
                 metricsConfig can be ENABLED or DISABLED .



                                                             CREATE-RESOLVER()
