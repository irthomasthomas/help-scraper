CREATE-FLEET()                                                  CREATE-FLEET()



NAME
       create-fleet -

DESCRIPTION
       Creates a compute fleet.

       See also: AWS API Documentation

SYNOPSIS
            create-fleet
          --name <value>
          --base-capacity <value>
          --environment-type <value>
          --compute-type <value>
          [--scaling-configuration <value>]
          [--overflow-behavior <value>]
          [--vpc-config <value>]
          [--image-id <value>]
          [--fleet-service-role <value>]
          [--tags <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --name (string)
          The name of the compute fleet.

       --base-capacity (integer)
          The initial number of machines allocated to the eet, which denes the
          number of builds that can run in parallel.

       --environment-type (string)
          The environment type of the compute fleet.

          o The environment type ARM_CONTAINER is available only in regions US
            East  (N.  Virginia),  US  East (Ohio), US West (Oregon), EU (Ire-
            land), Asia Pacific (Mumbai), Asia Pacific (Tokyo),  Asia  Pacific
            (Singapore),  Asia  Pacific  (Sydney),  EU  (Frankfurt), and South
            America (So Paulo).

          o The environment type LINUX_CONTAINER is available only in  regions
            US  East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ire-
            land), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific  (Singa-
            pore),  Asia  Pacific (Sydney), South America (So Paulo), and Asia
            Pacific (Mumbai).

          o The environment type LINUX_GPU_CONTAINER is available only in  re-
            gions  US East (N. Virginia), US East (Ohio), US West (Oregon), EU
            (Ireland), EU (Frankfurt), Asia Pacific (Tokyo), and Asia  Pacific
            (Sydney).

          o The  environment  type MAC_ARM is available for Medium fleets only
            in regions US East (N. Virginia), US East (Ohio),  US  West  (Ore-
            gon), Asia Pacific (Sydney), and EU (Frankfurt)

          o The environment type MAC_ARM is available for Large fleets only in
            regions US East (N. Virginia), US East (Ohio), US  West  (Oregon),
            and Asia Pacific (Sydney).

          o The  environment  type  WINDOWS_SERVER_2019_CONTAINER is available
            only in regions US East (N. Virginia), US  East  (Ohio),  US  West
            (Oregon),  Asia  Pacific  (Sydney), Asia Pacific (Tokyo), Asia Pa-
            cific (Mumbai) and EU (Ireland).

          o The environment type  WINDOWS_SERVER_2022_CONTAINER  is  available
            only  in  regions  US  East (N. Virginia), US East (Ohio), US West
            (Oregon), EU (Ireland), EU  (Frankfurt),  Asia  Pacific  (Sydney),
            Asia  Pacific (Singapore), Asia Pacific (Tokyo), South America (So
            Paulo) and Asia Pacific (Mumbai).

          For more information, see Build environment  compute  types  in  the
          CodeBuild user guide .

          Possible values:

          o WINDOWS_CONTAINER

          o LINUX_CONTAINER

          o LINUX_GPU_CONTAINER

          o ARM_CONTAINER

          o WINDOWS_SERVER_2019_CONTAINER

          o LINUX_LAMBDA_CONTAINER

          o ARM_LAMBDA_CONTAINER

          o MAC_ARM

       --compute-type (string)
          Information  about  the  compute  resources  the compute fleet uses.
          Available values include:

          o BUILD_GENERAL1_SMALL : Use up to 3  GB  memory  and  2  vCPUs  for
            builds.

          o BUILD_GENERAL1_MEDIUM  :  Use  up  to  7 GB memory and 4 vCPUs for
            builds.

          o BUILD_GENERAL1_LARGE : Use up to 16 GB  memory  and  8  vCPUs  for
            builds, depending on your environment type.

          o BUILD_GENERAL1_XLARGE  :  Use  up to 70 GB memory and 36 vCPUs for
            builds, depending on your environment type.

          o BUILD_GENERAL1_2XLARGE : Use up to 145 GB memory,  72  vCPUs,  and
            824  GB  of  SSD  storage  for  builds. This compute type supports
            Docker images up to 100 GB uncompressed.

          If you use BUILD_GENERAL1_SMALL :

          o For environment type LINUX_CONTAINER , you can use up to 3 GB mem-
            ory and 2 vCPUs for builds.

          o For environment type LINUX_GPU_CONTAINER , you can use up to 16 GB
            memory, 4 vCPUs, and 1 NVIDIA A10G Tensor Core GPU for builds.

          o For environment type ARM_CONTAINER , you can use up to 4 GB memory
            and 2 vCPUs on ARM-based processors for builds.

          If you use BUILD_GENERAL1_LARGE :

          o For  environment  type  LINUX_CONTAINER  , you can use up to 15 GB
            memory and 8 vCPUs for builds.

          o For environment type LINUX_GPU_CONTAINER , you can use up  to  255
            GB memory, 32 vCPUs, and 4 NVIDIA Tesla V100 GPUs for builds.

          o For  environment type ARM_CONTAINER , you can use up to 16 GB mem-
            ory and 8 vCPUs on ARM-based processors for builds.

          For more information, see Build environment  compute  types  in  the
          CodeBuild User Guide.

          Possible values:

          o BUILD_GENERAL1_SMALL

          o BUILD_GENERAL1_MEDIUM

          o BUILD_GENERAL1_LARGE

          o BUILD_GENERAL1_XLARGE

          o BUILD_GENERAL1_2XLARGE

          o BUILD_LAMBDA_1GB

          o BUILD_LAMBDA_2GB

          o BUILD_LAMBDA_4GB

          o BUILD_LAMBDA_8GB

          o BUILD_LAMBDA_10GB

       --scaling-configuration (structure)
          The scaling configuration of the compute fleet.

          scalingType -> (string)
              The scaling type for a compute fleet.

          targetTrackingScalingConfigs -> (list)
              A list of TargetTrackingScalingConfiguration objects.

              (structure)
                 Defines  when  a new instance is auto-scaled into the compute
                 fleet.

                 metricType -> (string)
                     The metric type to determine auto-scaling.

                 targetValue -> (double)
                     The value of metricType when to start scaling.

          maxCapacity -> (integer)
              The maximum number of instances in the eet when auto-scaling.

       Shorthand Syntax:

          scalingType=string,targetTrackingScalingConfigs=[{metricType=string,targetValue=double},{metricType=string,targetValue=double}],maxCapacity=integer

       JSON Syntax:

          {
            "scalingType": "TARGET_TRACKING_SCALING",
            "targetTrackingScalingConfigs": [
              {
                "metricType": "FLEET_UTILIZATION_RATE",
                "targetValue": double
              }
              ...
            ],
            "maxCapacity": integer
          }

       --overflow-behavior (string)
          The compute fleet overflow behavior.

          o For overflow behavior QUEUE , your overflow builds need to wait on
            the existing fleet instance to become available.

          o For  overflow  behavior  ON_DEMAND  ,  your overflow builds run on
            CodeBuild on-demand.

          NOTE:
              If you choose to set your overflow behavior to  on-demand  while
              creating  a  VPC-connected fleet, make sure that you add the re-
              quired VPC permissions to your project service  role.  For  more
              information, see Example policy statement to allow CodeBuild ac-
              cess to Amazon Web Services services required to  create  a  VPC
              network interface .

          Possible values:

          o QUEUE

          o ON_DEMAND

       --vpc-config (structure)
          Information about the VPC configuration that CodeBuild accesses.

          vpcId -> (string)
              The ID of the Amazon VPC.

          subnets -> (list)
              A list of one or more subnet IDs in your Amazon VPC.

              (string)

          securityGroupIds -> (list)
              A list of one or more security groups IDs in your Amazon VPC.

              (string)

       Shorthand Syntax:

          vpcId=string,subnets=string,string,securityGroupIds=string,string

       JSON Syntax:

          {
            "vpcId": "string",
            "subnets": ["string", ...],
            "securityGroupIds": ["string", ...]
          }

       --image-id (string)
          The Amazon Machine Image (AMI) of the compute fleet.

       --fleet-service-role (string)
          The  service role associated with the compute fleet. For more infor-
          mation, see Allow a user to add a permission policy for a fleet ser-
          vice role in the CodeBuild User Guide .

       --tags (list)
          A  list  of  tag  key  and  value pairs associated with this compute
          fleet.

          These tags are available for use by  Amazon  Web  Services  services
          that support CodeBuild build project tags.

          (structure)
              A tag, consisting of a key and a value.

              This  tag  is  available for use by Amazon Web Services services
              that support tags in CodeBuild.

              key -> (string)
                 The tag's key.

              value -> (string)
                 The tag's value.

       Shorthand Syntax:

          key=string,value=string ...

       JSON Syntax:

          [
            {
              "key": "string",
              "value": "string"
            }
            ...
          ]

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

OUTPUT
       fleet -> (structure)
          Information about the compute fleet

          arn -> (string)
              The ARN of the compute fleet.

          name -> (string)
              The name of the compute fleet.

          id -> (string)
              The ID of the compute fleet.

          created -> (timestamp)
              The time at which the compute fleet was created.

          lastModified -> (timestamp)
              The time at which the compute fleet was last modified.

          status -> (structure)
              The status of the compute fleet.

              statusCode -> (string)
                 The status code of the compute fleet. Valid values include:

                 o CREATING : The compute fleet is being created.

                 o UPDATING : The compute fleet is being updated.

                 o ROTATING : The compute fleet is being rotated.

                 o PENDING_DELETION : The compute fleet is pending deletion.

                 o DELETING : The compute fleet is being deleted.

                 o CREATE_FAILED : The compute fleet has failed to create.

                 o UPDATE_ROLLBACK_FAILED  :  The  compute fleet has failed to
                   update and could not rollback to previous state.

                 o ACTIVE : The compute fleet has succeeded and is active.

              context -> (string)
                 Additional information about a compute  fleet.  Valid  values
                 include:

                 o CREATE_FAILED : The compute fleet has failed to create.

                 o UPDATE_FAILED : The compute fleet has failed to update.

              message -> (string)
                 A message associated with the status of a compute fleet.

          baseCapacity -> (integer)
              The  initial  number  of  machines allocated to the compute eet,
              which denes the number of builds that can run in parallel.

          environmentType -> (string)
              The environment type of the compute fleet.

              o The environment type ARM_CONTAINER is available  only  in  re-
                gions US East (N. Virginia), US East (Ohio), US West (Oregon),
                EU (Ireland), Asia Pacific  (Mumbai),  Asia  Pacific  (Tokyo),
                Asia  Pacific  (Singapore),  Asia Pacific (Sydney), EU (Frank-
                furt), and South America (So Paulo).

              o The environment type LINUX_CONTAINER is available only in  re-
                gions US East (N. Virginia), US East (Ohio), US West (Oregon),
                EU (Ireland), EU (Frankfurt), Asia Pacific (Tokyo),  Asia  Pa-
                cific  (Singapore),  Asia  Pacific (Sydney), South America (So
                Paulo), and Asia Pacific (Mumbai).

              o The environment type LINUX_GPU_CONTAINER is available only  in
                regions  US  East (N. Virginia), US East (Ohio), US West (Ore-
                gon), EU (Ireland), EU (Frankfurt), Asia Pacific (Tokyo),  and
                Asia Pacific (Sydney).

              o The  environment  type  MAC_ARM is available for Medium fleets
                only in regions US East (N. Virginia), US East (Ohio), US West
                (Oregon), Asia Pacific (Sydney), and EU (Frankfurt)

              o The  environment  type  MAC_ARM  is available for Large fleets
                only in regions US East (N. Virginia), US East (Ohio), US West
                (Oregon), and Asia Pacific (Sydney).

              o The  environment  type WINDOWS_SERVER_2019_CONTAINER is avail-
                able only in regions US East (N. Virginia), US East (Ohio), US
                West  (Oregon),  Asia  Pacific (Sydney), Asia Pacific (Tokyo),
                Asia Pacific (Mumbai) and EU (Ireland).

              o The environment type WINDOWS_SERVER_2022_CONTAINER  is  avail-
                able only in regions US East (N. Virginia), US East (Ohio), US
                West (Oregon), EU  (Ireland),  EU  (Frankfurt),  Asia  Pacific
                (Sydney),  Asia  Pacific  (Singapore),  Asia  Pacific (Tokyo),
                South America (So Paulo) and Asia Pacific (Mumbai).

              For more information, see Build environment compute types in the
              CodeBuild user guide .

          computeType -> (string)
              Information  about the compute resources the compute fleet uses.
              Available values include:

              o BUILD_GENERAL1_SMALL : Use up to 3 GB memory and 2  vCPUs  for
                builds.

              o BUILD_GENERAL1_MEDIUM  : Use up to 7 GB memory and 4 vCPUs for
                builds.

              o BUILD_GENERAL1_LARGE : Use up to 16 GB memory and 8 vCPUs  for
                builds, depending on your environment type.

              o BUILD_GENERAL1_XLARGE  :  Use  up to 70 GB memory and 36 vCPUs
                for builds, depending on your environment type.

              o BUILD_GENERAL1_2XLARGE : Use up to 145 GB  memory,  72  vCPUs,
                and  824  GB of SSD storage for builds. This compute type sup-
                ports Docker images up to 100 GB uncompressed.

              If you use BUILD_GENERAL1_SMALL :

              o For environment type LINUX_CONTAINER , you can use up to 3  GB
                memory and 2 vCPUs for builds.

              o For  environment  type LINUX_GPU_CONTAINER , you can use up to
                16 GB memory, 4 vCPUs, and 1 NVIDIA A10G Tensor Core  GPU  for
                builds.

              o For  environment  type  ARM_CONTAINER , you can use up to 4 GB
                memory and 2 vCPUs on ARM-based processors for builds.

              If you use BUILD_GENERAL1_LARGE :

              o For environment type LINUX_CONTAINER , you can use up to 15 GB
                memory and 8 vCPUs for builds.

              o For  environment  type LINUX_GPU_CONTAINER , you can use up to
                255 GB memory, 32 vCPUs, and 4  NVIDIA  Tesla  V100  GPUs  for
                builds.

              o For  environment  type ARM_CONTAINER , you can use up to 16 GB
                memory and 8 vCPUs on ARM-based processors for builds.

              For more information, see Build environment compute types in the
              CodeBuild User Guide.

          scalingConfiguration -> (structure)
              The scaling configuration of the compute fleet.

              scalingType -> (string)
                 The scaling type for a compute fleet.

              targetTrackingScalingConfigs -> (list)
                 A list of TargetTrackingScalingConfiguration objects.

                 (structure)
                     Defines  when a new instance is auto-scaled into the com-
                     pute fleet.

                     metricType -> (string)
                        The metric type to determine auto-scaling.

                     targetValue -> (double)
                        The value of metricType when to start scaling.

              maxCapacity -> (integer)
                 The maximum number of instances in the eet when auto-scaling.

              desiredCapacity -> (integer)
                 The desired number of instances in the eet when auto-scaling.

          overflowBehavior -> (string)
              The compute fleet overflow behavior.

              o For overflow behavior QUEUE , your  overflow  builds  need  to
                wait on the existing fleet instance to become available.

              o For  overflow behavior ON_DEMAND , your overflow builds run on
                CodeBuild on-demand.

              NOTE:
                 If you choose to set  your  overflow  behavior  to  on-demand
                 while  creating a VPC-connected fleet, make sure that you add
                 the required VPC permissions to your  project  service  role.
                 For  more  information, see Example policy statement to allow
                 CodeBuild access to Amazon Web Services services required  to
                 create a VPC network interface .

          vpcConfig -> (structure)
              Information about the VPC configuration that CodeBuild accesses.

              vpcId -> (string)
                 The ID of the Amazon VPC.

              subnets -> (list)
                 A list of one or more subnet IDs in your Amazon VPC.

                 (string)

              securityGroupIds -> (list)
                 A list of one or more security groups IDs in your Amazon VPC.

                 (string)

          imageId -> (string)
              The Amazon Machine Image (AMI) of the compute fleet.

          fleetServiceRole -> (string)
              The service role associated with the compute fleet. For more in-
              formation, see Allow a user to add a  permission  policy  for  a
              fleet service role in the CodeBuild User Guide .

          tags -> (list)
              A  list  of tag key and value pairs associated with this compute
              fleet.

              These tags are available for use by Amazon Web Services services
              that support CodeBuild build project tags.

              (structure)
                 A tag, consisting of a key and a value.

                 This tag is available for use by Amazon Web Services services
                 that support tags in CodeBuild.

                 key -> (string)
                     The tag's key.

                 value -> (string)
                     The tag's value.



                                                                CREATE-FLEET()
