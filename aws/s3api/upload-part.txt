UPLOAD-PART()                                                    UPLOAD-PART()



NAME
       upload-part -

DESCRIPTION
       Uploads a part in a multipart upload.

       NOTE:
          In  this  operation, you provide part data in your request. However,
          you have an option to specify your existing Amazon S3  object  as  a
          data source for the part you are uploading. To upload a part from an
          existing object, you use the UploadPartCopy operation.

       You must initiate a multipart upload (see CreateMultipartUpload  )  be-
       fore  you  can  upload  any part. In response to your initiate request,
       Amazon S3 returns an upload ID, a unique identifier, that you must  in-
       clude in your upload part request.

       Part numbers can be any number from 1 to 10,000, inclusive. A part num-
       ber uniquely identifies a part and also defines its position within the
       object being created. If you upload a new part using the same part num-
       ber that was used with a previous part, the previously uploaded part is
       overwritten.

       For  information  about maximum and minimum part sizes and other multi-
       part upload specifications, see Multipart upload limits in  the  Amazon
       S3 User Guide .

       To ensure that data is not corrupted when traversing the network, spec-
       ify the Content-MD5 header in the upload part request. Amazon S3 checks
       the  part  data  against  the provided MD5 value. If they do not match,
       Amazon S3 returns an error.

       If the upload request is signed with Signature Version 4,  then  Amazon
       Web  Services S3 uses the x-amz-content-sha256 header as a checksum in-
       stead of Content-MD5 . For  more  information  see  Authenticating  Re-
       quests:  Using  the Authorization Header (Amazon Web Services Signature
       Version 4) .
          Note: After you initiate multipart upload and  upload  one  or  more
          parts,  you  must either complete or abort multipart upload in order
          to stop getting charged for storage of the uploaded parts. Only  af-
          ter  you  either complete or abort multipart upload, Amazon S3 frees
          up the parts storage and stops charging you for the parts storage.

       For more information on multipart uploads, go to Multipart Upload Over-
       view in the Amazon S3 User Guide .

       For information on the permissions required to use the multipart upload
       API, go to Multipart Upload and Permissions in the Amazon S3 User Guide
       .

       Server-side  encryption  is  for data encryption at rest. Amazon S3 en-
       crypts your data as it writes it to disks in its data centers  and  de-
       crypts it when you access it. You have three mutually exclusive options
       to protect data using server-side encryption in Amazon S3, depending on
       how you choose to manage the encryption keys. Specifically, the encryp-
       tion key options are Amazon S3 managed keys (SSE-S3), Amazon  Web  Ser-
       vices KMS keys (SSE-KMS), and Customer-Provided Keys (SSE-C). Amazon S3
       encrypts data with server-side encryption using Amazon S3 managed  keys
       (SSE-S3)  by default. You can optionally tell Amazon S3 to encrypt data
       at rest using server-side encryption with other key options. The option
       you  use  depends on whether you want to use KMS keys (SSE-KMS) or pro-
       vide your own encryption key (SSE-C). If you choose to provide your own
       encryption  key,  the  request  headers you provide in the request must
       match the headers you used in the request to initiate the upload by us-
       ing   CreateMultipartUpload   .  For  more  information,  go  to  Using
       Server-Side Encryption in the Amazon S3 User Guide .

       Server-side encryption is supported by the S3 Multipart Upload actions.
       Unless  you  are  using a customer-provided encryption key (SSE-C), you
       don't need to specify the encryption parameters in each UploadPart  re-
       quest. Instead, you only need to specify the server-side encryption pa-
       rameters in the initial Initiate Multipart request. For  more  informa-
       tion, see CreateMultipartUpload .

       If  you  requested server-side encryption using a customer-provided en-
       cryption key (SSE-C) in your initiate  multipart  upload  request,  you
       must provide identical encryption information in each part upload using
       the following headers.

       o x-amz-server-side-encryption-customer-algorithm

       o x-amz-server-side-encryption-customer-key

       o x-amz-server-side-encryption-customer-key-MD5
          UploadPart has the following special errors:

       o

         o Code: NoSuchUpload

         o Cause: The specified multipart upload does not exist. The upload ID
           might  be  invalid, or the multipart upload might have been aborted
           or completed.

         o HTTP Status Code: 404 Not Found

         o SOAP Fault Code Prefix: Client

       The following operations are related to UploadPart :

       o CreateMultipartUpload

       o CompleteMultipartUpload

       o AbortMultipartUpload

       o ListParts

       o ListMultipartUploads

       See also: AWS API Documentation

SYNOPSIS
            upload-part
          [--body <value>]
          --bucket <value>
          [--content-length <value>]
          [--content-md5 <value>]
          [--checksum-algorithm <value>]
          [--checksum-crc32 <value>]
          [--checksum-crc32-c <value>]
          [--checksum-sha1 <value>]
          [--checksum-sha256 <value>]
          --key <value>
          --part-number <value>
          --upload-id <value>
          [--sse-customer-algorithm <value>]
          [--sse-customer-key <value>]
          [--sse-customer-key-md5 <value>]
          [--request-payer <value>]
          [--expected-bucket-owner <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --body (streaming blob)
          Object data.

          NOTE:
              This argument is of type: streaming blob. Its value must be  the
              path to a file (e.g. path/to/file) and must not be prefixed with
              file:// or fileb://

       --bucket (string)
          The name of the bucket to which the multipart upload was initiated.

          When using this action with an access point,  you  must  direct  re-
          quests to the access point hostname. The access point hostname takes
          the form AccessPointName -AccountId  .s3-accesspoint.*Region*  .ama-
          zonaws.com.  When using this action with an access point through the
          Amazon Web Services SDKs, you provide the access point ARN in  place
          of  the  bucket  name. For more information about access point ARNs,
          see Using access points in the Amazon S3 User Guide .

          When you use this action with Amazon S3 on Outposts, you must direct
          requests to the S3 on Outposts hostname. The S3 on Outposts hostname
          takes the form `` AccessPointName -AccountId  .*outpostID*  .s3-out-
          posts.*Region*  .amazonaws.com``  . When you use this action with S3
          on Outposts through the Amazon Web Services SDKs,  you  provide  the
          Outposts  access point ARN in place of the bucket name. For more in-
          formation about S3 on Outposts ARNs, see What is S3 on Outposts?  in
          the Amazon S3 User Guide .

       --content-length (long)
          Size of the body in bytes. This parameter is useful when the size of
          the body cannot be determined automatically.

       --content-md5 (string)
          The base64-encoded 128-bit MD5 digest of the part data. This parame-
          ter  is auto-populated when using the command from the CLI. This pa-
          rameter is required if object lock parameters are specified.

       --checksum-algorithm (string)
          Indicates the algorithm used to create the checksum for  the  object
          when  using  the  SDK.  This  header will not provide any additional
          functionality if not using the SDK. When sending this header,  there
          must be a corresponding x-amz-checksum or x-amz-trailer header sent.
          Otherwise, Amazon S3 fails the request with the HTTP status code 400
          Bad Request . For more information, see Checking object integrity in
          the Amazon S3 User Guide .

          If you provide an individual checksum, Amazon S3  ignores  any  pro-
          vided ChecksumAlgorithm parameter.

          This  checksum algorithm must be the same for all parts and it match
          the checksum value supplied in the CreateMultipartUpload request.

          Possible values:

          o CRC32

          o CRC32C

          o SHA1

          o SHA256

       --checksum-crc32 (string)
          This header can be used as a data integrity check to verify that the
          data received is the same data that was originally sent. This header
          specifies the base64-encoded, 32-bit CRC32 checksum of  the  object.
          For more information, see Checking object integrity in the Amazon S3
          User Guide .

       --checksum-crc32-c (string)
          This header can be used as a data integrity check to verify that the
          data received is the same data that was originally sent. This header
          specifies the base64-encoded, 32-bit CRC32C checksum of the  object.
          For more information, see Checking object integrity in the Amazon S3
          User Guide .

       --checksum-sha1 (string)
          This header can be used as a data integrity check to verify that the
          data received is the same data that was originally sent. This header
          specifies the base64-encoded, 160-bit SHA-1 digest  of  the  object.
          For more information, see Checking object integrity in the Amazon S3
          User Guide .

       --checksum-sha256 (string)
          This header can be used as a data integrity check to verify that the
          data received is the same data that was originally sent. This header
          specifies the base64-encoded, 256-bit SHA-256 digest of the  object.
          For more information, see Checking object integrity in the Amazon S3
          User Guide .

       --key (string)
          Object key for which the multipart upload was initiated.

       --part-number (integer)
          Part number of part being uploaded. This is a positive  integer  be-
          tween 1 and 10,000.

       --upload-id (string)
          Upload  ID  identifying the multipart upload whose part is being up-
          loaded.

       --sse-customer-algorithm (string)
          Specifies the algorithm to use to when encrypting  the  object  (for
          example, AES256).

       --sse-customer-key (string)
          Specifies  the customer-provided encryption key for Amazon S3 to use
          in encrypting data. This value is used to store the object and  then
          it  is  discarded;  Amazon S3 does not store the encryption key. The
          key must be appropriate for use with the algorithm specified in  the
          x-amz-server-side-encryption-customer-algorithm  header  . This must
          be the same encryption key specified in the initiate  multipart  up-
          load request.

       --sse-customer-key-md5 (string)
          Specifies  the 128-bit MD5 digest of the encryption key according to
          RFC 1321. Amazon S3 uses this header for a message  integrity  check
          to ensure that the encryption key was transmitted without error.

       --request-payer (string)
          Confirms  that the requester knows that they will be charged for the
          request. Bucket owners need not specify this parameter in their  re-
          quests. If either the source or destination Amazon S3 bucket has Re-
          quester Pays enabled,  the  requester  will  pay  for  corresponding
          charges  to  copy  the object. For information about downloading ob-
          jects from Requester Pays buckets, see Downloading  Objects  in  Re-
          quester Pays Buckets in the Amazon S3 User Guide .

          Possible values:

          o requester

       --expected-bucket-owner (string)
          The  account ID of the expected bucket owner. If the bucket is owned
          by a different account, the request fails with the HTTP status  code
          403 Forbidden (access denied).

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

EXAMPLES
       NOTE:
          To use the following examples, you must have the AWS  CLI  installed
          and  configured.  See  the Getting started guide in the AWS CLI User
          Guide for more information.

          Unless otherwise  stated,  all  examples  have  unix-like  quotation
          rules.  These  examples  will  need to be adapted to your terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       The following command uploads the first part in a multipart upload ini-
       tiated with the create-multipart-upload command:

          aws s3api upload-part --bucket my-bucket --key 'multipart/01' --part-number 1 --body part01 --upload-id  "dfRtDYU0WWCCcH43C3WFbkRONycyCpTJJvxu2i5GYkZljF.Yxwh6XG7WfS2vC4to6HiV6Yjlx.cph0gtNBtJ8P3URCSbB7rjxI5iEwVDmgaXZOGgkk5nVTW16HOQ5l0R"

       The body option takes the name or path of a local file for  upload  (do
       not  use  the file:// prefix). The minimum part size is 5 MB. Upload ID
       is returned by create-multipart-upload and can also be  retrieved  with
       list-multipart-uploads.  Bucket  and  key are specified when you create
       the multipart upload.

       Output:

          {
              "ETag": "\"e868e0f4719e394144ef36531ee6824c\""
          }

       Save the ETag value of each part for later. They are required  to  com-
       plete the multipart upload.

OUTPUT
       ServerSideEncryption -> (string)
          The  server-side  encryption algorithm used when storing this object
          in Amazon S3 (for example, AES256 , aws:kms ).

       ETag -> (string)
          Entity tag for the uploaded object.

       ChecksumCRC32 -> (string)
          The base64-encoded, 32-bit CRC32 checksum of the object.  This  will
          only  be  present if it was uploaded with the object. With multipart
          uploads, this may not be a checksum value of the  object.  For  more
          information  about  how  checksums are calculated with multipart up-
          loads, see Checking object integrity in the Amazon S3 User Guide .

       ChecksumCRC32C -> (string)
          The base64-encoded, 32-bit CRC32C checksum of the object. This  will
          only  be  present if it was uploaded with the object. With multipart
          uploads, this may not be a checksum value of the  object.  For  more
          information  about  how  checksums are calculated with multipart up-
          loads, see Checking object integrity in the Amazon S3 User Guide .

       ChecksumSHA1 -> (string)
          The base64-encoded, 160-bit SHA-1 digest of the  object.  This  will
          only  be  present if it was uploaded with the object. With multipart
          uploads, this may not be a checksum value of the  object.  For  more
          information  about  how  checksums are calculated with multipart up-
          loads, see Checking object integrity in the Amazon S3 User Guide .

       ChecksumSHA256 -> (string)
          The base64-encoded, 256-bit SHA-256 digest of the object. This  will
          only  be  present if it was uploaded with the object. With multipart
          uploads, this may not be a checksum value of the  object.  For  more
          information  about  how  checksums are calculated with multipart up-
          loads, see Checking object integrity in the Amazon S3 User Guide .

       SSECustomerAlgorithm -> (string)
          If server-side encryption with a  customer-provided  encryption  key
          was  requested, the response will include this header confirming the
          encryption algorithm used.

       SSECustomerKeyMD5 -> (string)
          If server-side encryption with a  customer-provided  encryption  key
          was  requested,  the  response  will  include this header to provide
          round-trip message integrity verification of  the  customer-provided
          encryption key.

       SSEKMSKeyId -> (string)
          If  present,  specifies  the  ID of the Key Management Service (KMS)
          symmetric encryption customer managed key was used for the object.

       BucketKeyEnabled -> (boolean)
          Indicates whether the multipart upload uses an  S3  Bucket  Key  for
          server-side  encryption  with  Key  Management  Service  (KMS)  keys
          (SSE-KMS).

       RequestCharged -> (string)
          If present, indicates that the requester  was  successfully  charged
          for the request.



                                                                 UPLOAD-PART()
