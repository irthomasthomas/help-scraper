CREATE-MULTIPART-UPLOAD()                            CREATE-MULTIPART-UPLOAD()



NAME
       create-multipart-upload -

DESCRIPTION
       This action initiates a multipart upload and returns an upload ID. This
       upload ID is used to associate all of the parts in the specific  multi-
       part  upload. You specify this upload ID in each of your subsequent up-
       load part requests (see UploadPart ). You also include this  upload  ID
       in  the  final request to either complete or abort the multipart upload
       request. For more information about multipart  uploads,  see  Multipart
       Upload Overview in the Amazon S3 User Guide .

       NOTE:
          After  you initiate a multipart upload and upload one or more parts,
          to stop being charged for storing the uploaded parts, you  must  ei-
          ther  complete or abort the multipart upload. Amazon S3 frees up the
          space used to store the parts and stops  charging  you  for  storing
          them only after you either complete or abort a multipart upload.

       If  you  have configured a lifecycle rule to abort incomplete multipart
       uploads, the created multipart upload must be completed within the num-
       ber of days specified in the bucket lifecycle configuration. Otherwise,
       the incomplete multipart upload becomes eligible for  an  abort  action
       and  Amazon  S3  aborts the multipart upload. For more information, see
       Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Configu-
       ration .

       NOTE:

          o Directory  buckets  -  S3  Lifecycle is not supported by directory
            buckets.

          o Directory buckets - For directory buckets, you must make  requests
            for this API operation to the Zonal endpoint. These endpoints sup-
            port virtual-hosted-style requests in the format
            ``
            https://bucket_name    .s3express-az_id     .*region*     .amazon-
            aws.com/key-name  ``  . Path-style requests are not supported. For
            more information, see Regional and Zonal endpoints in  the  Amazon
            S3 User Guide .

          System Message: WARNING/2 (<string>:, line 43)
            Inline literal start-string without end-string.

          Request signing

       For  request  signing, multipart upload is just a series of regular re-
       quests. You initiate a multipart upload, send one or more  requests  to
       upload  parts, and then complete the multipart upload process. You sign
       each request individually. There is nothing special about signing  mul-
       tipart  upload  requests.  For  more  information  about  signing,  see
       Authenticating Requests (Amazon Web Services Signature  Version  4)  in
       the Amazon S3 User Guide .
          Permissions

       o General  purpose  bucket  permissions - To perform a multipart upload
         with encryption using an Key Management Service (KMS)  KMS  key,  the
         requester  must  have permission to the kms:Decrypt and kms:Generate-
         DataKey actions on the key. The requester must also have  permissions
         for the kms:GenerateDataKey action for the CreateMultipartUpload API.
         Then, the requester needs permissions for the kms:Decrypt  action  on
         the  UploadPart  and  UploadPartCopy  APIs. These permissions are re-
         quired because Amazon S3 must decrypt and  read  data  from  the  en-
         crypted file parts before it completes the multipart upload. For more
         information, see Multipart upload API and permissions and  Protecting
         data using server-side encryption with Amazon Web Services KMS in the
         Amazon S3 User Guide .

       o Directory bucket permissions - To grant access to this API  operation
         on  a directory bucket, we recommend that you use the ` CreateSession
         https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html`__
         API  operation  for  session-based  authorization.  Specifically, you
         grant the s3express:CreateSession permission to the directory  bucket
         in  a  bucket  policy or an IAM identity-based policy. Then, you make
         the CreateSession API call on the bucket to obtain a  session  token.
         With  the  session token in your request header, you can make API re-
         quests to this operation. After the session token expires,  you  make
         another  CreateSession  API  call to generate a new session token for
         use. Amazon Web Services CLI or SDKs create session and  refresh  the
         session  token  automatically  to  avoid service interruptions when a
         session expires. For more information about authorization, see ` Cre-
         ateSession
         https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html`__
         .

         Encryption

       o General  purpose buckets - Server-side encryption is for data encryp-
         tion at rest. Amazon S3 encrypts your data as it writes it  to  disks
         in its data centers and decrypts it when you access it. Amazon S3 au-
         tomatically encrypts all new objects  that  are  uploaded  to  an  S3
         bucket.  When  doing a multipart upload, if you don't specify encryp-
         tion information in your request, the encryption setting of  the  up-
         loaded  parts  is  set to the default encryption configuration of the
         destination bucket. By default, all buckets have a base level of  en-
         cryption  configuration  that uses server-side encryption with Amazon
         S3 managed keys (SSE-S3). If the destination bucket has a default en-
         cryption  configuration  that uses server-side encryption with an Key
         Management Service (KMS) key (SSE-KMS), or  a  customer-provided  en-
         cryption  key (SSE-C), Amazon S3 uses the corresponding KMS key, or a
         customer-provided key to encrypt the uploaded parts. When you perform
         a  CreateMultipartUpload  operation,  if  you want to use a different
         type of encryption setting for the uploaded parts,  you  can  request
         that  Amazon  S3  encrypts the object with a different encryption key
         (such as an Amazon S3 managed key, a KMS key, or a  customer-provided
         key).  When  the encryption setting in your request is different from
         the default encryption configuration of the destination  bucket,  the
         encryption setting in your request takes precedence. If you choose to
         provide your own encryption key, the request headers you  provide  in
         UploadPart  and  UploadPartCopy  requests  must match the headers you
         used in the CreateMultipartUpload request.

         o Use KMS keys (SSE-KMS) that include the Amazon Web Services managed
           key  (aws/s3  ) and KMS customer managed keys stored in Key Manage-
           ment Service (KMS)  If you want Amazon Web Services to  manage  the
           keys used to encrypt data, specify the following headers in the re-
           quest.

           o x-amz-server-side-encryption

           o x-amz-server-side-encryption-aws-kms-key-id

           o x-amz-server-side-encryption-context

         NOTE:

            o If you specify x-amz-server-side-encryption:aws:kms , but  don't
              provide  x-amz-server-side-encryption-aws-kms-key-id , Amazon S3
              uses the Amazon Web Services managed key (aws/s3 key) in KMS  to
              protect the data.

            o To perform a multipart upload with encryption by using an Amazon
              Web Services KMS key, the requester must have permission to  the
              kms:Decrypt  and  kms:GenerateDataKey* actions on the key. These
              permissions are required because Amazon S3 must decrypt and read
              data  from the encrypted file parts before it completes the mul-
              tipart upload. For more information, see  Multipart  upload  API
              and permissions and Protecting data using server-side encryption
              with Amazon Web Services KMS in the Amazon S3 User Guide .

            o If your Identity and Access Management (IAM) user or role is  in
              the  same  Amazon  Web Services account as the KMS key, then you
              must have these permissions on the key policy. If your IAM  user
              or  role  is  in a different account from the key, then you must
              have the permissions on both the key policy and your IAM user or
              role.

            o All  GET and PUT requests for an object protected by KMS fail if
              you don't make them by using Secure Sockets Layer (SSL),  Trans-
              port  Layer Security (TLS), or Signature Version 4. For informa-
              tion about configuring any of the  officially  supported  Amazon
              Web  Services  SDKs  and Amazon Web Services CLI, see Specifying
              the Signature Version in Request Authentication in the Amazon S3
              User Guide .

         For  more  information  about  server-side  encryption  with KMS keys
         (SSE-KMS), see Protecting Data Using Server-Side Encryption with  KMS
         keys in the Amazon S3 User Guide .

         o Use  customer-provided encryption keys (SSE-C)  If you want to man-
           age your own encryption keys, provide all the following headers  in
           the request.

           o x-amz-server-side-encryption-customer-algorithm

           o x-amz-server-side-encryption-customer-key

           o x-amz-server-side-encryption-customer-key-MD5

         For  more information about server-side encryption with customer-pro-
         vided encryption keys (SSE-C), see Protecting data using  server-side
         encryption with customer-provided encryption keys (SSE-C) in the Ama-
         zon S3 User Guide .

       o Directory buckets - For directory buckets, there are  only  two  sup-
         ported  options  for  server-side  encryption: server-side encryption
         with Amazon S3 managed keys (SSE-S3) (AES256 )  and  server-side  en-
         cryption  with  KMS  keys (SSE-KMS) (aws:kms ). We recommend that the
         bucket's default encryption uses the desired encryption configuration
         and  you don't override the bucket default encryption in your Create-
         Session requests or PUT object requests. Then, new objects are  auto-
         matically  encrypted  with  the desired encryption settings. For more
         information, see Protecting data with server-side encryption  in  the
         Amazon  S3  User  Guide  .  For more information about the encryption
         overriding behaviors in directory buckets, see Specifying server-side
         encryption  with  KMS  for new object uploads . In the Zonal endpoint
         API calls (except CopyObject and UploadPartCopy ) using the REST API,
         the  encryption  request  headers  must match the encryption settings
         that are specified in the CreateSession request. You  can't  override
         the values of the encryption settings (x-amz-server-side-encryption ,
         x-amz-server-side-encryption-aws-kms-key-id  ,  x-amz-server-side-en-
         cryption-context  ,  and  x-amz-server-side-encryption-bucket-key-en-
         abled ) that are specified in the CreateSession  request.  You  don't
         need  to explicitly specify these encryption settings values in Zonal
         endpoint API calls, and Amazon S3 will use  the  encryption  settings
         values  from  the CreateSession request to protect new objects in the
         directory bucket.

       NOTE:
          When you use the CLI or the Amazon Web Services SDKs, for CreateSes-
          sion  ,  the  session token refreshes automatically to avoid service
          interruptions when a session expires. The CLI or the Amazon Web Ser-
          vices SDKs use the bucket's default encryption configuration for the
          CreateSession request. It's not supported to override the encryption
          settings  values  in the CreateSession request. So in the Zonal end-
          point API calls (except CopyObject and UploadPartCopy ), the encryp-
          tion request headers must match the default encryption configuration
          of the directory bucket.

       NOTE:
                 For directory buckets, when you perform  a  CreateMultipartU-
                 pload  operation and an UploadPartCopy operation, the request
                 headers you provide in the CreateMultipartUpload request must
                 match the default encryption configuration of the destination
                 bucket.

              HTTP Host header syntax

          Directory buckets - The HTTP Host header syntax  is  ``  Bucket_name
          .s3express-az_id .*region* .amazonaws.com`` .

       The following operations are related to CreateMultipartUpload :

       o UploadPart

       o CompleteMultipartUpload

       o AbortMultipartUpload

       o ListParts

       o ListMultipartUploads

       See also: AWS API Documentation

SYNOPSIS
            create-multipart-upload
          [--acl <value>]
          --bucket <value>
          [--cache-control <value>]
          [--content-disposition <value>]
          [--content-encoding <value>]
          [--content-language <value>]
          [--content-type <value>]
          [--expires <value>]
          [--grant-full-control <value>]
          [--grant-read <value>]
          [--grant-read-acp <value>]
          [--grant-write-acp <value>]
          --key <value>
          [--metadata <value>]
          [--server-side-encryption <value>]
          [--storage-class <value>]
          [--website-redirect-location <value>]
          [--sse-customer-algorithm <value>]
          [--sse-customer-key <value>]
          [--sse-customer-key-md5 <value>]
          [--ssekms-key-id <value>]
          [--ssekms-encryption-context <value>]
          [--bucket-key-enabled | --no-bucket-key-enabled]
          [--request-payer <value>]
          [--tagging <value>]
          [--object-lock-mode <value>]
          [--object-lock-retain-until-date <value>]
          [--object-lock-legal-hold-status <value>]
          [--expected-bucket-owner <value>]
          [--checksum-algorithm <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --acl (string)
          The  canned  ACL to apply to the object. Amazon S3 supports a set of
          predefined ACLs, known as canned ACLs . Each canned ACL has a prede-
          fined  set  of  grantees  and permissions. For more information, see
          Canned ACL in the Amazon S3 User Guide .

          By default, all objects are private. Only the owner has full  access
          control.  When uploading an object, you can grant access permissions
          to individual Amazon Web Services accounts or to  predefined  groups
          defined by Amazon S3. These permissions are then added to the access
          control list (ACL) on the new  object.  For  more  information,  see
          Using  ACLs  .  One  way  to grant the permissions using the request
          headers is to specify  a  canned  ACL  with  the  x-amz-acl  request
          header.

          NOTE:

              o This functionality is not supported for directory buckets.

              o This functionality is not supported for Amazon S3 on Outposts.

          Possible values:

          o private

          o public-read

          o public-read-write

          o authenticated-read

          o aws-exec-read

          o bucket-owner-read

          o bucket-owner-full-control

       --bucket (string)
          The  name  of the bucket where the multipart upload is initiated and
          where the object is uploaded.
              Directory buckets - When you use this operation with a directory
              bucket, you must use virtual-hosted-style requests in the format
              `` Bucket_name  .s3express-az_id  .*region*  .amazonaws.com``  .
              Path-style  requests  are  not supported. Directory bucket names
              must be unique in the chosen  Availability  Zone.  Bucket  names
              must follow the format `` bucket_base_name --az-id --x-s3`` (for
              example, `` DOC-EXAMPLE-BUCKET --usw2-az1 --x-s3`` ). For infor-
              mation  about  bucket  naming restrictions, see Directory bucket
              naming rules in the Amazon S3 User Guide .

              Access points - When you use this action with an  access  point,
              you  must  provide the alias of the access point in place of the
              bucket name or specify the access point ARN. When using the  ac-
              cess  point  ARN,  you  must direct requests to the access point
              hostname. The access point hostname takes the form  AccessPoint-
              Name  -AccountId  .s3-accesspoint.*Region*  .amazonaws.com. When
              using this action with an access point through  the  Amazon  Web
              Services  SDKs, you provide the access point ARN in place of the
              bucket name. For more information about access point  ARNs,  see
              Using access points in the Amazon S3 User Guide .

          NOTE:
                 Access  points  and  Object Lambda access points are not sup-
                 ported by directory buckets.

              S3 on Outposts - When you use this action with Amazon S3 on Out-
              posts,  you must direct requests to the S3 on Outposts hostname.
              The S3 on Outposts hostname takes the  form  ``  AccessPointName
              -AccountId .*outpostID* .s3-outposts.*Region* .amazonaws.com`` .
              When you use this action with S3 on Outposts through the  Amazon
              Web  Services SDKs, you provide the Outposts access point ARN in
              place of the bucket name. For more information about S3 on  Out-
              posts  ARNs,  see  What is S3 on Outposts? in the Amazon S3 User
              Guide .

       --cache-control (string)
          Specifies caching behavior along the request/reply chain.

       --content-disposition (string)
          Specifies presentational information for the object.

       --content-encoding (string)
          Specifies what content encodings have been applied to the object and
          thus  what  decoding  mechanisms  must  be applied to obtain the me-
          dia-type referenced by the Content-Type header field.

          NOTE:
              For directory buckets, only the aws-chunked value  is  supported
              in this header field.

       --content-language (string)
          The language that the content is in.

       --content-type (string)
          A standard MIME type describing the format of the object data.

       --expires (timestamp)
          The date and time at which the object is no longer cacheable.

       --grant-full-control (string)
          Specify  access  permissions  explicitly  to  give the grantee READ,
          READ_ACP, and WRITE_ACP permissions on the object.

          By default, all objects are private. Only the owner has full  access
          control.  When  uploading  an object, you can use this header to ex-
          plicitly grant access permissions to specific  Amazon  Web  Services
          accounts  or  groups.  This header maps to specific permissions that
          Amazon S3 supports in an ACL. For more information, see Access  Con-
          trol List (ACL) Overview in the Amazon S3 User Guide .

          You specify each grantee as a type=value pair, where the type is one
          of the following:

          o id  if the value specified is the canonical user ID of  an  Amazon
            Web Services account

          o uri  if you are granting permissions to a predefined group

          o emailAddress   if  the  value specified is the email address of an
            Amazon Web Services account

          NOTE:
                 Using email addresses to specify a grantee is only  supported
                 in the following Amazon Web Services Regions:

                     o US East (N. Virginia)

                     o US West (N. California)

                     o US West (Oregon)

                     o Asia Pacific (Singapore)

                     o Asia Pacific (Sydney)

                     o Asia Pacific (Tokyo)

                     o Europe (Ireland)

                     o South America (So Paulo)

              For a list of all the Amazon S3 supported Regions and endpoints,
              see Regions and Endpoints in the  Amazon  Web  Services  General
              Reference.

          For example, the following x-amz-grant-read header grants the Amazon
          Web Services accounts identified by account IDs permissions to  read
          object data and its metadata:
              x-amz-grant-read: id="11112222333", id="444455556666"

          NOTE:

              o This functionality is not supported for directory buckets.

              o This functionality is not supported for Amazon S3 on Outposts.

       --grant-read (string)
          Specify  access  permissions explicitly to allow grantee to read the
          object data and its metadata.

          By default, all objects are private. Only the owner has full  access
          control.  When  uploading  an object, you can use this header to ex-
          plicitly grant access permissions to specific  Amazon  Web  Services
          accounts  or  groups.  This header maps to specific permissions that
          Amazon S3 supports in an ACL. For more information, see Access  Con-
          trol List (ACL) Overview in the Amazon S3 User Guide .

          You specify each grantee as a type=value pair, where the type is one
          of the following:

          o id  if the value specified is the canonical user ID of  an  Amazon
            Web Services account

          o uri  if you are granting permissions to a predefined group

          o emailAddress   if  the  value specified is the email address of an
            Amazon Web Services account

          NOTE:
                 Using email addresses to specify a grantee is only  supported
                 in the following Amazon Web Services Regions:

                     o US East (N. Virginia)

                     o US West (N. California)

                     o US West (Oregon)

                     o Asia Pacific (Singapore)

                     o Asia Pacific (Sydney)

                     o Asia Pacific (Tokyo)

                     o Europe (Ireland)

                     o South America (So Paulo)

              For a list of all the Amazon S3 supported Regions and endpoints,
              see Regions and Endpoints in the  Amazon  Web  Services  General
              Reference.

          For example, the following x-amz-grant-read header grants the Amazon
          Web Services accounts identified by account IDs permissions to  read
          object data and its metadata:
              x-amz-grant-read: id="11112222333", id="444455556666"

          NOTE:

              o This functionality is not supported for directory buckets.

              o This functionality is not supported for Amazon S3 on Outposts.

       --grant-read-acp (string)
          Specify  access permissions explicitly to allows grantee to read the
          object ACL.

          By default, all objects are private. Only the owner has full  access
          control.  When  uploading  an object, you can use this header to ex-
          plicitly grant access permissions to specific  Amazon  Web  Services
          accounts  or  groups.  This header maps to specific permissions that
          Amazon S3 supports in an ACL. For more information, see Access  Con-
          trol List (ACL) Overview in the Amazon S3 User Guide .

          You specify each grantee as a type=value pair, where the type is one
          of the following:

          o id  if the value specified is the canonical user ID of  an  Amazon
            Web Services account

          o uri  if you are granting permissions to a predefined group

          o emailAddress   if  the  value specified is the email address of an
            Amazon Web Services account

          NOTE:
                 Using email addresses to specify a grantee is only  supported
                 in the following Amazon Web Services Regions:

                     o US East (N. Virginia)

                     o US West (N. California)

                     o US West (Oregon)

                     o Asia Pacific (Singapore)

                     o Asia Pacific (Sydney)

                     o Asia Pacific (Tokyo)

                     o Europe (Ireland)

                     o South America (So Paulo)

              For a list of all the Amazon S3 supported Regions and endpoints,
              see Regions and Endpoints in the  Amazon  Web  Services  General
              Reference.

          For example, the following x-amz-grant-read header grants the Amazon
          Web Services accounts identified by account IDs permissions to  read
          object data and its metadata:
              x-amz-grant-read: id="11112222333", id="444455556666"

          NOTE:

              o This functionality is not supported for directory buckets.

              o This functionality is not supported for Amazon S3 on Outposts.

       --grant-write-acp (string)
          Specify  access  permissions  explicitly  to allows grantee to allow
          grantee to write the ACL for the applicable object.

          By default, all objects are private. Only the owner has full  access
          control.  When  uploading  an object, you can use this header to ex-
          plicitly grant access permissions to specific  Amazon  Web  Services
          accounts  or  groups.  This header maps to specific permissions that
          Amazon S3 supports in an ACL. For more information, see Access  Con-
          trol List (ACL) Overview in the Amazon S3 User Guide .

          You specify each grantee as a type=value pair, where the type is one
          of the following:

          o id  if the value specified is the canonical user ID of  an  Amazon
            Web Services account

          o uri  if you are granting permissions to a predefined group

          o emailAddress   if  the  value specified is the email address of an
            Amazon Web Services account

          NOTE:
                 Using email addresses to specify a grantee is only  supported
                 in the following Amazon Web Services Regions:

                     o US East (N. Virginia)

                     o US West (N. California)

                     o US West (Oregon)

                     o Asia Pacific (Singapore)

                     o Asia Pacific (Sydney)

                     o Asia Pacific (Tokyo)

                     o Europe (Ireland)

                     o South America (So Paulo)

              For a list of all the Amazon S3 supported Regions and endpoints,
              see Regions and Endpoints in the  Amazon  Web  Services  General
              Reference.

          For example, the following x-amz-grant-read header grants the Amazon
          Web Services accounts identified by account IDs permissions to  read
          object data and its metadata:
              x-amz-grant-read: id="11112222333", id="444455556666"

          NOTE:

              o This functionality is not supported for directory buckets.

              o This functionality is not supported for Amazon S3 on Outposts.

       --key (string)
          Object key for which the multipart upload is to be initiated.

       --metadata (map)
          A map of metadata to store with the object in S3.

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --server-side-encryption (string)
          The server-side encryption algorithm used when you store this object
          in Amazon S3 (for example, AES256 , aws:kms ).

          o Directory buckets - For directory buckets, there are only two sup-
            ported  options for server-side encryption: server-side encryption
            with Amazon S3 managed keys (SSE-S3) (AES256 ) and server-side en-
            cryption with KMS keys (SSE-KMS) (aws:kms ). We recommend that the
            bucket's default encryption uses the desired encryption configura-
            tion  and you don't override the bucket default encryption in your
            CreateSession requests or PUT object requests. Then,  new  objects
            are  automatically encrypted with the desired encryption settings.
            For more information, see Protecting data with server-side encryp-
            tion  in the Amazon S3 User Guide . For more information about the
            encryption  overriding  behaviors  in   directory   buckets,   see
            Specifying  server-side encryption with KMS for new object uploads
            .   In  the  Zonal  endpoint  API  calls  (except  CopyObject  and
            UploadPartCopy  ) using the REST API, the encryption request head-
            ers must match the encryption settings that are specified  in  the
            CreateSession  request.  You  can't override the values of the en-
            cryption      settings       (x-amz-server-side-encryption       ,
            x-amz-server-side-encryption-aws-kms-key-id                      ,
            x-amz-server-side-encryption-context ,  and  x-amz-server-side-en-
            cryption-bucket-key-enabled ) that are specified in the CreateSes-
            sion request. You don't need to explicitly specify  these  encryp-
            tion  settings  values  in Zonal endpoint API calls, and Amazon S3
            will use the encryption settings values from the CreateSession re-
            quest to protect new objects in the directory bucket.

          NOTE:
              When  you  use the CLI or the Amazon Web Services SDKs, for Cre-
              ateSession , the session token refreshes automatically to  avoid
              service  interruptions  when  a  session expires. The CLI or the
              Amazon Web Services SDKs use  the  bucket's  default  encryption
              configuration  for the CreateSession request. It's not supported
              to override the encryption settings values in the  CreateSession
              request.  So  in the Zonal endpoint API calls (except CopyObject
              and UploadPartCopy ), the encryption request headers must  match
              the default encryption configuration of the directory bucket.

          Possible values:

          o AES256

          o aws:kms

          o aws:kms:dsse

       --storage-class (string)
          By default, Amazon S3 uses the STANDARD Storage Class to store newly
          created objects. The STANDARD storage class provides high durability
          and high availability. Depending on performance needs, you can spec-
          ify a different Storage Class. For  more  information,  see  Storage
          Classes in the Amazon S3 User Guide .

          NOTE:

              o For  directory  buckets,  only the S3 Express One Zone storage
                class is supported to store newly created objects.

              o Amazon S3 on Outposts only uses the OUTPOSTS Storage Class.

          Possible values:

          o STANDARD

          o REDUCED_REDUNDANCY

          o STANDARD_IA

          o ONEZONE_IA

          o INTELLIGENT_TIERING

          o GLACIER

          o DEEP_ARCHIVE

          o OUTPOSTS

          o GLACIER_IR

          o SNOW

          o EXPRESS_ONEZONE

       --website-redirect-location (string)
          If the bucket is configured as a  website,  redirects  requests  for
          this  object  to another object in the same bucket or to an external
          URL. Amazon S3 stores the value of this header in the  object  meta-
          data.

          NOTE:
              This functionality is not supported for directory buckets.

       --sse-customer-algorithm (string)
          Specifies the algorithm to use when encrypting the object (for exam-
          ple, AES256).

          NOTE:
              This functionality is not supported for directory buckets.

       --sse-customer-key (string)
          Specifies the customer-provided encryption key for Amazon S3 to  use
          in  encrypting data. This value is used to store the object and then
          it is discarded; Amazon S3 does not store the  encryption  key.  The
          key  must be appropriate for use with the algorithm specified in the
          x-amz-server-side-encryption-customer-algorithm header.

          NOTE:
              This functionality is not supported for directory buckets.

       --sse-customer-key-md5 (string)
          Specifies the 128-bit MD5 digest of the customer-provided encryption
          key  according to RFC 1321. Amazon S3 uses this header for a message
          integrity check to ensure that the encryption  key  was  transmitted
          without error.

          NOTE:
              This functionality is not supported for directory buckets.

       --ssekms-key-id (string)
          Specifies  the KMS key ID (Key ID, Key ARN, or Key Alias) to use for
          object encryption. If the KMS key doesn't exist in the same  account
          that's  issuing  the  command, you must use the full Key ARN not the
          Key ID.
              General purpose buckets - If you  specify  x-amz-server-side-en-
              cryption  with  aws:kms  or aws:kms:dsse , this header specifies
              the ID (Key ID, Key ARN, or Key Alias) of the KMS key to use. If
              you      specify     x-amz-server-side-encryption:aws:kms     or
              x-amz-server-side-encryption:aws:kms:dsse , but do  not  provide
              x-amz-server-side-encryption-aws-kms-key-id , Amazon S3 uses the
              Amazon Web Services managed key (aws/s3 ) to protect the data.

              Directory buckets - If you specify  x-amz-server-side-encryption
              with  aws:kms  , the x-amz-server-side-encryption-aws-kms-key-id
              header is implicitly assigned the ID of the  KMS  symmetric  en-
              cryption  customer managed key that's configured for your direc-
              tory bucket's default encryption setting. If you want to specify
              the  x-amz-server-side-encryption-aws-kms-key-id  header explic-
              itly, you can only specify it with the ID (Key ID or Key ARN) of
              the  KMS  customer managed key that's configured for your direc-
              tory bucket's default encryption setting. Otherwise, you get  an
              HTTP  400 Bad Request error. Only use the key ID or key ARN. The
              key alias format of the KMS key isn't  supported.  Your  SSE-KMS
              configuration can only support 1 customer managed key per direc-
              tory bucket for the lifetime of the bucket. The Amazon Web  Ser-
              vices managed key (aws/s3 ) isn't supported.

       --ssekms-encryption-context (string)
          Specifies  the Amazon Web Services KMS Encryption Context to use for
          object encryption. The value of  this  header  is  a  Base64-encoded
          string  of  a UTF-8 encoded JSON, which contains the encryption con-
          text as key-value pairs.
              Directory buckets - You can optionally provide an  explicit  en-
              cryption context value. The value must match the default encryp-
              tion context - the bucket Amazon Resource Name (ARN).  An  addi-
              tional encryption context value is not supported.

       --bucket-key-enabled | --no-bucket-key-enabled (boolean)
          Specifies  whether  Amazon S3 should use an S3 Bucket Key for object
          encryption with server-side encryption using Key Management  Service
          (KMS) keys (SSE-KMS).
              General  purpose  buckets  -  Setting this header to true causes
              Amazon S3 to use an S3 Bucket Key  for  object  encryption  with
              SSE-KMS.  Also, specifying this header with a PUT action doesn't
              affect bucket-level settings for S3 Bucket Key.

              Directory buckets - S3 Bucket Keys are always  enabled  for  GET
              and  PUT  operations in a directory bucket and cant be disabled.
              S3 Bucket Keys aren't supported, when you copy SSE-KMS encrypted
              objects  from general purpose buckets to directory buckets, from
              directory buckets to general purpose buckets, or between  direc-
              tory buckets, through CopyObject , UploadPartCopy , the Copy op-
              eration in Batch Operations , or the import jobs . In this case,
              Amazon  S3 makes a call to KMS every time a copy request is made
              for a KMS-encrypted object.

       --request-payer (string)
          Confirms that the requester knows that they will be charged for  the
          request.  Bucket owners need not specify this parameter in their re-
          quests. If either the source or destination S3 bucket has  Requester
          Pays  enabled,  the  requester will pay for corresponding charges to
          copy the object. For information about downloading objects from  Re-
          quester  Pays  buckets,  see  Downloading  Objects in Requester Pays
          Buckets in the Amazon S3 User Guide .

          NOTE:
              This functionality is not supported for directory buckets.

          Possible values:

          o requester

       --tagging (string)
          The tag-set for the object. The tag-set must be encoded as URL Query
          parameters.

          NOTE:
              This functionality is not supported for directory buckets.

       --object-lock-mode (string)
          Specifies  the  Object  Lock  mode that you want to apply to the up-
          loaded object.

          NOTE:
              This functionality is not supported for directory buckets.

          Possible values:

          o GOVERNANCE

          o COMPLIANCE

       --object-lock-retain-until-date (timestamp)
          Specifies the date and time when you want the Object Lock to expire.

          NOTE:
              This functionality is not supported for directory buckets.

       --object-lock-legal-hold-status (string)
          Specifies whether you want to apply a legal hold to the uploaded ob-
          ject.

          NOTE:
              This functionality is not supported for directory buckets.

          Possible values:

          o ON

          o OFF

       --expected-bucket-owner (string)
          The  account ID of the expected bucket owner. If the account ID that
          you provide does not match the actual owner of the bucket,  the  re-
          quest fails with the HTTP status code 403 Forbidden (access denied).

       --checksum-algorithm (string)
          Indicates the algorithm that you want Amazon S3 to use to create the
          checksum for the object. For more information, see  Checking  object
          integrity in the Amazon S3 User Guide .

          Possible values:

          o CRC32

          o CRC32C

          o SHA1

          o SHA256

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination. If automatic pagination is disabled,  the
       AWS CLI will only make one call, for the first page of results.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

EXAMPLES
       NOTE:
          To  use  the following examples, you must have the AWS CLI installed
          and configured. See the Getting started guide in the  AWS  CLI  User
          Guide for more information.

          Unless  otherwise  stated,  all  examples  have  unix-like quotation
          rules. These examples will need to be  adapted  to  your  terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       The  following  command  creates  a  multipart  upload  in  the  bucket
       my-bucket with the key multipart/01:

          aws s3api create-multipart-upload --bucket my-bucket --key 'multipart/01'

       Output:

          {
              "Bucket": "my-bucket",
              "UploadId": "dfRtDYU0WWCCcH43C3WFbkRONycyCpTJJvxu2i5GYkZljF.Yxwh6XG7WfS2vC4to6HiV6Yjlx.cph0gtNBtJ8P3URCSbB7rjxI5iEwVDmgaXZOGgkk5nVTW16HOQ5l0R",
              "Key": "multipart/01"
          }

       The completed file will be named 01 in a folder called multipart in the
       bucket my-bucket. Save the upload ID, key and bucket name for use  with
       the upload-part command.

OUTPUT
       AbortDate -> (timestamp)
          If  the  bucket  has  a  lifecycle rule configured with an action to
          abort incomplete multipart uploads and the prefix in  the  lifecycle
          rule  matches  the object name in the request, the response includes
          this header. The header indicates when the initiated  multipart  up-
          load  becomes eligible for an abort operation. For more information,
          see Aborting Incomplete Multipart Uploads Using a  Bucket  Lifecycle
          Configuration in the Amazon S3 User Guide .

          The  response also includes the x-amz-abort-rule-id header that pro-
          vides the ID of the lifecycle configuration rule  that  defines  the
          abort action.

          NOTE:
              This functionality is not supported for directory buckets.

       AbortRuleId -> (string)
          This  header  is returned along with the x-amz-abort-date header. It
          identifies the applicable lifecycle configuration rule that  defines
          the action to abort incomplete multipart uploads.

          NOTE:
              This functionality is not supported for directory buckets.

       Bucket -> (string)
          The  name of the bucket to which the multipart upload was initiated.
          Does not return the access point ARN or access point alias if used.

          NOTE:
              Access points are not supported by directory buckets.

       Key -> (string)
          Object key for which the multipart upload was initiated.

       UploadId -> (string)
          ID for the initiated multipart upload.

       ServerSideEncryption -> (string)
          The server-side encryption algorithm used when you store this object
          in Amazon S3 (for example, AES256 , aws:kms ).

       SSECustomerAlgorithm -> (string)
          If  server-side  encryption  with a customer-provided encryption key
          was requested, the response will include this header to confirm  the
          encryption algorithm that's used.

          NOTE:
              This functionality is not supported for directory buckets.

       SSECustomerKeyMD5 -> (string)
          If  server-side  encryption  with a customer-provided encryption key
          was requested, the response will include this header to provide  the
          round-trip  message  integrity verification of the customer-provided
          encryption key.

          NOTE:
              This functionality is not supported for directory buckets.

       SSEKMSKeyId -> (string)
          If present, indicates the ID of the KMS key that was used for object
          encryption.

       SSEKMSEncryptionContext -> (string)
          If present, indicates the Amazon Web Services KMS Encryption Context
          to use for  object  encryption.  The  value  of  this  header  is  a
          Base64-encoded  string  of  a UTF-8 encoded JSON, which contains the
          encryption context as key-value pairs.

       BucketKeyEnabled -> (boolean)
          Indicates whether the multipart upload uses an  S3  Bucket  Key  for
          server-side  encryption  with  Key  Management  Service  (KMS)  keys
          (SSE-KMS).

       RequestCharged -> (string)
          If present, indicates that the requester  was  successfully  charged
          for the request.

          NOTE:
              This functionality is not supported for directory buckets.

       ChecksumAlgorithm -> (string)
          The algorithm that was used to create a checksum of the object.



                                                     CREATE-MULTIPART-UPLOAD()
