COMPLETE-MULTIPART-UPLOAD()                        COMPLETE-MULTIPART-UPLOAD()



NAME
       complete-multipart-upload -

DESCRIPTION
       Completes a multipart upload by assembling previously uploaded parts.

       You first initiate the multipart upload and then upload all parts using
       the UploadPart operation or the UploadPartCopy  operation.  After  suc-
       cessfully uploading all relevant parts of an upload, you call this Com-
       pleteMultipartUpload operation to complete the upload.  Upon  receiving
       this  request,  Amazon S3 concatenates all the parts in ascending order
       by part number to create a new object. In  the  CompleteMultipartUpload
       request, you must provide the parts list and ensure that the parts list
       is complete. The CompleteMultipartUpload API operation concatenates the
       parts that you provide in the list. For each part in the list, you must
       provide the PartNumber value and the ETag value that are returned after
       that part was uploaded.

       The  processing of a CompleteMultipartUpload request could take several
       minutes to finalize. After Amazon S3 begins processing the request,  it
       sends  an  HTTP response header that specifies a 200 OK response. While
       processing is in progress, Amazon S3  periodically  sends  white  space
       characters to keep the connection from timing out. A request could fail
       after the initial 200 OK response has been sent. This means that a  200
       OK  response  can  contain  either a success or an error. The error re-
       sponse might be embedded in the 200 OK response. If you call  this  API
       operation  directly,  make sure to design your application to parse the
       contents of the response and handle it appropriately. If you use Amazon
       Web  Services SDKs, SDKs handle this condition. The SDKs detect the em-
       bedded error and apply error handling per your  configuration  settings
       (including  automatically  retrying the request as appropriate). If the
       condition persists, the SDKs throw an exception (or, for the SDKs  that
       don't use exceptions, they return an error).

       Note that if CompleteMultipartUpload fails, applications should be pre-
       pared to retry any failed requests (including 500 error responses). For
       more information, see Amazon S3 Error Best Practices .

       WARNING:
          You  can't  use  Content-Type: application/x-www-form-urlencoded for
          the CompleteMultipartUpload requests. Also, if you don't  provide  a
          Content-Type  header, CompleteMultipartUpload can still return a 200
          OK response.

       For more information about multipart uploads, see Uploading Objects Us-
       ing Multipart Upload in the Amazon S3 User Guide .

       NOTE:
              Directory  buckets  -  For  directory buckets, you must make re-
              quests for this API operation to the Zonal endpoint. These  end-
              points support virtual-hosted-style requests in the format
              ``
              https://bucket_name    .s3express-az_id    .*region*    .amazon-
              aws.com/key-name `` . Path-style requests are not supported. For
              more information, see Regional and Zonal endpoints in the Amazon
              S3 User Guide .

              System Message: WARNING/2 (<string>:, line 52)
                     Inline literal start-string without end-string.

          Permissions

       o General purpose bucket permissions - For  information  about  permis-
         sions  required to use the multipart upload API, see Multipart Upload
         and Permissions in the Amazon S3 User Guide .

       o Directory bucket permissions - To grant access to this API  operation
         on  a directory bucket, we recommend that you use the ` CreateSession
         https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html`__
         API  operation  for  session-based  authorization.  Specifically, you
         grant the s3express:CreateSession permission to the directory  bucket
         in  a  bucket  policy or an IAM identity-based policy. Then, you make
         the CreateSession API call on the bucket to obtain a  session  token.
         With  the  session token in your request header, you can make API re-
         quests to this operation. After the session token expires,  you  make
         another  CreateSession  API  call to generate a new session token for
         use. Amazon Web Services CLI or SDKs create session and  refresh  the
         session  token  automatically  to  avoid service interruptions when a
         session expires. For more information about authorization, see ` Cre-
         ateSession
         https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateSession.html`__
         .

       o If  you  provide an additional checksum value in your MultipartUpload
         requests and the object is encrypted with Key Management Service, you
         must  have permission to use the kms:Decrypt action for the Complete-
         MultipartUpload request to succeed.

         Special errors

       o Error Code: EntityTooSmall

         o Description: Your proposed upload is smaller than the  minimum  al-
           lowed  object size. Each part must be at least 5 MB in size, except
           the last part.

         o HTTP Status Code: 400 Bad Request

       o Error Code: InvalidPart

         o Description: One or more of the specified parts could not be found.
           The  part might not have been uploaded, or the specified ETag might
           not have matched the uploaded part's ETag.

         o HTTP Status Code: 400 Bad Request

       o Error Code: InvalidPartOrder

         o Description: The list of parts was  not  in  ascending  order.  The
           parts list must be specified in order by part number.

         o HTTP Status Code: 400 Bad Request

       o Error Code: NoSuchUpload

         o Description: The specified multipart upload does not exist. The up-
           load ID might be invalid, or the multipart upload might  have  been
           aborted or completed.

         o HTTP Status Code: 404 Not Found

         HTTP Host header syntax
          Directory  buckets  -  The HTTP Host header syntax is `` Bucket_name
          .s3express-az_id .*region* .amazonaws.com`` .

       The following operations are related to CompleteMultipartUpload :

       o CreateMultipartUpload

       o UploadPart

       o AbortMultipartUpload

       o ListParts

       o ListMultipartUploads

       See also: AWS API Documentation

SYNOPSIS
            complete-multipart-upload
          --bucket <value>
          --key <value>
          [--multipart-upload <value>]
          --upload-id <value>
          [--checksum-crc32 <value>]
          [--checksum-crc32-c <value>]
          [--checksum-sha1 <value>]
          [--checksum-sha256 <value>]
          [--request-payer <value>]
          [--expected-bucket-owner <value>]
          [--if-none-match <value>]
          [--sse-customer-algorithm <value>]
          [--sse-customer-key <value>]
          [--sse-customer-key-md5 <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --bucket (string)
          Name of the bucket to which the multipart upload was initiated.
              Directory buckets - When you use this operation with a directory
              bucket, you must use virtual-hosted-style requests in the format
              `` Bucket_name  .s3express-az_id  .*region*  .amazonaws.com``  .
              Path-style  requests  are  not supported. Directory bucket names
              must be unique in the chosen  Availability  Zone.  Bucket  names
              must follow the format `` bucket_base_name --az-id --x-s3`` (for
              example, `` DOC-EXAMPLE-BUCKET --usw2-az1 --x-s3`` ). For infor-
              mation  about  bucket  naming restrictions, see Directory bucket
              naming rules in the Amazon S3 User Guide .

              Access points - When you use this action with an  access  point,
              you  must  provide the alias of the access point in place of the
              bucket name or specify the access point ARN. When using the  ac-
              cess  point  ARN,  you  must direct requests to the access point
              hostname. The access point hostname takes the form  AccessPoint-
              Name  -AccountId  .s3-accesspoint.*Region*  .amazonaws.com. When
              using this action with an access point through  the  Amazon  Web
              Services  SDKs, you provide the access point ARN in place of the
              bucket name. For more information about access point  ARNs,  see
              Using access points in the Amazon S3 User Guide .

          NOTE:
                 Access  points  and  Object Lambda access points are not sup-
                 ported by directory buckets.

              S3 on Outposts - When you use this action with Amazon S3 on Out-
              posts,  you must direct requests to the S3 on Outposts hostname.
              The S3 on Outposts hostname takes the  form  ``  AccessPointName
              -AccountId .*outpostID* .s3-outposts.*Region* .amazonaws.com`` .
              When you use this action with S3 on Outposts through the  Amazon
              Web  Services SDKs, you provide the Outposts access point ARN in
              place of the bucket name. For more information about S3 on  Out-
              posts  ARNs,  see  What is S3 on Outposts? in the Amazon S3 User
              Guide .

       --key (string)
          Object key for which the multipart upload was initiated.

       --multipart-upload (structure)
          The container for the multipart upload request information.

          Parts -> (list)
              Array of CompletedPart data types.

              If you do not supply a valid Part with your request, the service
              sends back an HTTP 400 response.

              (structure)
                 Details of the parts that were uploaded.

                 ETag -> (string)
                     Entity tag returned when the part was uploaded.

                 ChecksumCRC32 -> (string)
                     The  base64-encoded, 32-bit CRC32 checksum of the object.
                     This will only be present if it was uploaded with the ob-
                     ject. When you use an API operation on an object that was
                     uploaded using multipart uploads, this value may not be a
                     direct checksum value of the full object. Instead, it's a
                     calculation based on the checksum values of each individ-
                     ual  part.  For  more information about how checksums are
                     calculated with multipart uploads,  see  Checking  object
                     integrity in the Amazon S3 User Guide .

                 ChecksumCRC32C -> (string)
                     The base64-encoded, 32-bit CRC32C checksum of the object.
                     This will only be present if it was uploaded with the ob-
                     ject. When you use an API operation on an object that was
                     uploaded using multipart uploads, this value may not be a
                     direct checksum value of the full object. Instead, it's a
                     calculation based on the checksum values of each individ-
                     ual  part.  For  more information about how checksums are
                     calculated with multipart uploads,  see  Checking  object
                     integrity in the Amazon S3 User Guide .

                 ChecksumSHA1 -> (string)
                     The  base64-encoded,  160-bit SHA-1 digest of the object.
                     This will only be present if it was uploaded with the ob-
                     ject.  When  you  use the API operation on an object that
                     was uploaded using multipart uploads, this value may  not
                     be  a  direct checksum value of the full object. Instead,
                     it's a calculation based on the checksum values  of  each
                     individual part. For more information about how checksums
                     are calculated with multipart uploads, see  Checking  ob-
                     ject integrity in the Amazon S3 User Guide .

                 ChecksumSHA256 -> (string)
                     The base64-encoded, 256-bit SHA-256 digest of the object.
                     This will only be present if it was uploaded with the ob-
                     ject. When you use an API operation on an object that was
                     uploaded using multipart uploads, this value may not be a
                     direct checksum value of the full object. Instead, it's a
                     calculation based on the checksum values of each individ-
                     ual  part.  For  more information about how checksums are
                     calculated with multipart uploads,  see  Checking  object
                     integrity in the Amazon S3 User Guide .

                 PartNumber -> (integer)
                     Part  number that identifies the part. This is a positive
                     integer between 1 and 10,000.

                     NOTE:

                        o General purpose buckets - In CompleteMultipartUpload
                          , when a additional checksum (including x-amz-check-
                          sum-crc32  ,  x-amz-checksum-crc32c  ,  x-amz-check-
                          sum-sha1  , or x-amz-checksum-sha256 ) is applied to
                          each part, the PartNumber must start at  1  and  the
                          part  numbers must be consecutive. Otherwise, Amazon
                          S3 generates an HTTP 400 Bad Request status code and
                          an InvalidPartOrder error code.

                        o Directory buckets - In CompleteMultipartUpload , the
                          PartNumber must start at 1 and the part numbers must
                          be consecutive.

       Shorthand Syntax:

          Parts=[{ETag=string,ChecksumCRC32=string,ChecksumCRC32C=string,ChecksumSHA1=string,ChecksumSHA256=string,PartNumber=integer},{ETag=string,ChecksumCRC32=string,ChecksumCRC32C=string,ChecksumSHA1=string,ChecksumSHA256=string,PartNumber=integer}]

       JSON Syntax:

          {
            "Parts": [
              {
                "ETag": "string",
                "ChecksumCRC32": "string",
                "ChecksumCRC32C": "string",
                "ChecksumSHA1": "string",
                "ChecksumSHA256": "string",
                "PartNumber": integer
              }
              ...
            ]
          }

       --upload-id (string)
          ID for the initiated multipart upload.

       --checksum-crc32 (string)
          This header can be used as a data integrity check to verify that the
          data received is the same data that was originally sent. This header
          specifies  the  base64-encoded, 32-bit CRC32 checksum of the object.
          For more information, see Checking object integrity in the Amazon S3
          User Guide .

       --checksum-crc32-c (string)
          This header can be used as a data integrity check to verify that the
          data received is the same data that was originally sent. This header
          specifies  the base64-encoded, 32-bit CRC32C checksum of the object.
          For more information, see Checking object integrity in the Amazon S3
          User Guide .

       --checksum-sha1 (string)
          This header can be used as a data integrity check to verify that the
          data received is the same data that was originally sent. This header
          specifies  the  base64-encoded,  160-bit SHA-1 digest of the object.
          For more information, see Checking object integrity in the Amazon S3
          User Guide .

       --checksum-sha256 (string)
          This header can be used as a data integrity check to verify that the
          data received is the same data that was originally sent. This header
          specifies  the base64-encoded, 256-bit SHA-256 digest of the object.
          For more information, see Checking object integrity in the Amazon S3
          User Guide .

       --request-payer (string)
          Confirms  that the requester knows that they will be charged for the
          request. Bucket owners need not specify this parameter in their  re-
          quests.  If either the source or destination S3 bucket has Requester
          Pays enabled, the requester will pay for  corresponding  charges  to
          copy  the object. For information about downloading objects from Re-
          quester Pays buckets, see  Downloading  Objects  in  Requester  Pays
          Buckets in the Amazon S3 User Guide .

          NOTE:
              This functionality is not supported for directory buckets.

          Possible values:

          o requester

       --expected-bucket-owner (string)
          The  account ID of the expected bucket owner. If the account ID that
          you provide does not match the actual owner of the bucket,  the  re-
          quest fails with the HTTP status code 403 Forbidden (access denied).

       --if-none-match (string)
          Uploads  the object only if the object key name does not already ex-
          ist in the bucket specified. Otherwise, Amazon S3 returns a 412 Pre-
          condition Failed error.

          If a conflicting operation occurs during the upload S3 returns a 409
          ConditionalRequestConflict response. On a  409  failure  you  should
          re-initiate  the  multipart  upload  with  CreateMultipartUpload and
          re-upload each part.

          Expects the '*' (asterisk) character.

          For more information about conditional requests, see RFC 7232  ,  or
          Conditional requests in the Amazon S3 User Guide .

       --sse-customer-algorithm (string)
          The  server-side  encryption (SSE) algorithm used to encrypt the ob-
          ject. This parameter is required only when the  object  was  created
          using a checksum algorithm or if your bucket policy requires the use
          of SSE-C. For more information, see Protecting data using SSE-C keys
          in the Amazon S3 User Guide .

          NOTE:
              This functionality is not supported for directory buckets.

       --sse-customer-key (string)
          The  server-side encryption (SSE) customer managed key. This parame-
          ter is needed only when the object was created using a checksum  al-
          gorithm.  For more information, see Protecting data using SSE-C keys
          in the Amazon S3 User Guide .

          NOTE:
              This functionality is not supported for directory buckets.

       --sse-customer-key-md5 (string)
          The MD5 server-side encryption (SSE) customer managed key. This  pa-
          rameter  is needed only when the object was created using a checksum
          algorithm. For more information, see  Protecting  data  using  SSE-C
          keys in the Amazon S3 User Guide .

          NOTE:
              This functionality is not supported for directory buckets.

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

EXAMPLES
       NOTE:
          To use the following examples, you must have the AWS  CLI  installed
          and  configured.  See  the Getting started guide in the AWS CLI User
          Guide for more information.

          Unless otherwise  stated,  all  examples  have  unix-like  quotation
          rules.  These  examples  will  need to be adapted to your terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       The  following  command completes a multipart upload for the key multi-
       part/01 in the bucket my-bucket:

          aws s3api complete-multipart-upload --multipart-upload file://mpustruct --bucket my-bucket --key 'multipart/01' --upload-id dfRtDYU0WWCCcH43C3WFbkRONycyCpTJJvxu2i5GYkZljF.Yxwh6XG7WfS2vC4to6HiV6Yjlx.cph0gtNBtJ8P3URCSbB7rjxI5iEwVDmgaXZOGgkk5nVTW16HOQ5l0R

       The upload ID required by  this  command  is  output  by  create-multi-
       part-upload and can also be retrieved with list-multipart-uploads.

       The multipart upload option in the above command takes a JSON structure
       that describes the parts of the multipart upload  that  should  be  re-
       assembled  into  the complete file. In this example, the file:// prefix
       is used to load the JSON structure from a  file  in  the  local  folder
       named mpustruct.

       mpustruct:

          {
            "Parts": [
              {
                "ETag": "e868e0f4719e394144ef36531ee6824c",
                "PartNumber": 1
              },
              {
                "ETag": "6bb2b12753d66fe86da4998aa33fffb0",
                "PartNumber": 2
              },
              {
                "ETag": "d0a0112e841abec9c9ec83406f0159c8",
                "PartNumber": 3
              }
            ]
          }

       The ETag value for each part is upload is output each time you upload a
       part using the upload-part command and can also be retrieved by calling
       list-parts or calculated by taking the MD5 checksum of each part.

       Output:

          {
              "ETag": "\"3944a9f7a4faab7f78788ff6210f63f0-3\"",
              "Bucket": "my-bucket",
              "Location": "https://my-bucket.s3.amazonaws.com/multipart%2F01",
              "Key": "multipart/01"
          }

OUTPUT
       Location -> (string)
          The URI that identifies the newly created object.

       Bucket -> (string)
          The  name of the bucket that contains the newly created object. Does
          not return the access point ARN or access point alias if used.

          NOTE:
              Access points are not supported by directory buckets.

       Key -> (string)
          The object key of the newly created object.

       Expiration -> (string)
          If the object expiration is configured, this will contain the  expi-
          ration  date  (expiry-date  )  and  rule ID (rule-id ). The value of
          rule-id is URL-encoded.

          NOTE:
              This functionality is not supported for directory buckets.

       ETag -> (string)
          Entity tag that identifies the newly created object's data.  Objects
          with  different object data will have different entity tags. The en-
          tity tag is an opaque string. The entity tag may or may  not  be  an
          MD5  digest  of the object data. If the entity tag is not an MD5 di-
          gest of the object data, it will contain one or more  nonhexadecimal
          characters and/or will consist of less than 32 or more than 32 hexa-
          decimal digits. For more information about how  the  entity  tag  is
          calculated,  see  Checking  object  integrity  in the Amazon S3 User
          Guide .

       ChecksumCRC32 -> (string)
          The base64-encoded, 32-bit CRC32 checksum of the object.  This  will
          only  be present if it was uploaded with the object. When you use an
          API operation on an object that was  uploaded  using  multipart  up-
          loads, this value may not be a direct checksum value of the full ob-
          ject. Instead, it's a calculation based on the  checksum  values  of
          each  individual  part. For more information about how checksums are
          calculated with multipart uploads, see Checking object integrity  in
          the Amazon S3 User Guide .

       ChecksumCRC32C -> (string)
          The  base64-encoded, 32-bit CRC32C checksum of the object. This will
          only be present if it was uploaded with the object. When you use  an
          API  operation  on  an  object that was uploaded using multipart up-
          loads, this value may not be a direct checksum value of the full ob-
          ject.  Instead,  it's  a calculation based on the checksum values of
          each individual part. For more information about how  checksums  are
          calculated  with multipart uploads, see Checking object integrity in
          the Amazon S3 User Guide .

       ChecksumSHA1 -> (string)
          The base64-encoded, 160-bit SHA-1 digest of the  object.  This  will
          only be present if it was uploaded with the object. When you use the
          API operation on an object that was  uploaded  using  multipart  up-
          loads, this value may not be a direct checksum value of the full ob-
          ject. Instead, it's a calculation based on the  checksum  values  of
          each  individual  part. For more information about how checksums are
          calculated with multipart uploads, see Checking object integrity  in
          the Amazon S3 User Guide .

       ChecksumSHA256 -> (string)
          The  base64-encoded, 256-bit SHA-256 digest of the object. This will
          only be present if it was uploaded with the object. When you use  an
          API  operation  on  an  object that was uploaded using multipart up-
          loads, this value may not be a direct checksum value of the full ob-
          ject.  Instead,  it's  a calculation based on the checksum values of
          each individual part. For more information about how  checksums  are
          calculated  with multipart uploads, see Checking object integrity in
          the Amazon S3 User Guide .

       ServerSideEncryption -> (string)
          The server-side encryption algorithm used when storing  this  object
          in Amazon S3 (for example, AES256 , aws:kms ).

          NOTE:
              For  directory  buckets, only server-side encryption with Amazon
              S3 managed keys (SSE-S3) (AES256 ) is supported.

       VersionId -> (string)
          Version ID of the newly created object, in case the bucket has  ver-
          sioning turned on.

          NOTE:
              This functionality is not supported for directory buckets.

       SSEKMSKeyId -> (string)
          If  present,  indicates  the  ID of the Key Management Service (KMS)
          symmetric encryption customer managed key that was used for the  ob-
          ject.

          NOTE:
              This functionality is not supported for directory buckets.

       BucketKeyEnabled -> (boolean)
          Indicates  whether  the  multipart  upload uses an S3 Bucket Key for
          server-side  encryption  with  Key  Management  Service  (KMS)  keys
          (SSE-KMS).

          NOTE:
              This functionality is not supported for directory buckets.

       RequestCharged -> (string)
          If  present,  indicates  that the requester was successfully charged
          for the request.

          NOTE:
              This functionality is not supported for directory buckets.



                                                   COMPLETE-MULTIPART-UPLOAD()
