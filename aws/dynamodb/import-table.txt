IMPORT-TABLE()                                                  IMPORT-TABLE()



NAME
       import-table -

DESCRIPTION
       Imports table data from an S3 bucket.

       See also: AWS API Documentation

SYNOPSIS
            import-table
          [--client-token <value>]
          --s3-bucket-source <value>
          --input-format <value>
          [--input-format-options <value>]
          [--input-compression-type <value>]
          --table-creation-parameters <value>
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --client-token (string)
          Providing  a  ClientToken makes the call to ImportTableInput idempo-
          tent, meaning that multiple identical calls have the same effect  as
          one single call.

          A  client  token  is  valid for 8 hours after the first request that
          uses it is completed. After 8  hours,  any  request  with  the  same
          client  token  is treated as a new request. Do not resubmit the same
          request with the same client token for more than 8 hours, or the re-
          sult might not be idempotent.

          If  you  submit a request with the same client token but a change in
          other parameters within the 8-hour idempotency window, DynamoDB  re-
          turns an IdempotentParameterMismatch exception.

       --s3-bucket-source (structure)
          The S3 bucket that provides the source for the import.

          S3BucketOwner -> (string)
              The account number of the S3 bucket that is being imported from.
              If the bucket is owned by the requester this is optional.

          S3Bucket -> (string)
              The S3 bucket that is being imported from.

          S3KeyPrefix -> (string)
              The key prefix shared by all S3 Objects that are being imported.

       Shorthand Syntax:

          S3BucketOwner=string,S3Bucket=string,S3KeyPrefix=string

       JSON Syntax:

          {
            "S3BucketOwner": "string",
            "S3Bucket": "string",
            "S3KeyPrefix": "string"
          }

       --input-format (string)
          The format of the source data. Valid values for ImportFormat are CSV
          , DYNAMODB_JSON or ION .

          Possible values:

          o DYNAMODB_JSON

          o ION

          o CSV

       --input-format-options (structure)
          Additional properties that specify how the input is formatted,

          Csv -> (structure)
              The  options for imported source files in CSV format. The values
              are Delimiter and HeaderList.

              Delimiter -> (string)
                 The delimiter used for separating items in the CSV file being
                 imported.

              HeaderList -> (list)
                 List  of  the headers used to specify a common header for all
                 source CSV files being imported. If this field  is  specified
                 then  the  first line of each CSV file is treated as data in-
                 stead of the header. If this field is not specified  the  the
                 first line of each CSV file is treated as the header.

                 (string)

       Shorthand Syntax:

          Csv={Delimiter=string,HeaderList=[string,string]}

       JSON Syntax:

          {
            "Csv": {
              "Delimiter": "string",
              "HeaderList": ["string", ...]
            }
          }

       --input-compression-type (string)
          Type of compression to be used on the input coming from the imported
          table.

          Possible values:

          o GZIP

          o ZSTD

          o NONE

       --table-creation-parameters (structure)
          Parameters for the table to import the data into.

          TableName -> (string)
              The name of the table created as part of the import operation.

          AttributeDefinitions -> (list)
              The attributes of the table created as part of the import opera-
              tion.

              (structure)
                 Represents an attribute for describing the key schema for the
                 table and indexes.

                 AttributeName -> (string)
                     A name for the attribute.

                 AttributeType -> (string)
                     The data type for the attribute, where:

                     o S - the attribute is of type String

                     o N - the attribute is of type Number

                     o B - the attribute is of type Binary

          KeySchema -> (list)
              The primary key and option sort key of the table created as part
              of the import operation.

              (structure)
                 Represents  a  single  element  of a key schema. A key schema
                 specifies the attributes that make up the primary  key  of  a
                 table, or the key attributes of an index.

                 A  KeySchemaElement  represents  exactly one attribute of the
                 primary key. For example, a simple primary key would be  rep-
                 resented  by  one KeySchemaElement (for the partition key). A
                 composite primary key would require one KeySchemaElement  for
                 the  partition key, and another KeySchemaElement for the sort
                 key.

                 A KeySchemaElement must be a scalar, top-level attribute (not
                 a  nested  attribute).  The  data type must be one of String,
                 Number, or Binary. The attribute cannot be  nested  within  a
                 List or a Map.

                 AttributeName -> (string)
                     The name of a key attribute.

                 KeyType -> (string)
                     The role that this key attribute will assume:

                     o HASH - partition key

                     o RANGE - sort key

                     NOTE:
                        The partition key of an item is also known as its hash
                        attribute . The term "hash attribute" derives from Dy-
                        namoDB's  usage of an internal hash function to evenly
                        distribute data  items  across  partitions,  based  on
                        their partition key values.

                        The sort key of an item is also known as its range at-
                        tribute . The term "range attribute" derives from  the
                        way  DynamoDB stores items with the same partition key
                        physically close together, in sorted order by the sort
                        key value.

          BillingMode -> (string)
              The  billing  mode for provisioning the table created as part of
              the import operation.

          ProvisionedThroughput -> (structure)
              Represents the provisioned throughput settings for  a  specified
              table  or  index.  The  settings  can  be modified using the Up-
              dateTable operation.

              For current minimum and maximum provisioned  throughput  values,
              see  Service,  Account,  and Table Quotas in the Amazon DynamoDB
              Developer Guide .

              ReadCapacityUnits -> (long)
                 The maximum number of strongly consistent reads consumed  per
                 second  before  DynamoDB  returns a ThrottlingException . For
                 more information, see Specifying Read and Write  Requirements
                 in the Amazon DynamoDB Developer Guide .

                 If  read/write  capacity mode is PAY_PER_REQUEST the value is
                 set to 0.

              WriteCapacityUnits -> (long)
                 The maximum number of writes consumed per second  before  Dy-
                 namoDB  returns a ThrottlingException . For more information,
                 see Specifying Read and Write Requirements in the Amazon  Dy-
                 namoDB Developer Guide .

                 If  read/write  capacity mode is PAY_PER_REQUEST the value is
                 set to 0.

          SSESpecification -> (structure)
              Represents the settings used to enable server-side encryption.

              Enabled -> (boolean)
                 Indicates whether server-side encryption  is  done  using  an
                 Amazon  Web  Services  managed  key or an Amazon Web Services
                 owned key. If enabled (true), server-side encryption type  is
                 set  to  KMS  and  an Amazon Web Services managed key is used
                 (KMS charges apply). If disabled (false)  or  not  specified,
                 server-side  encryption  is  set to Amazon Web Services owned
                 key.

              SSEType -> (string)
                 Server-side encryption type. The only supported value is:

                 o KMS - Server-side encryption that uses Key Management  Ser-
                   vice.  The  key is stored in your account and is managed by
                   KMS (KMS charges apply).

              KMSMasterKeyId -> (string)
                 The KMS key that should be used for the  KMS  encryption.  To
                 specify  a  key,  use its key ID, Amazon Resource Name (ARN),
                 alias name, or alias ARN. Note that you should  only  provide
                 this  parameter  if the key is different from the default Dy-
                 namoDB key alias/aws/dynamodb .

          GlobalSecondaryIndexes -> (list)
              The Global Secondary Indexes (GSI) of the table to be created as
              part of the import operation.

              (structure)
                 Represents the properties of a global secondary index.

                 IndexName -> (string)
                     The  name of the global secondary index. The name must be
                     unique among all other indexes on this table.

                 KeySchema -> (list)
                     The complete key schema for  a  global  secondary  index,
                     which  consists  of  one or more pairs of attribute names
                     and key types:

                     o HASH - partition key

                     o RANGE - sort key

                     NOTE:
                        The partition key of an item is also known as its hash
                        attribute . The term "hash attribute" derives from Dy-
                        namoDB's usage of an internal hash function to  evenly
                        distribute  data  items  across  partitions,  based on
                        their partition key values.

                        The sort key of an item is also known as its range at-
                        tribute  . The term "range attribute" derives from the
                        way DynamoDB stores items with the same partition  key
                        physically close together, in sorted order by the sort
                        key value.

                     (structure)
                        Represents a single element of a  key  schema.  A  key
                        schema  specifies the attributes that make up the pri-
                        mary key of a table, or the key attributes of  an  in-
                        dex.

                        A KeySchemaElement represents exactly one attribute of
                        the primary key. For example,  a  simple  primary  key
                        would  be represented by one KeySchemaElement (for the
                        partition key). A composite primary key would  require
                        one  KeySchemaElement  for  the partition key, and an-
                        other KeySchemaElement for the sort key.

                        A KeySchemaElement must be a scalar, top-level  attri-
                        bute  (not  a nested attribute). The data type must be
                        one of String, Number, or Binary. The attribute cannot
                        be nested within a List or a Map.

                        AttributeName -> (string)
                            The name of a key attribute.

                        KeyType -> (string)
                            The role that this key attribute will assume:

                            o HASH - partition key

                            o RANGE - sort key

                            NOTE:
                               The  partition  key of an item is also known as
                               its hash attribute . The term "hash  attribute"
                               derives  from  DynamoDB's  usage of an internal
                               hash function to evenly distribute  data  items
                               across partitions, based on their partition key
                               values.

                               The sort key of an item is also  known  as  its
                               range  attribute  .  The term "range attribute"
                               derives from the way DynamoDB stores items with
                               the  same  partition  key  physically close to-
                               gether, in sorted order by the sort key value.

                 Projection -> (structure)
                     Represents attributes that are  copied  (projected)  from
                     the  table  into the global secondary index. These are in
                     addition to the primary key attributes and index key  at-
                     tributes, which are automatically projected.

                     ProjectionType -> (string)
                        The  set of attributes that are projected into the in-
                        dex:

                        o KEYS_ONLY - Only the index and primary keys are pro-
                          jected into the index.

                        o INCLUDE - In addition to the attributes described in
                          KEYS_ONLY , the secondary index will  include  other
                          non-key attributes that you specify.

                        o ALL - All of the table attributes are projected into
                          the index.

                     NonKeyAttributes -> (list)
                        Represents the non-key attribute names which  will  be
                        projected into the index.

                        For  local  secondary indexes, the total count of Non-
                        KeyAttributes summed across all of the local secondary
                        indexes,  must not exceed 100. If you project the same
                        attribute into two different indexes, this  counts  as
                        two distinct attributes when determining the total.

                        (string)

                 ProvisionedThroughput -> (structure)
                     Represents  the  provisioned  throughput settings for the
                     specified global secondary index.

                     For current minimum and  maximum  provisioned  throughput
                     values,  see  Service,  Account,  and Table Quotas in the
                     Amazon DynamoDB Developer Guide .

                     ReadCapacityUnits -> (long)
                        The maximum number of strongly consistent  reads  con-
                        sumed  per  second  before  DynamoDB  returns a Throt-
                        tlingException . For more information, see  Specifying
                        Read and Write Requirements in the Amazon DynamoDB De-
                        veloper Guide .

                        If read/write capacity  mode  is  PAY_PER_REQUEST  the
                        value is set to 0.

                     WriteCapacityUnits -> (long)
                        The  maximum  number of writes consumed per second be-
                        fore DynamoDB returns a ThrottlingException . For more
                        information,  see  Specifying  Read and Write Require-
                        ments in the Amazon DynamoDB Developer Guide .

                        If read/write capacity  mode  is  PAY_PER_REQUEST  the
                        value is set to 0.

       JSON Syntax:

          {
            "TableName": "string",
            "AttributeDefinitions": [
              {
                "AttributeName": "string",
                "AttributeType": "S"|"N"|"B"
              }
              ...
            ],
            "KeySchema": [
              {
                "AttributeName": "string",
                "KeyType": "HASH"|"RANGE"
              }
              ...
            ],
            "BillingMode": "PROVISIONED"|"PAY_PER_REQUEST",
            "ProvisionedThroughput": {
              "ReadCapacityUnits": long,
              "WriteCapacityUnits": long
            },
            "SSESpecification": {
              "Enabled": true|false,
              "SSEType": "AES256"|"KMS",
              "KMSMasterKeyId": "string"
            },
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "string",
                "KeySchema": [
                  {
                    "AttributeName": "string",
                    "KeyType": "HASH"|"RANGE"
                  }
                  ...
                ],
                "Projection": {
                  "ProjectionType": "ALL"|"KEYS_ONLY"|"INCLUDE",
                  "NonKeyAttributes": ["string", ...]
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": long,
                  "WriteCapacityUnits": long
                }
              }
              ...
            ]
          }

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

OUTPUT
       ImportTableDescription -> (structure)
          Represents the properties of the table created for the  import,  and
          parameters  of the import. The import parameters include import sta-
          tus, how many items were processed, and how many errors were encoun-
          tered.

          ImportArn -> (string)
              The Amazon Resource Number (ARN) corresponding to the import re-
              quest.

          ImportStatus -> (string)
              The status of the import.

          TableArn -> (string)
              The Amazon Resource Number (ARN) of  the  table  being  imported
              into.

          TableId -> (string)
              The  table id corresponding to the table created by import table
              process.

          ClientToken -> (string)
              The client token that was provided for the import task.  Reusing
              the  client  token  on retry makes a call to ImportTable idempo-
              tent.

          S3BucketSource -> (structure)
              Values for the S3 bucket the source file is imported  from.  In-
              cludes  bucket name (required), key prefix (optional) and bucket
              account owner ID (optional).

              S3BucketOwner -> (string)
                 The account number of the S3 bucket that  is  being  imported
                 from.  If  the  bucket  is owned by the requester this is op-
                 tional.

              S3Bucket -> (string)
                 The S3 bucket that is being imported from.

              S3KeyPrefix -> (string)
                 The key prefix shared by all S3 Objects that  are  being  im-
                 ported.

          ErrorCount -> (long)
              The  number of errors occurred on importing the source file into
              the target table.

          CloudWatchLogGroupArn -> (string)
              The Amazon Resource Number (ARN) of the Cloudwatch Log Group as-
              sociated with the target table.

          InputFormat -> (string)
              The format of the source data going into the target table.

          InputFormatOptions -> (structure)
              The  format options for the data that was imported into the tar-
              get table. There is one value, CsvOption.

              Csv -> (structure)
                 The options for imported source files in CSV format. The val-
                 ues are Delimiter and HeaderList.

                 Delimiter -> (string)
                     The  delimiter  used for separating items in the CSV file
                     being imported.

                 HeaderList -> (list)
                     List of the headers used to specify a common  header  for
                     all  source  CSV  files  being imported. If this field is
                     specified then the first line of each CSV file is treated
                     as data instead of the header. If this field is not spec-
                     ified the the first line of each CSV file is  treated  as
                     the header.

                     (string)

          InputCompressionType -> (string)
              The compression options for the data that has been imported into
              the target table. The values are NONE, GZIP, or ZSTD.

          TableCreationParameters -> (structure)
              The parameters for the new table that is being imported into.

              TableName -> (string)
                 The name of the table created as part of  the  import  opera-
                 tion.

              AttributeDefinitions -> (list)
                 The attributes of the table created as part of the import op-
                 eration.

                 (structure)
                     Represents an attribute for describing the key schema for
                     the table and indexes.

                     AttributeName -> (string)
                        A name for the attribute.

                     AttributeType -> (string)
                        The data type for the attribute, where:

                        o S - the attribute is of type String

                        o N - the attribute is of type Number

                        o B - the attribute is of type Binary

              KeySchema -> (list)
                 The  primary  key and option sort key of the table created as
                 part of the import operation.

                 (structure)
                     Represents a single element of a key schema. A key schema
                     specifies  the attributes that make up the primary key of
                     a table, or the key attributes of an index.

                     A KeySchemaElement represents exactly  one  attribute  of
                     the  primary key. For example, a simple primary key would
                     be represented by one KeySchemaElement (for the partition
                     key).   A   composite   primary  key  would  require  one
                     KeySchemaElement  for  the  partition  key,  and  another
                     KeySchemaElement for the sort key.

                     A  KeySchemaElement must be a scalar, top-level attribute
                     (not a nested attribute). The data type must  be  one  of
                     String, Number, or Binary. The attribute cannot be nested
                     within a List or a Map.

                     AttributeName -> (string)
                        The name of a key attribute.

                     KeyType -> (string)
                        The role that this key attribute will assume:

                        o HASH - partition key

                        o RANGE - sort key

                        NOTE:
                            The partition key of an item is also known as  its
                            hash attribute . The term "hash attribute" derives
                            from DynamoDB's usage of an internal hash function
                            to evenly distribute data items across partitions,
                            based on their partition key values.

                            The sort key of an item is also known as its range
                            attribute  .  The  term  "range attribute" derives
                            from the way DynamoDB stores items with  the  same
                            partition key physically close together, in sorted
                            order by the sort key value.

              BillingMode -> (string)
                 The billing mode for provisioning the table created  as  part
                 of the import operation.

              ProvisionedThroughput -> (structure)
                 Represents  the  provisioned throughput settings for a speci-
                 fied table or index. The settings can be modified  using  the
                 UpdateTable operation.

                 For  current  minimum and maximum provisioned throughput val-
                 ues, see Service, Account, and Table Quotas in the Amazon Dy-
                 namoDB Developer Guide .

                 ReadCapacityUnits -> (long)
                     The  maximum number of strongly consistent reads consumed
                     per second before DynamoDB returns a  ThrottlingException
                     . For more information, see Specifying Read and Write Re-
                     quirements in the Amazon DynamoDB Developer Guide .

                     If read/write capacity mode is PAY_PER_REQUEST the  value
                     is set to 0.

                 WriteCapacityUnits -> (long)
                     The  maximum  number of writes consumed per second before
                     DynamoDB returns a ThrottlingException . For more  infor-
                     mation, see Specifying Read and Write Requirements in the
                     Amazon DynamoDB Developer Guide .

                     If read/write capacity mode is PAY_PER_REQUEST the  value
                     is set to 0.

              SSESpecification -> (structure)
                 Represents  the  settings  used to enable server-side encryp-
                 tion.

                 Enabled -> (boolean)
                     Indicates whether server-side encryption is done using an
                     Amazon Web Services managed key or an Amazon Web Services
                     owned key. If enabled (true), server-side encryption type
                     is  set  to KMS and an Amazon Web Services managed key is
                     used (KMS charges apply).  If  disabled  (false)  or  not
                     specified,  server-side  encryption  is set to Amazon Web
                     Services owned key.

                 SSEType -> (string)
                     Server-side encryption type. The only supported value is:

                     o KMS - Server-side encryption that uses  Key  Management
                       Service.  The key is stored in your account and is man-
                       aged by KMS (KMS charges apply).

                 KMSMasterKeyId -> (string)
                     The KMS key that should be used for the  KMS  encryption.
                     To  specify  a  key, use its key ID, Amazon Resource Name
                     (ARN), alias name, or alias ARN.  Note  that  you  should
                     only  provide this parameter if the key is different from
                     the default DynamoDB key alias/aws/dynamodb .

              GlobalSecondaryIndexes -> (list)
                 The Global Secondary Indexes (GSI) of the table to be created
                 as part of the import operation.

                 (structure)
                     Represents the properties of a global secondary index.

                     IndexName -> (string)
                        The  name of the global secondary index. The name must
                        be unique among all other indexes on this table.

                     KeySchema -> (list)
                        The complete key schema for a global secondary  index,
                        which consists of one or more pairs of attribute names
                        and key types:

                        o HASH - partition key

                        o RANGE - sort key

                        NOTE:
                            The partition key of an item is also known as  its
                            hash attribute . The term "hash attribute" derives
                            from DynamoDB's usage of an internal hash function
                            to evenly distribute data items across partitions,
                            based on their partition key values.

                            The sort key of an item is also known as its range
                            attribute  .  The  term  "range attribute" derives
                            from the way DynamoDB stores items with  the  same
                            partition key physically close together, in sorted
                            order by the sort key value.

                        (structure)
                            Represents a single element of a key schema. A key
                            schema  specifies  the attributes that make up the
                            primary key of a table, or the key  attributes  of
                            an index.

                            A  KeySchemaElement  represents exactly one attri-
                            bute of the primary key.  For  example,  a  simple
                            primary   key   would   be   represented   by  one
                            KeySchemaElement (for the partition key).  A  com-
                            posite primary key would require one KeySchemaEle-
                            ment  for   the   partition   key,   and   another
                            KeySchemaElement for the sort key.

                            A KeySchemaElement must be a scalar, top-level at-
                            tribute (not a nested attribute).  The  data  type
                            must  be one of String, Number, or Binary. The at-
                            tribute cannot be nested within a List or a Map.

                            AttributeName -> (string)
                               The name of a key attribute.

                            KeyType -> (string)
                               The role that this key attribute will assume:

                               o HASH - partition key

                               o RANGE - sort key

                               NOTE:
                                   The partition key of an item is also  known
                                   as  its hash attribute . The term "hash at-
                                   tribute" derives from DynamoDB's  usage  of
                                   an  internal  hash  function to evenly dis-
                                   tribute data items across partitions, based
                                   on their partition key values.

                                   The  sort  key  of an item is also known as
                                   its range attribute . The term  "range  at-
                                   tribute"  derives  from  the  way  DynamoDB
                                   stores items with the  same  partition  key
                                   physically  close together, in sorted order
                                   by the sort key value.

                     Projection -> (structure)
                        Represents attributes that are copied (projected) from
                        the  table  into the global secondary index. These are
                        in addition to the primary key  attributes  and  index
                        key attributes, which are automatically projected.

                        ProjectionType -> (string)
                            The  set of attributes that are projected into the
                            index:

                            o KEYS_ONLY - Only the index and primary keys  are
                              projected into the index.

                            o INCLUDE  -  In  addition  to  the attributes de-
                              scribed in KEYS_ONLY , the secondary index  will
                              include  other non-key attributes that you spec-
                              ify.

                            o ALL - All of the table attributes are  projected
                              into the index.

                        NonKeyAttributes -> (list)
                            Represents  the non-key attribute names which will
                            be projected into the index.

                            For local secondary indexes, the  total  count  of
                            NonKeyAttributes  summed  across  all of the local
                            secondary indexes, must not  exceed  100.  If  you
                            project  the same attribute into two different in-
                            dexes, this counts as two distinct attributes when
                            determining the total.

                            (string)

                     ProvisionedThroughput -> (structure)
                        Represents the provisioned throughput settings for the
                        specified global secondary index.

                        For current minimum and maximum provisioned throughput
                        values,  see Service, Account, and Table Quotas in the
                        Amazon DynamoDB Developer Guide .

                        ReadCapacityUnits -> (long)
                            The maximum number of  strongly  consistent  reads
                            consumed  per  second  before  DynamoDB  returns a
                            ThrottlingException . For  more  information,  see
                            Specifying Read and Write Requirements in the Ama-
                            zon DynamoDB Developer Guide .

                            If read/write capacity mode is PAY_PER_REQUEST the
                            value is set to 0.

                        WriteCapacityUnits -> (long)
                            The  maximum  number of writes consumed per second
                            before DynamoDB returns  a  ThrottlingException  .
                            For  more  information,  see  Specifying  Read and
                            Write Requirements in the Amazon  DynamoDB  Devel-
                            oper Guide .

                            If read/write capacity mode is PAY_PER_REQUEST the
                            value is set to 0.

          StartTime -> (timestamp)
              The time when this import task started.

          EndTime -> (timestamp)
              The time at which the creation of the table associated with this
              import task completed.

          ProcessedSizeBytes -> (long)
              The total size of data processed from the source file, in Bytes.

          ProcessedItemCount -> (long)
              The total number of items processed from the source file.

          ImportedItemCount -> (long)
              The number of items successfully imported into the new table.

          FailureCode -> (string)
              The  error code corresponding to the failure that the import job
              ran into during execution.

          FailureMessage -> (string)
              The error message corresponding to the failure that  the  import
              job ran into during execution.



                                                                IMPORT-TABLE()
