GET-ITEM()                                                          GET-ITEM()



NAME
       get-item -

DESCRIPTION
       The GetItem operation returns a set of attributes for the item with the
       given primary key. If there is no matching item, GetItem does  not  re-
       turn any data and there will be no Item element in the response.
          GetItem  provides  an eventually consistent read by default. If your
          application requires a strongly consistent read, set  ConsistentRead
          to  true  . Although a strongly consistent read might take more time
          than an eventually consistent read, it always returns the  last  up-
          dated value.

       See also: AWS API Documentation

SYNOPSIS
            get-item
          --table-name <value>
          --key <value>
          [--attributes-to-get <value>]
          [--consistent-read | --no-consistent-read]
          [--return-consumed-capacity <value>]
          [--projection-expression <value>]
          [--expression-attribute-names <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --table-name (string)
          The name of the table containing the requested item.

       --key (map)
          A map of attribute names to AttributeValue objects, representing the
          primary key of the item to retrieve.

          For the primary key, you must provide all of the attributes. For ex-
          ample,  with  a simple primary key, you only need to provide a value
          for the partition key. For a composite primary key, you must provide
          values for both the partition key and the sort key.

          key -> (string)

          value -> (structure)
              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name
              is the data type, and the value is the data itself.

              For more information, see Data Types in the Amazon DynamoDB  De-
              veloper Guide .

              S -> (string)
                 An attribute of type String. For example:
                     "S": "Hello"

              N -> (string)
                 An attribute of type Number. For example:
                     "N": "123.45"

                 Numbers  are  sent across the network to DynamoDB as strings,
                 to maximize compatibility  across  languages  and  libraries.
                 However,  DynamoDB  treats them as number type attributes for
                 mathematical operations.

              B -> (blob)
                 An attribute of type Binary. For example:
                     "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

              SS -> (list)
                 An attribute of type String Set. For example:
                     "SS": ["Giraffe", "Hippo" ,"Zebra"]

                 (string)

              NS -> (list)
                 An attribute of type Number Set. For example:
                     "NS": ["42.2", "-19", "7.5", "3.14"]

                 Numbers are sent across the network to DynamoDB  as  strings,
                 to  maximize  compatibility  across  languages and libraries.
                 However, DynamoDB treats them as number type  attributes  for
                 mathematical operations.

                 (string)

              BS -> (list)
                 An attribute of type Binary Set. For example:
                     "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                 (blob)

              M -> (map)
                 An attribute of type Map. For example:
                     "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                 key -> (string)

                 value -> (structure)
                     Represents the data for an attribute.

                     Each  attribute  value is described as a name-value pair.
                     The name is the data type, and the value is the data  it-
                     self.

                     For  more  information,  see Data Types in the Amazon Dy-
                     namoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L": [ {"S": "Cookies"} , {"S":  "Coffee"},  {"N":
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              L -> (list)
                 An attribute of type List. For example:
                     "L":   [   {"S":  "Cookies"}  ,  {"S":  "Coffee"},  {"N":
                     "3.14159"}]

                 (structure)
                     Represents the data for an attribute.

                     Each attribute value is described as a  name-value  pair.
                     The  name is the data type, and the value is the data it-
                     self.

                     For more information, see Data Types in  the  Amazon  Dy-
                     namoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L":  [  {"S": "Cookies"} , {"S": "Coffee"}, {"N":
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              NULL -> (boolean)
                 An attribute of type Null. For example:
                     "NULL": true

              BOOL -> (boolean)
                 An attribute of type Boolean. For example:
                     "BOOL": true

       JSON Syntax:

          {"string": {
                "S": "string",
                "N": "string",
                "B": blob,
                "SS": ["string", ...],
                "NS": ["string", ...],
                "BS": [blob, ...],
                "M": {"string": {
                      "S": "string",
                      "N": "string",
                      "B": blob,
                      "SS": ["string", ...],
                      "NS": ["string", ...],
                      "BS": [blob, ...],
                      "M": {"string": { ... recursive ... }
                        ...},
                      "L": [
                        { ... recursive ... }
                        ...
                      ],
                      "NULL": true|false,
                      "BOOL": true|false
                    }
                  ...},
                "L": [
                  {
                    "S": "string",
                    "N": "string",
                    "B": blob,
                    "SS": ["string", ...],
                    "NS": ["string", ...],
                    "BS": [blob, ...],
                    "M": {"string": { ... recursive ... }
                      ...},
                    "L": [
                      { ... recursive ... }
                      ...
                    ],
                    "NULL": true|false,
                    "BOOL": true|false
                  }
                  ...
                ],
                "NULL": true|false,
                "BOOL": true|false
              }
            ...}

       --attributes-to-get (list)
          This is a legacy parameter. Use  ProjectionExpression  instead.  For
          more  information, see AttributesToGet in the Amazon DynamoDB Devel-
          oper Guide .

          (string)

       Syntax:

          "string" "string" ...

       --consistent-read | --no-consistent-read (boolean)
          Determines the read consistency model: If set to true , then the op-
          eration  uses  strongly  consistent  reads; otherwise, the operation
          uses eventually consistent reads.

       --return-consumed-capacity (string)
          Determines the level of detail about either provisioned or on-demand
          throughput consumption that is returned in the response:

          o INDEXES - The response includes the aggregate ConsumedCapacity for
            the operation, together with ConsumedCapacity for each  table  and
            secondary index that was accessed. Note that some operations, such
            as GetItem and BatchGetItem , do not access any indexes at all. In
            these  cases, specifying INDEXES will only return ConsumedCapacity
            information for table(s).

          o TOTAL - The response includes only the aggregate  ConsumedCapacity
            for the operation.

          o NONE - No ConsumedCapacity details are included in the response.

          Possible values:

          o INDEXES

          o TOTAL

          o NONE

       --projection-expression (string)
          A string that identifies one or more attributes to retrieve from the
          table. These attributes can include scalars, sets, or elements of  a
          JSON document. The attributes in the expression must be separated by
          commas.

          If no attribute names are specified, then  all  attributes  are  re-
          turned.  If  any  of the requested attributes are not found, they do
          not appear in the result.

          For more information, see Specifying Item Attributes in  the  Amazon
          DynamoDB Developer Guide .

       --expression-attribute-names (map)
          One  or  more  substitution tokens for attribute names in an expres-
          sion. The following are  some  use  cases  for  using  ExpressionAt-
          tributeNames :

          o To  access  an  attribute whose name conflicts with a DynamoDB re-
            served word.

          o To create a placeholder for repeating occurrences of an  attribute
            name in an expression.

          o To prevent special characters in an attribute name from being mis-
            interpreted in an expression.

          Use the # character in an expression  to  dereference  an  attribute
          name. For example, consider the following attribute name:

          o Percentile

          The  name  of  this  attribute conflicts with a reserved word, so it
          cannot be used directly in an expression. (For the complete list  of
          reserved  words, see Reserved Words in the Amazon DynamoDB Developer
          Guide ). To work around this, you could specify  the  following  for
          ExpressionAttributeNames :

          o {"#P":"Percentile"}

          You  could  then  use this substitution in an expression, as in this
          example:

          o #P = :val

          NOTE:
              Tokens that begin with the : character are expression  attribute
              values , which are placeholders for the actual value at runtime.

          For  more  information on expression attribute names, see Specifying
          Item Attributes in the Amazon DynamoDB Developer Guide .

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

EXAMPLES
       NOTE:
          To  use  the following examples, you must have the AWS CLI installed
          and configured. See the Getting started guide in the  AWS  CLI  User
          Guide for more information.

          Unless  otherwise  stated,  all  examples  have  unix-like quotation
          rules. These examples will need to be  adapted  to  your  terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       Example 1: To read an item in a table

       The following get-item example retrieves an item from the  MusicCollec-
       tion  table.  The  table  has  a hash-and-range primary key (Artist and
       SongTitle), so you must specify both of these attributes.  The  command
       also requests information about the read capacity consumed by the oper-
       ation.

          aws dynamodb get-item \
              --table-name MusicCollection \
              --key file://key.json \
              --return-consumed-capacity TOTAL

       Contents of key.json:

          {
              "Artist": {"S": "Acme Band"},
              "SongTitle": {"S": "Happy Day"}
          }

       Output:

          {
              "Item": {
                  "AlbumTitle": {
                      "S": "Songs About Life"
                  },
                  "SongTitle": {
                      "S": "Happy Day"
                  },
                  "Artist": {
                      "S": "Acme Band"
                  }
              },
              "ConsumedCapacity": {
                  "TableName": "MusicCollection",
                  "CapacityUnits": 0.5
              }
          }

       For more information, see Reading an Item in the Amazon DynamoDB Devel-
       oper Guide.

       Example 2: To read an item using a consistent read

       The  following example retrieves an item from the MusicCollection table
       using strongly consistent reads.

          aws dynamodb get-item \
              --table-name MusicCollection \
              --key file://key.json \
              --consistent-read \
              --return-consumed-capacity TOTAL

       Contents of key.json:

          {
              "Artist": {"S": "Acme Band"},
              "SongTitle": {"S": "Happy Day"}
          }

       Output:

          {
              "Item": {
                  "AlbumTitle": {
                      "S": "Songs About Life"
                  },
                  "SongTitle": {
                      "S": "Happy Day"
                  },
                  "Artist": {
                      "S": "Acme Band"
                  }
              },
              "ConsumedCapacity": {
                  "TableName": "MusicCollection",
                  "CapacityUnits": 1.0
              }
          }

       For more information, see Reading an Item in the Amazon DynamoDB Devel-
       oper Guide.

       Example 3: To retrieve specific attributes of an item

       The  following  example  uses  a projection expression to retrieve only
       three attributes of the desired item.

          aws dynamodb get-item \
              --table-name ProductCatalog \
              --key '{"Id": {"N": "102"}}' \
              --projection-expression "#T, #C, #P" \
              --expression-attribute-names file://names.json

       Contents of names.json:

          {
              "#T": "Title",
              "#C": "ProductCategory",
              "#P": "Price"
          }

       Output:

          {
              "Item": {
                  "Price": {
                      "N": "20"
                  },
                  "Title": {
                      "S": "Book 102 Title"
                  },
                  "ProductCategory": {
                      "S": "Book"
                  }
              }
          }

       For more information, see Reading an Item in the Amazon DynamoDB Devel-
       oper Guide.

OUTPUT
       Item -> (map)
          A  map of attribute names to AttributeValue objects, as specified by
          ProjectionExpression .

          key -> (string)

          value -> (structure)
              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name
              is the data type, and the value is the data itself.

              For  more information, see Data Types in the Amazon DynamoDB De-
              veloper Guide .

              S -> (string)
                 An attribute of type String. For example:
                     "S": "Hello"

              N -> (string)
                 An attribute of type Number. For example:
                     "N": "123.45"

                 Numbers are sent across the network to DynamoDB  as  strings,
                 to  maximize  compatibility  across  languages and libraries.
                 However, DynamoDB treats them as number type  attributes  for
                 mathematical operations.

              B -> (blob)
                 An attribute of type Binary. For example:
                     "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

              SS -> (list)
                 An attribute of type String Set. For example:
                     "SS": ["Giraffe", "Hippo" ,"Zebra"]

                 (string)

              NS -> (list)
                 An attribute of type Number Set. For example:
                     "NS": ["42.2", "-19", "7.5", "3.14"]

                 Numbers  are  sent across the network to DynamoDB as strings,
                 to maximize compatibility  across  languages  and  libraries.
                 However,  DynamoDB  treats them as number type attributes for
                 mathematical operations.

                 (string)

              BS -> (list)
                 An attribute of type Binary Set. For example:
                     "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                 (blob)

              M -> (map)
                 An attribute of type Map. For example:
                     "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                 key -> (string)

                 value -> (structure)
                     Represents the data for an attribute.

                     Each attribute value is described as a  name-value  pair.
                     The  name is the data type, and the value is the data it-
                     self.

                     For more information, see Data Types in  the  Amazon  Dy-
                     namoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L":  [  {"S": "Cookies"} , {"S": "Coffee"}, {"N":
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              L -> (list)
                 An attribute of type List. For example:
                     "L":  [  {"S":  "Cookies"}  ,  {"S":   "Coffee"},   {"N":
                     "3.14159"}]

                 (structure)
                     Represents the data for an attribute.

                     Each  attribute  value is described as a name-value pair.
                     The name is the data type, and the value is the data  it-
                     self.

                     For  more  information,  see Data Types in the Amazon Dy-
                     namoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L": [ {"S": "Cookies"} , {"S":  "Coffee"},  {"N":
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              NULL -> (boolean)
                 An attribute of type Null. For example:
                     "NULL": true

              BOOL -> (boolean)
                 An attribute of type Boolean. For example:
                     "BOOL": true

       ConsumedCapacity -> (structure)
          The  capacity  units consumed by the GetItem operation. The data re-
          turned includes the total  provisioned  throughput  consumed,  along
          with statistics for the table and any indexes involved in the opera-
          tion. ConsumedCapacity is only returned if the  ReturnConsumedCapac-
          ity  parameter  was  specified. For more information, see Read/Write
          Capacity Mode in the Amazon DynamoDB Developer Guide .

          TableName -> (string)
              The name of the table that was affected by the operation.

          CapacityUnits -> (double)
              The total number of capacity units consumed by the operation.

          ReadCapacityUnits -> (double)
              The total number of read capacity units consumed by  the  opera-
              tion.

          WriteCapacityUnits -> (double)
              The  total number of write capacity units consumed by the opera-
              tion.

          Table -> (structure)
              The amount of throughput consumed on the table affected  by  the
              operation.

              ReadCapacityUnits -> (double)
                 The  total  number of read capacity units consumed on a table
                 or an index.

              WriteCapacityUnits -> (double)
                 The total number of write capacity units consumed on a  table
                 or an index.

              CapacityUnits -> (double)
                 The  total number of capacity units consumed on a table or an
                 index.

          LocalSecondaryIndexes -> (map)
              The amount of throughput consumed on each local  index  affected
              by the operation.

              key -> (string)

              value -> (structure)
                 Represents the amount of provisioned throughput capacity con-
                 sumed on a table or an index.

                 ReadCapacityUnits -> (double)
                     The total number of read capacity units consumed on a ta-
                     ble or an index.

                 WriteCapacityUnits -> (double)
                     The  total  number  of write capacity units consumed on a
                     table or an index.

                 CapacityUnits -> (double)
                     The total number of capacity units consumed on a table or
                     an index.

          GlobalSecondaryIndexes -> (map)
              The  amount of throughput consumed on each global index affected
              by the operation.

              key -> (string)

              value -> (structure)
                 Represents the amount of provisioned throughput capacity con-
                 sumed on a table or an index.

                 ReadCapacityUnits -> (double)
                     The total number of read capacity units consumed on a ta-
                     ble or an index.

                 WriteCapacityUnits -> (double)
                     The total number of write capacity units  consumed  on  a
                     table or an index.

                 CapacityUnits -> (double)
                     The total number of capacity units consumed on a table or
                     an index.



                                                                    GET-ITEM()
