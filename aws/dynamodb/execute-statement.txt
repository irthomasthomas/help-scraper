EXECUTE-STATEMENT()                                        EXECUTE-STATEMENT()



NAME
       execute-statement -

DESCRIPTION
       This operation allows you to perform reads and singleton writes on data
       stored in DynamoDB, using PartiQL.

       For PartiQL reads (SELECT statement), if the total number of  processed
       items  exceeds  the  maximum dataset size limit of 1 MB, the read stops
       and results are returned to the user as  a  LastEvaluatedKey  value  to
       continue  the read in a subsequent operation. If the filter criteria in
       WHERE clause does not match any data, the read will return an empty re-
       sult set.

       A  single SELECT statement response can return up to the maximum number
       of items (if using the Limit parameter) or a maximum of 1  MB  of  data
       (and  then  apply  any filtering to the results using WHERE clause). If
       LastEvaluatedKey is present in the response, you need to  paginate  the
       result set.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            execute-statement
          --statement <value>
          [--parameters <value>]
          [--consistent-read | --no-consistent-read]
          [--next-token <value>]
          [--return-consumed-capacity <value>]
          [--limit <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]

OPTIONS
       --statement (string)
          The PartiQL statement representing the operation to run.

       --parameters (list)
          The parameters for the PartiQL statement, if any.

          (structure)
              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name
              is the data type, and the value is the data itself.

              For more information, see Data Types in the Amazon DynamoDB  De-
              veloper Guide .

              S -> (string)
                 An attribute of type String. For example:
                     "S": "Hello"

              N -> (string)
                 An attribute of type Number. For example:
                     "N": "123.45"

                 Numbers  are  sent across the network to DynamoDB as strings,
                 to maximize compatibility  across  languages  and  libraries.
                 However,  DynamoDB  treats them as number type attributes for
                 mathematical operations.

              B -> (blob)
                 An attribute of type Binary. For example:
                     "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

              SS -> (list)
                 An attribute of type String Set. For example:
                     "SS": ["Giraffe", "Hippo" ,"Zebra"]

                 (string)

              NS -> (list)
                 An attribute of type Number Set. For example:
                     "NS": ["42.2", "-19", "7.5", "3.14"]

                 Numbers are sent across the network to DynamoDB  as  strings,
                 to  maximize  compatibility  across  languages and libraries.
                 However, DynamoDB treats them as number type  attributes  for
                 mathematical operations.

                 (string)

              BS -> (list)
                 An attribute of type Binary Set. For example:
                     "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                 (blob)

              M -> (map)
                 An attribute of type Map. For example:
                     "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                 key -> (string)

                 value -> (structure)
                     Represents the data for an attribute.

                     Each  attribute  value is described as a name-value pair.
                     The name is the data type, and the value is the data  it-
                     self.

                     For  more  information,  see Data Types in the Amazon Dy-
                     namoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L": [ {"S": "Cookies"} , {"S":  "Coffee"},  {"N":
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              L -> (list)
                 An attribute of type List. For example:
                     "L":   [   {"S":  "Cookies"}  ,  {"S":  "Coffee"},  {"N":
                     "3.14159"}]

                 (structure)
                     Represents the data for an attribute.

                     Each attribute value is described as a  name-value  pair.
                     The  name is the data type, and the value is the data it-
                     self.

                     For more information, see Data Types in  the  Amazon  Dy-
                     namoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L":  [  {"S": "Cookies"} , {"S": "Coffee"}, {"N":
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              NULL -> (boolean)
                 An attribute of type Null. For example:
                     "NULL": true

              BOOL -> (boolean)
                 An attribute of type Boolean. For example:
                     "BOOL": true

       JSON Syntax:

          [
            {
              "S": "string",
              "N": "string",
              "B": blob,
              "SS": ["string", ...],
              "NS": ["string", ...],
              "BS": [blob, ...],
              "M": {"string": {
                    "S": "string",
                    "N": "string",
                    "B": blob,
                    "SS": ["string", ...],
                    "NS": ["string", ...],
                    "BS": [blob, ...],
                    "M": {"string": { ... recursive ... }
                      ...},
                    "L": [
                      { ... recursive ... }
                      ...
                    ],
                    "NULL": true|false,
                    "BOOL": true|false
                  }
                ...},
              "L": [
                {
                  "S": "string",
                  "N": "string",
                  "B": blob,
                  "SS": ["string", ...],
                  "NS": ["string", ...],
                  "BS": [blob, ...],
                  "M": {"string": { ... recursive ... }
                    ...},
                  "L": [
                    { ... recursive ... }
                    ...
                  ],
                  "NULL": true|false,
                  "BOOL": true|false
                }
                ...
              ],
              "NULL": true|false,
              "BOOL": true|false
            }
            ...
          ]

       --consistent-read | --no-consistent-read (boolean)
          The consistency of a read  operation.  If  set  to  true  ,  then  a
          strongly  consistent  read is used; otherwise, an eventually consis-
          tent read is used.

       --next-token (string)
          Set this value to get remaining results, if NextToken  was  returned
          in the statement response.

       --return-consumed-capacity (string)
          Determines the level of detail about either provisioned or on-demand
          throughput consumption that is returned in the response:

          o INDEXES - The response includes the aggregate ConsumedCapacity for
            the  operation,  together with ConsumedCapacity for each table and
            secondary index that was accessed. Note that some operations, such
            as GetItem and BatchGetItem , do not access any indexes at all. In
            these cases, specifying INDEXES will only return  ConsumedCapacity
            information for table(s).

          o TOTAL  - The response includes only the aggregate ConsumedCapacity
            for the operation.

          o NONE - No ConsumedCapacity details are included in the response.

          Possible values:

          o INDEXES

          o TOTAL

          o NONE

       --limit (integer)
          The maximum number of items to evaluate (not necessarily the  number
          of  matching items). If DynamoDB processes the number of items up to
          the limit while processing the results, it stops the  operation  and
          returns  the  matching  values up to that point, along with a key in
          LastEvaluatedKey to apply in a subsequent operation so you can  pick
          up where you left off. Also, if the processed dataset size exceeds 1
          MB before DynamoDB reaches this limit, it stops  the  operation  and
          returns the matching values up to the limit, and a key in LastEvalu-
          atedKey to apply in a subsequent operation to  continue  the  opera-
          tion.

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       Items -> (list)
          If a read operation was used, this property will contain the  result
          of  the  read  operation; a map of attribute names and their values.
          For the write operations this value will be empty.

          (map)
              key -> (string)

              value -> (structure)
                 Represents the data for an attribute.

                 Each attribute value is described as a name-value  pair.  The
                 name is the data type, and the value is the data itself.

                 For  more  information, see Data Types in the Amazon DynamoDB
                 Developer Guide .

                 S -> (string)
                     An attribute of type String. For example:
                        "S": "Hello"

                 N -> (string)
                     An attribute of type Number. For example:
                        "N": "123.45"

                     Numbers are  sent  across  the  network  to  DynamoDB  as
                     strings,  to  maximize compatibility across languages and
                     libraries. However, DynamoDB treats them as  number  type
                     attributes for mathematical operations.

                 B -> (blob)
                     An attribute of type Binary. For example:
                        "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                 SS -> (list)
                     An attribute of type String Set. For example:
                        "SS": ["Giraffe", "Hippo" ,"Zebra"]

                     (string)

                 NS -> (list)
                     An attribute of type Number Set. For example:
                        "NS": ["42.2", "-19", "7.5", "3.14"]

                     Numbers  are  sent  across  the  network  to  DynamoDB as
                     strings, to maximize compatibility across  languages  and
                     libraries.  However,  DynamoDB treats them as number type
                     attributes for mathematical operations.

                     (string)

                 BS -> (list)
                     An attribute of type Binary Set. For example:
                        "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                     (blob)

                 M -> (map)
                     An attribute of type Map. For example:
                        "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                     key -> (string)

                     value -> (structure)
                        Represents the data for an attribute.

                        Each attribute value  is  described  as  a  name-value
                        pair.  The name is the data type, and the value is the
                        data itself.

                        For more information, see Data Types in the Amazon Dy-
                        namoDB Developer Guide .

                        S -> (string)
                            An attribute of type String. For example:
                               "S": "Hello"

                        N -> (string)
                            An attribute of type Number. For example:
                               "N": "123.45"

                            Numbers are sent across the network to DynamoDB as
                            strings, to  maximize  compatibility  across  lan-
                            guages  and  libraries.  However,  DynamoDB treats
                            them as number type  attributes  for  mathematical
                            operations.

                        B -> (blob)
                            An attribute of type Binary. For example:
                               "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                        SS -> (list)
                            An attribute of type String Set. For example:
                               "SS": ["Giraffe", "Hippo" ,"Zebra"]

                            (string)

                        NS -> (list)
                            An attribute of type Number Set. For example:
                               "NS": ["42.2", "-19", "7.5", "3.14"]

                            Numbers are sent across the network to DynamoDB as
                            strings, to  maximize  compatibility  across  lan-
                            guages  and  libraries.  However,  DynamoDB treats
                            them as number type  attributes  for  mathematical
                            operations.

                            (string)

                        BS -> (list)
                            An attribute of type Binary Set. For example:
                               "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                            (blob)

                        M -> (map)
                            An attribute of type Map. For example:
                               "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                            key -> (string)

                            ( ... recursive ... )

                        L -> (list)
                            An attribute of type List. For example:
                               "L":  [  {"S":  "Cookies"}  ,  {"S": "Coffee"},
                               {"N": "3.14159"}]

                            ( ... recursive ... )

                        NULL -> (boolean)
                            An attribute of type Null. For example:
                               "NULL": true

                        BOOL -> (boolean)
                            An attribute of type Boolean. For example:
                               "BOOL": true

                 L -> (list)
                     An attribute of type List. For example:
                        "L": [  {"S":  "Cookies"}  ,  {"S":  "Coffee"},  {"N":
                        "3.14159"}]

                     (structure)
                        Represents the data for an attribute.

                        Each  attribute  value  is  described  as a name-value
                        pair. The name is the data type, and the value is  the
                        data itself.

                        For more information, see Data Types in the Amazon Dy-
                        namoDB Developer Guide .

                        S -> (string)
                            An attribute of type String. For example:
                               "S": "Hello"

                        N -> (string)
                            An attribute of type Number. For example:
                               "N": "123.45"

                            Numbers are sent across the network to DynamoDB as
                            strings,  to  maximize  compatibility  across lan-
                            guages and  libraries.  However,  DynamoDB  treats
                            them  as  number  type attributes for mathematical
                            operations.

                        B -> (blob)
                            An attribute of type Binary. For example:
                               "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                        SS -> (list)
                            An attribute of type String Set. For example:
                               "SS": ["Giraffe", "Hippo" ,"Zebra"]

                            (string)

                        NS -> (list)
                            An attribute of type Number Set. For example:
                               "NS": ["42.2", "-19", "7.5", "3.14"]

                            Numbers are sent across the network to DynamoDB as
                            strings,  to  maximize  compatibility  across lan-
                            guages and  libraries.  However,  DynamoDB  treats
                            them  as  number  type attributes for mathematical
                            operations.

                            (string)

                        BS -> (list)
                            An attribute of type Binary Set. For example:
                               "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                            (blob)

                        M -> (map)
                            An attribute of type Map. For example:
                               "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                            key -> (string)

                            ( ... recursive ... )

                        L -> (list)
                            An attribute of type List. For example:
                               "L": [  {"S":  "Cookies"}  ,  {"S":  "Coffee"},
                               {"N": "3.14159"}]

                            ( ... recursive ... )

                        NULL -> (boolean)
                            An attribute of type Null. For example:
                               "NULL": true

                        BOOL -> (boolean)
                            An attribute of type Boolean. For example:
                               "BOOL": true

                 NULL -> (boolean)
                     An attribute of type Null. For example:
                        "NULL": true

                 BOOL -> (boolean)
                     An attribute of type Boolean. For example:
                        "BOOL": true

       NextToken -> (string)
          If the response of a read request exceeds the response payload limit
          DynamoDB will set this value in the response. If set,  you  can  use
          that  this  value in the subsequent request to get the remaining re-
          sults.

       ConsumedCapacity -> (structure)
          The capacity units consumed by an operation. The data  returned  in-
          cludes the total provisioned throughput consumed, along with statis-
          tics for the table and any indexes involved in the  operation.  Con-
          sumedCapacity is only returned if the request asked for it. For more
          information, see Provisioned Throughput in the Amazon  DynamoDB  De-
          veloper Guide .

          TableName -> (string)
              The name of the table that was affected by the operation.

          CapacityUnits -> (double)
              The total number of capacity units consumed by the operation.

          ReadCapacityUnits -> (double)
              The  total  number of read capacity units consumed by the opera-
              tion.

          WriteCapacityUnits -> (double)
              The total number of write capacity units consumed by the  opera-
              tion.

          Table -> (structure)
              The  amount  of throughput consumed on the table affected by the
              operation.

              ReadCapacityUnits -> (double)
                 The total number of read capacity units consumed on  a  table
                 or an index.

              WriteCapacityUnits -> (double)
                 The  total number of write capacity units consumed on a table
                 or an index.

              CapacityUnits -> (double)
                 The total number of capacity units consumed on a table or  an
                 index.

          LocalSecondaryIndexes -> (map)
              The  amount  of throughput consumed on each local index affected
              by the operation.

              key -> (string)

              value -> (structure)
                 Represents the amount of provisioned throughput capacity con-
                 sumed on a table or an index.

                 ReadCapacityUnits -> (double)
                     The total number of read capacity units consumed on a ta-
                     ble or an index.

                 WriteCapacityUnits -> (double)
                     The total number of write capacity units  consumed  on  a
                     table or an index.

                 CapacityUnits -> (double)
                     The total number of capacity units consumed on a table or
                     an index.

          GlobalSecondaryIndexes -> (map)
              The amount of throughput consumed on each global index  affected
              by the operation.

              key -> (string)

              value -> (structure)
                 Represents the amount of provisioned throughput capacity con-
                 sumed on a table or an index.

                 ReadCapacityUnits -> (double)
                     The total number of read capacity units consumed on a ta-
                     ble or an index.

                 WriteCapacityUnits -> (double)
                     The  total  number  of write capacity units consumed on a
                     table or an index.

                 CapacityUnits -> (double)
                     The total number of capacity units consumed on a table or
                     an index.

       LastEvaluatedKey -> (map)
          The  primary  key of the item where the operation stopped, inclusive
          of the previous result set. Use this value to start a new operation,
          excluding  this  value  in  the  new request. If LastEvaluatedKey is
          empty, then the "last page" of results has been processed and  there
          is  no  more data to be retrieved. If LastEvaluatedKey is not empty,
          it does not necessarily mean that there is more data in  the  result
          set.  The  only way to know when you have reached the end of the re-
          sult set is when LastEvaluatedKey is empty.

          key -> (string)

          value -> (structure)
              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name
              is the data type, and the value is the data itself.

              For  more information, see Data Types in the Amazon DynamoDB De-
              veloper Guide .

              S -> (string)
                 An attribute of type String. For example:
                     "S": "Hello"

              N -> (string)
                 An attribute of type Number. For example:
                     "N": "123.45"

                 Numbers are sent across the network to DynamoDB  as  strings,
                 to  maximize  compatibility  across  languages and libraries.
                 However, DynamoDB treats them as number type  attributes  for
                 mathematical operations.

              B -> (blob)
                 An attribute of type Binary. For example:
                     "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

              SS -> (list)
                 An attribute of type String Set. For example:
                     "SS": ["Giraffe", "Hippo" ,"Zebra"]

                 (string)

              NS -> (list)
                 An attribute of type Number Set. For example:
                     "NS": ["42.2", "-19", "7.5", "3.14"]

                 Numbers  are  sent across the network to DynamoDB as strings,
                 to maximize compatibility  across  languages  and  libraries.
                 However,  DynamoDB  treats them as number type attributes for
                 mathematical operations.

                 (string)

              BS -> (list)
                 An attribute of type Binary Set. For example:
                     "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                 (blob)

              M -> (map)
                 An attribute of type Map. For example:
                     "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                 key -> (string)

                 value -> (structure)
                     Represents the data for an attribute.

                     Each attribute value is described as a  name-value  pair.
                     The  name is the data type, and the value is the data it-
                     self.

                     For more information, see Data Types in  the  Amazon  Dy-
                     namoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L":  [  {"S": "Cookies"} , {"S": "Coffee"}, {"N":
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              L -> (list)
                 An attribute of type List. For example:
                     "L":  [  {"S":  "Cookies"}  ,  {"S":   "Coffee"},   {"N":
                     "3.14159"}]

                 (structure)
                     Represents the data for an attribute.

                     Each  attribute  value is described as a name-value pair.
                     The name is the data type, and the value is the data  it-
                     self.

                     For  more  information,  see Data Types in the Amazon Dy-
                     namoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L": [ {"S": "Cookies"} , {"S":  "Coffee"},  {"N":
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              NULL -> (boolean)
                 An attribute of type Null. For example:
                     "NULL": true

              BOOL -> (boolean)
                 An attribute of type Boolean. For example:
                     "BOOL": true



                                                           EXECUTE-STATEMENT()
