PUT-METHOD()                                                      PUT-METHOD()



NAME
       put-method -

DESCRIPTION
       Add a method to an existing Resource resource.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            put-method
          --rest-api-id <value>
          --resource-id <value>
          --http-method <value>
          --authorization-type <value>
          [--authorizer-id <value>]
          [--api-key-required | --no-api-key-required]
          [--operation-name <value>]
          [--request-parameters <value>]
          [--request-models <value>]
          [--request-validator-id <value>]
          [--authorization-scopes <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]

OPTIONS
       --rest-api-id (string)
          The string identifier of the associated RestApi.

       --resource-id (string)
          The Resource identifier for the new Method resource.

       --http-method (string)
          Specifies the method request's HTTP method type.

       --authorization-type (string)
          The  method's authorization type. Valid values are NONE for open ac-
          cess, AWS_IAM for using AWS IAM permissions, CUSTOM for using a cus-
          tom authorizer, or COGNITO_USER_POOLS for using a Cognito user pool.

       --authorizer-id (string)
          Specifies  the identifier of an Authorizer to use on this Method, if
          the type is CUSTOM or COGNITO_USER_POOLS. The authorizer  identifier
          is generated by API Gateway when you created the authorizer.

       --api-key-required | --no-api-key-required (boolean)
          Specifies whether the method required a valid ApiKey.

       --operation-name (string)
          A  human-friendly  operation identifier for the method. For example,
          you can assign the operationName  of  ListPets  for  the  GET  /pets
          method in the PetStore example.

       --request-parameters (map)
          A key-value map defining required or optional method request parame-
          ters that can be accepted by API Gateway. A key defines a method re-
          quest  parameter  name matching the pattern of method.request.{loca-
          tion}.{name} , where location is querystring , path , or header  and
          name is a valid and unique parameter name. The value associated with
          the key is a Boolean flag indicating whether the  parameter  is  re-
          quired  (true  )  or optional (false ). The method request parameter
          names defined here are available in Integration to be mapped to  in-
          tegration request parameters or body-mapping templates.

          key -> (string)

          value -> (boolean)

       Shorthand Syntax:

          KeyName1=boolean,KeyName2=boolean

       JSON Syntax:

          {"string": true|false
            ...}

       --request-models (map)
          Specifies  the  Model resources used for the request's content type.
          Request models are represented as a key/value map,  with  a  content
          type as the key and a Model name as the value.

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --request-validator-id (string)
          The  identifier  of a RequestValidator for validating the method re-
          quest.

       --authorization-scopes (list)
          A list of authorization scopes configured on the method. The  scopes
          are  used  with  a  COGNITO_USER_POOLS  authorizer  to authorize the
          method invocation. The authorization works by  matching  the  method
          scopes against the scopes parsed from the access token in the incom-
          ing request. The method  invocation  is  authorized  if  any  method
          scopes  matches  a claimed scope in the access token. Otherwise, the
          invocation is not authorized. When the method scope  is  configured,
          the client must provide an access token instead of an identity token
          for authorization purposes.

          (string)

       Syntax:

          "string" "string" ...

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To  create  a method for a resource in an API with no authorization, no
       API key, and a custom method request header

       Command:

          aws apigateway put-method --rest-api-id 1234123412 --resource-id a1b2c3 --http-method PUT --authorization-type "NONE" --no-api-key-required --request-parameters "method.request.header.custom-header=false"

OUTPUT
       httpMethod -> (string)
          The method's HTTP verb.

       authorizationType -> (string)
          The method's authorization type. Valid values are NONE for open  ac-
          cess, AWS_IAM for using AWS IAM permissions, CUSTOM for using a cus-
          tom authorizer, or COGNITO_USER_POOLS for using a Cognito user pool.

       authorizerId -> (string)
          The identifier of an Authorizer to use on this  method.  The  autho-
          rizationType must be CUSTOM .

       apiKeyRequired -> (boolean)
          A  boolean flag specifying whether a valid ApiKey is required to in-
          voke this method.

       requestValidatorId -> (string)
          The identifier of a RequestValidator for request validation.

       operationName -> (string)
          A human-friendly operation identifier for the method.  For  example,
          you  can  assign  the  operationName  of  ListPets for the GET /pets
          method in the PetStore example.

       requestParameters -> (map)
          A key-value map defining required or optional method request parame-
          ters  that can be accepted by API Gateway. A key is a method request
          parameter  name  matching  the  pattern   of   method.request.{loca-
          tion}.{name}  , where location is querystring , path , or header and
          name is a valid and unique parameter name. The value associated with
          the  key  is  a Boolean flag indicating whether the parameter is re-
          quired (true ) or optional (false ). The  method  request  parameter
          names  defined here are available in Integration to be mapped to in-
          tegration request parameters or templates.

          key -> (string)

          value -> (boolean)

       requestModels -> (map)
          A key-value map specifying data schemas, represented  by  Model  re-
          sources, (as the mapped value) of the request payloads of given con-
          tent types (as the mapping key).

          key -> (string)

          value -> (string)

       methodResponses -> (map)
          Gets a method response associated with a given HTTP status code.

          key -> (string)

          value -> (structure)
              Represents a method response of a given  HTTP  status  code  re-
              turned  to  the  client.  The method response is passed from the
              back end through the associated integration response that can be
              transformed using a mapping template.

              statusCode -> (string)
                 The method response's status code.

              responseParameters -> (map)
                 A  key-value map specifying required or optional response pa-
                 rameters that API Gateway can send back to the caller. A  key
                 defines  a  method  response  header  and the value specifies
                 whether the associated method response header is required  or
                 not.  The  expression  of  the  key  must  match  the pattern
                 method.response.header.{name} , where name  is  a  valid  and
                 unique  header  name.  API Gateway passes certain integration
                 response data to the method response headers  specified  here
                 according  to the mapping you prescribe in the API's Integra-
                 tionResponse. The  integration  response  data  that  can  be
                 mapped  include  an  integration response header expressed in
                 integration.response.header.{name} , a static value  enclosed
                 within  a  pair of single quotes (e.g., 'application/json' ),
                 or a JSON expression from the back-end  response  payload  in
                 the  form  of  integration.response.body.{JSON-expression}  ,
                 where JSON-expression is a valid JSON expression without  the
                 $ prefix.)

                 key -> (string)

                 value -> (boolean)

              responseModels -> (map)
                 Specifies  the  Model  resources used for the response's con-
                 tent-type. Response models are  represented  as  a  key/value
                 map,  with  a content-type as the key and a Model name as the
                 value.

                 key -> (string)

                 value -> (string)

       methodIntegration -> (structure)
          Gets  the  method's  integration   responsible   for   passing   the
          client-submitted  request  to  the back end and performing necessary
          transformations to make the request compliant with the back end.

          type -> (string)
              Specifies an API method integration type. The valid value is one
              of the following:

              For  the  HTTP and HTTP proxy integrations, each integration can
              specify a protocol (http/https ), port and path. Standard 80 and
              443  ports  are supported as well as custom ports above 1024. An
              HTTP or HTTP proxy integration with a connectionType of VPC_LINK
              is  referred  to  as a private integration and uses a VpcLink to
              connect API Gateway to a network load balancer of a VPC.

          httpMethod -> (string)
              Specifies the integration's HTTP method type.

          uri -> (string)
              Specifies Uniform Resource Identifier (URI) of  the  integration
              endpoint.

              For  HTTP  or  HTTP_PROXY  integrations, the URI must be a fully
              formed, encoded HTTP(S) URL according to the RFC-3986 specifica-
              tion,  for  either standard integration, where connectionType is
              not VPC_LINK , or private integration, where  connectionType  is
              VPC_LINK  .  For a private HTTP integration, the URI is not used
              for routing. For AWS or AWS_PROXY integrations, the  URI  is  of
              the   form   arn:aws:apigateway:{region}:{subdomain.service|ser-
              vice}:path|action/{service_api} .  Here,  {Region}  is  the  API
              Gateway  region  (e.g., us-east-1); {service} is the name of the
              integrated Amazon Web Services service (e.g., s3);  and  {subdo-
              main}  is a designated subdomain supported by certain Amazon Web
              Services service for fast host-name lookup. action can  be  used
              for  an  Amazon  Web Services service action-based API, using an
              Action={name}&{p1}={v1}&p2={v2}...  query  string.  The  ensuing
              {service_api}  refers  to a supported action {name} plus any re-
              quired input parameters. Alternatively, path can be used for  an
              AWS  service  path-based  API. The ensuing service_api refers to
              the path to an Amazon Web Services service  resource,  including
              the region of the integrated Amazon Web Services service, if ap-
              plicable. For example, for integration with the S3 API of GetOb-
              ject,  the uri can be either arn:aws:apigateway:us-west-2:s3:ac-
              tion/GetObject&Bucket={bucket}&Key={key}   or   arn:aws:apigate-
              way:us-west-2:s3:path/{bucket}/{key}

          connectionType -> (string)
              The  type of the network connection to the integration endpoint.
              The valid value is INTERNET for connections through  the  public
              routable  internet  or  VPC_LINK for private connections between
              API Gateway and a network load balancer in a  VPC.  The  default
              value is INTERNET .

          connectionId -> (string)
              The  ID of the VpcLink used for the integration when connection-
              Type=VPC_LINK and undefined, otherwise.

          credentials -> (string)
              Specifies the credentials required for the integration, if  any.
              For AWS integrations, three options are available. To specify an
              IAM Role for API Gateway to assume, use the  role's  Amazon  Re-
              source  Name  (ARN).  To  require  that the caller's identity be
              passed  through   from   the   request,   specify   the   string
              arn:aws:iam::\*:user/\*  .  To use resource-based permissions on
              supported AWS services, specify null.

          requestParameters -> (map)
              A key-value map specifying request parameters  that  are  passed
              from  the method request to the back end. The key is an integra-
              tion request parameter name and the associated value is a method
              request  parameter  value  or static value that must be enclosed
              within single quotes and pre-encoded as  required  by  the  back
              end.  The  method request parameter value must match the pattern
              of method.request.{location}.{name} , where location is  querys-
              tring  ,  path  ,  or header and name must be a valid and unique
              method request parameter name.

              key -> (string)

              value -> (string)

          requestTemplates -> (map)
              Represents a map of Velocity templates that are applied  on  the
              request  payload  based  on the value of the Content-Type header
              sent by the client. The content type value is the  key  in  this
              map, and the template (as a String) is the value.

              key -> (string)

              value -> (string)

          passthroughBehavior -> (string)
              Specifies  how  the  method  request body of an unmapped content
              type will be passed through the integration request to the  back
              end  without  transformation.  A  content type is unmapped if no
              mapping template is defined in the integration  or  the  content
              type  does  not match any of the mapped content types, as speci-
              fied in requestTemplates . The valid value is one of the follow-
              ing:  WHEN_NO_MATCH : passes the method request body through the
              integration request to the back end without transformation  when
              the  method request content type does not match any content type
              associated with the mapping templates defined in the integration
              request.  WHEN_NO_TEMPLATES  :  passes  the  method request body
              through the integration request to the back end  without  trans-
              formation when no mapping template is defined in the integration
              request. If a template is defined when this option is  selected,
              the  method request of an unmapped content-type will be rejected
              with an HTTP 415 Unsupported Media Type response.  NEVER  :  re-
              jects the method request with an HTTP 415 Unsupported Media Type
              response when either the method request content  type  does  not
              match any content type associated with the mapping templates de-
              fined in the integration request or no mapping template  is  de-
              fined in the integration request.

          contentHandling -> (string)
              Specifies  how  to  handle  request payload content type conver-
              sions.  Supported  values   are   CONVERT_TO_BINARY   and   CON-
              VERT_TO_TEXT , with the following behaviors:

              If  this  property  is  not defined, the request payload will be
              passed through from the method request  to  integration  request
              without  modification,  provided that the passthroughBehavior is
              configured to support payload pass-through.

          timeoutInMillis -> (integer)
              Custom timeout between 50 and 29,000 milliseconds.  The  default
              value is 29,000 milliseconds or 29 seconds.

          cacheNamespace -> (string)
              Specifies  a group of related cached parameters. By default, API
              Gateway uses the resource ID as the  cacheNamespace  .  You  can
              specify  the  same cacheNamespace across resources to return the
              same cached data for requests to different resources.

          cacheKeyParameters -> (list)
              A list of request parameters whose values API Gateway caches. To
              be  valid  values for cacheKeyParameters , these parameters must
              also be specified for Method requestParameters .

              (string)

          integrationResponses -> (map)
              Specifies the integration's responses.

              key -> (string)

              value -> (structure)
                 Represents an integration response. The status code must  map
                 to  an  existing MethodResponse, and parameters and templates
                 can be used to transform the back-end response.

                 statusCode -> (string)
                     Specifies the status code that is used to map  the  inte-
                     gration response to an existing MethodResponse.

                 selectionPattern -> (string)
                     Specifies  the regular expression (regex) pattern used to
                     choose an integration response based on the response from
                     the  back  end.  For example, if the success response re-
                     turns nothing and the error response returns some string,
                     you  could use the .+ regex to match error response. How-
                     ever, make sure that the error response does not  contain
                     any  newline  (\n  ) character in such cases. If the back
                     end is an AWS Lambda function, the  AWS  Lambda  function
                     error  header is matched. For all other HTTP and AWS back
                     ends, the HTTP status code is matched.

                 responseParameters -> (map)
                     A key-value map specifying response parameters  that  are
                     passed  to the method response from the back end. The key
                     is a method response header parameter name and the mapped
                     value  is  an integration response header value, a static
                     value enclosed within a pair of single quotes, or a  JSON
                     expression  from  the integration response body. The map-
                     ping  key  must   match   the   pattern   of   method.re-
                     sponse.header.{name}  ,  where name is a valid and unique
                     header name. The mapped non-static value must  match  the
                     pattern of integration.response.header.{name} or integra-
                     tion.response.body.{JSON-expression} , where  name  is  a
                     valid and unique response header name and JSON-expression
                     is a valid JSON expression without the $ prefix.

                     key -> (string)

                     value -> (string)

                 responseTemplates -> (map)
                     Specifies the templates used to transform the integration
                     response  body.  Response  templates are represented as a
                     key/value map, with a content-type as the key and a  tem-
                     plate as the value.

                     key -> (string)

                     value -> (string)

                 contentHandling -> (string)
                     Specifies  how  to  handle  response payload content type
                     conversions. Supported values are  CONVERT_TO_BINARY  and
                     CONVERT_TO_TEXT , with the following behaviors:

                     If  this  property  is  not defined, the response payload
                     will be passed through from the integration  response  to
                     the method response without modification.

          tlsConfig -> (structure)
              Specifies the TLS configuration for an integration.

              insecureSkipVerification -> (boolean)
                 Specifies  whether or not API Gateway skips verification that
                 the certificate for an integration endpoint is  issued  by  a
                 supported  certificate  authority. This isnt recommended, but
                 it enables you to use certificates that are signed by private
                 certificate    authorities,    or   certificates   that   are
                 self-signed. If enabled, API  Gateway  still  performs  basic
                 certificate  validation, which includes checking the certifi-
                 cate's expiration date, hostname, and presence of a root cer-
                 tificate  authority.  Supported  only for HTTP and HTTP_PROXY
                 integrations.

                 WARNING:
                     Enabling insecureSkipVerification isn't recommended,  es-
                     pecially for integrations with public HTTPS endpoints. If
                     you enable insecureSkipVerification ,  you  increase  the
                     risk of man-in-the-middle attacks.

       authorizationScopes -> (list)
          A  list of authorization scopes configured on the method. The scopes
          are used with  a  COGNITO_USER_POOLS  authorizer  to  authorize  the
          method  invocation.  The  authorization works by matching the method
          scopes against the scopes parsed from the access token in the incom-
          ing  request.  The  method  invocation  is  authorized if any method
          scopes matches a claimed scope in the access token.  Otherwise,  the
          invocation  is  not authorized. When the method scope is configured,
          the client must provide an access token instead of an identity token
          for authorization purposes.

          (string)



                                                                  PUT-METHOD()
