REGISTER-SCALABLE-TARGET()                          REGISTER-SCALABLE-TARGET()



NAME
       register-scalable-target -

DESCRIPTION
       Registers  or updates a scalable target, which is the resource that you
       want to scale.

       Scalable targets are uniquely identified by the combination of resource
       ID,  scalable  dimension, and namespace, which represents some capacity
       dimension of the underlying service.

       When you register a new scalable target, you must  specify  values  for
       the  minimum and maximum capacity. If the specified resource is not ac-
       tive in the target service, this operation  does  not  change  the  re-
       source's current capacity. Otherwise, it changes the resource's current
       capacity to a value that is inside of this range.

       If you add a scaling policy, current capacity is adjustable within  the
       specified  range  when scaling starts. Application Auto Scaling scaling
       policies will not scale capacity to values that are outside of the min-
       imum and maximum range.

       After  you  register  a scalable target, you do not need to register it
       again to use other Application Auto Scaling operations.  To  see  which
       resources  have  been registered, use DescribeScalableTargets . You can
       also view the  scaling  policies  for  a  service  namespace  by  using
       DescribeScalableTargets  . If you no longer need a scalable target, you
       can deregister it by using DeregisterScalableTarget .

       To update a scalable target, specify the parameters that  you  want  to
       change.  Include  the parameters that identify the scalable target: re-
       source ID, scalable dimension, and namespace. Any parameters  that  you
       don't specify are not changed by this update request.

       NOTE:
          If  you  call  the  RegisterScalableTarget API operation to create a
          scalable target, there might be a brief delay  until  the  operation
          achieves eventual consistency . You might become aware of this brief
          delay if you get unexpected errors when performing sequential opera-
          tions. The typical strategy is to retry the request, and some Amazon
          Web Services SDKs include automatic backoff and retry logic.

          If you call the RegisterScalableTarget API operation  to  update  an
          existing  scalable  target,  Application  Auto Scaling retrieves the
          current capacity of the resource. If it's below the minimum capacity
          or  above the maximum capacity, Application Auto Scaling adjusts the
          capacity of the scalable target to place  it  within  these  bounds,
          even if you don't include the MinCapacity or MaxCapacity request pa-
          rameters.

       See also: AWS API Documentation

SYNOPSIS
            register-scalable-target
          --service-namespace <value>
          --resource-id <value>
          --scalable-dimension <value>
          [--min-capacity <value>]
          [--max-capacity <value>]
          [--role-arn <value>]
          [--suspended-state <value>]
          [--tags <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --service-namespace (string)
          The namespace of the Amazon Web Services service that  provides  the
          resource.  For  a  resource provided by your own application or ser-
          vice, use custom-resource instead.

          Possible values:

          o ecs

          o elasticmapreduce

          o ec2

          o appstream

          o dynamodb

          o rds

          o sagemaker

          o custom-resource

          o comprehend

          o lambda

          o cassandra

          o kafka

          o elasticache

          o neptune

       --resource-id (string)
          The identifier of the resource that is associated with the  scalable
          target. This string consists of the resource type and unique identi-
          fier.

          o ECS service - The resource type is service and the unique  identi-
            fier  is  the  cluster name and service name. Example: service/de-
            fault/sample-webapp .

          o Spot Fleet - The  resource  type  is  spot-fleet-request  and  the
            unique   identifier   is  the  Spot  Fleet  request  ID.  Example:
            spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE .

          o EMR cluster - The resource type is instancegroup  and  the  unique
            identifier  is  the cluster ID and instance group ID. Example: in-
            stancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0 .

          o AppStream 2.0 fleet - The resource type is fleet  and  the  unique
            identifier is the fleet name. Example: fleet/sample-fleet .

          o DynamoDB table - The resource type is table and the unique identi-
            fier is the table name. Example: table/my-table .

          o DynamoDB global secondary index - The resource type is  index  and
            the  unique  identifier  is  the index name. Example: table/my-ta-
            ble/index/my-table-index .

          o Aurora DB cluster - The resource type is cluster  and  the  unique
            identifier is the cluster name. Example: cluster:my-db-cluster .

          o SageMaker  endpoint variant - The resource type is variant and the
            unique   identifier   is   the   resource   ID.   Example:    end-
            point/my-end-point/variant/KMeansClustering .

          o Custom  resources are not supported with a resource type. This pa-
            rameter must specify the OutputValue from the CloudFormation  tem-
            plate stack used to access the resources. The unique identifier is
            defined by the service provider. More information is available  in
            our GitHub repository .

          o Amazon  Comprehend document classification endpoint - The resource
            type and unique identifier are specified using the  endpoint  ARN.
            Example:  arn:aws:comprehend:us-west-2:123456789012:document-clas-
            sifier-endpoint/EXAMPLE .

          o Amazon Comprehend entity recognizer endpoint - The  resource  type
            and  unique identifier are specified using the endpoint ARN. Exam-
            ple:       arn:aws:comprehend:us-west-2:123456789012:entity-recog-
            nizer-endpoint/EXAMPLE .

          o Lambda provisioned concurrency - The resource type is function and
            the unique identifier is the function name with a function version
            or  alias  name  suffix  that  is  not  $LATEST  .  Example: func-
            tion:my-function:prod or function:my-function:1 .

          o Amazon Keyspaces table - The resource type is table and the unique
            identifier  is  the  table  name. Example: keyspace/mykeyspace/ta-
            ble/mytable .

          o Amazon MSK cluster - The resource type and unique  identifier  are
            specified      using      the      cluster      ARN.      Example:
            arn:aws:kafka:us-east-1:123456789012:cluster/demo-clus-
            ter-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5 .

          o Amazon ElastiCache replication group - The resource type is repli-
            cation-group and the unique identifier is  the  replication  group
            name. Example: replication-group/mycluster .

          o Neptune  cluster  -  The  resource  type is cluster and the unique
            identifier is the cluster name. Example: cluster:mycluster .

       --scalable-dimension (string)
          The scalable dimension associated with  the  scalable  target.  This
          string consists of the service namespace, resource type, and scaling
          property.

          o ecs:service:DesiredCount - The desired task count of an  ECS  ser-
            vice.

          o elasticmapreduce:instancegroup:InstanceCount  - The instance count
            of an EMR Instance Group.

          o ec2:spot-fleet-request:TargetCapacity - The target capacity  of  a
            Spot Fleet.

          o appstream:fleet:DesiredCapacity  - The desired capacity of an App-
            Stream 2.0 fleet.

          o dynamodb:table:ReadCapacityUnits - The provisioned  read  capacity
            for a DynamoDB table.

          o dynamodb:table:WriteCapacityUnits - The provisioned write capacity
            for a DynamoDB table.

          o dynamodb:index:ReadCapacityUnits - The provisioned  read  capacity
            for a DynamoDB global secondary index.

          o dynamodb:index:WriteCapacityUnits - The provisioned write capacity
            for a DynamoDB global secondary index.

          o rds:cluster:ReadReplicaCount - The count of Aurora Replicas in  an
            Aurora  DB  cluster. Available for Aurora MySQL-compatible edition
            and Aurora PostgreSQL-compatible edition.

          o sagemaker:variant:DesiredInstanceCount - The  number  of  EC2  in-
            stances for a SageMaker model endpoint variant.

          o custom-resource:ResourceType:Property - The scalable dimension for
            a custom resource provided by your own application or service.

          o comprehend:document-classifier-endpoint:DesiredInferenceUnits    -
            The  number  of  inference units for an Amazon Comprehend document
            classification endpoint.

          o comprehend:entity-recognizer-endpoint:DesiredInferenceUnits -  The
            number  of  inference units for an Amazon Comprehend entity recog-
            nizer endpoint.

          o lambda:function:ProvisionedConcurrency - The  provisioned  concur-
            rency for a Lambda function.

          o cassandra:table:ReadCapacityUnits  - The provisioned read capacity
            for an Amazon Keyspaces table.

          o cassandra:table:WriteCapacityUnits - The provisioned write  capac-
            ity for an Amazon Keyspaces table.

          o kafka:broker-storage:VolumeSize  - The provisioned volume size (in
            GiB) for brokers in an Amazon MSK cluster.

          o elasticache:replication-group:NodeGroups  -  The  number  of  node
            groups for an Amazon ElastiCache replication group.

          o elasticache:replication-group:Replicas  -  The  number of replicas
            per node group for an Amazon ElastiCache replication group.

          o neptune:cluster:ReadReplicaCount - The count of read  replicas  in
            an Amazon Neptune DB cluster.

          Possible values:

          o ecs:service:DesiredCount

          o ec2:spot-fleet-request:TargetCapacity

          o elasticmapreduce:instancegroup:InstanceCount

          o appstream:fleet:DesiredCapacity

          o dynamodb:table:ReadCapacityUnits

          o dynamodb:table:WriteCapacityUnits

          o dynamodb:index:ReadCapacityUnits

          o dynamodb:index:WriteCapacityUnits

          o rds:cluster:ReadReplicaCount

          o sagemaker:variant:DesiredInstanceCount

          o custom-resource:ResourceType:Property

          o comprehend:document-classifier-endpoint:DesiredInferenceUnits

          o comprehend:entity-recognizer-endpoint:DesiredInferenceUnits

          o lambda:function:ProvisionedConcurrency

          o cassandra:table:ReadCapacityUnits

          o cassandra:table:WriteCapacityUnits

          o kafka:broker-storage:VolumeSize

          o elasticache:replication-group:NodeGroups

          o elasticache:replication-group:Replicas

          o neptune:cluster:ReadReplicaCount

       --min-capacity (integer)
          The  minimum value that you plan to scale in to. When a scaling pol-
          icy is in effect, Application Auto Scaling can scale  in  (contract)
          as  needed to the minimum capacity limit in response to changing de-
          mand. This property is required when registering a new scalable tar-
          get.

          For the following resources, the minimum value allowed is 0.

          o AppStream 2.0 fleets

          o Aurora DB clusters

          o ECS services

          o EMR clusters

          o Lambda provisioned concurrency

          o SageMaker endpoint variants

          o Spot Fleets

          o custom resources

          It's strongly recommended that you specify a value greater than 0. A
          value greater than 0 means that data  points  are  continuously  re-
          ported  to  CloudWatch  that  scaling policies can use to scale on a
          metric like average CPU utilization.

          For all other resources, the minimum allowed value  depends  on  the
          type  of resource that you are using. If you provide a value that is
          lower than what a resource can accept, an  error  occurs.  In  which
          case,  the error message will provide the minimum value that the re-
          source can accept.

       --max-capacity (integer)
          The maximum value that you plan to scale out to. When a scaling pol-
          icy is in effect, Application Auto Scaling can scale out (expand) as
          needed to the maximum capacity limit in response to changing demand.
          This property is required when registering a new scalable target.

          Although you can specify a large maximum capacity, note that service
          quotas might impose lower limits. Each service has its  own  default
          quotas  for  the  maximum  capacity  of the resource. If you want to
          specify a higher limit, you can request an increase. For more infor-
          mation,  consult the documentation for that service. For information
          about the default quotas for each service, see Service endpoints and
          quotas in the Amazon Web Services General Reference .

       --role-arn (string)
          This  parameter  is  required  for services that do not support ser-
          vice-linked roles (such as Amazon EMR), and it must specify the  ARN
          of  an  IAM  role that allows Application Auto Scaling to modify the
          scalable target on your behalf.

          If the service supports service-linked roles, Application Auto Scal-
          ing  uses a service-linked role, which it creates if it does not yet
          exist. For more information, see Application Auto Scaling IAM  roles
          .

       --suspended-state (structure)
          An  embedded  object  that  contains attributes and attribute values
          that are used to suspend and resume automatic scaling.  Setting  the
          value of an attribute to true suspends the specified scaling activi-
          ties. Setting it to false (default) resumes  the  specified  scaling
          activities.
              Suspension Outcomes

          o For  DynamicScalingInSuspended  , while a suspension is in effect,
            all scale-in activities that are triggered by a scaling policy are
            suspended.

          o For  DynamicScalingOutSuspended , while a suspension is in effect,
            all scale-out activities that are triggered by  a  scaling  policy
            are suspended.

          o For  ScheduledScalingSuspended  , while a suspension is in effect,
            all scaling activities that involve  scheduled  actions  are  sus-
            pended.

          For more information, see Suspending and resuming scaling in the Ap-
          plication Auto Scaling User Guide .

          DynamicScalingInSuspended -> (boolean)
              Whether scale in by a target tracking scaling policy or  a  step
              scaling  policy is suspended. Set the value to true if you don't
              want Application Auto Scaling to remove capacity when a  scaling
              policy is triggered. The default is false .

          DynamicScalingOutSuspended -> (boolean)
              Whether  scale out by a target tracking scaling policy or a step
              scaling policy is suspended. Set the value to true if you  don't
              want  Application  Auto  Scaling  to add capacity when a scaling
              policy is triggered. The default is false .

          ScheduledScalingSuspended -> (boolean)
              Whether scheduled scaling is suspended. Set the value to true if
              you  don't want Application Auto Scaling to add or remove capac-
              ity by initiating scheduled actions. The default is false .

       Shorthand Syntax:

          DynamicScalingInSuspended=boolean,DynamicScalingOutSuspended=boolean,ScheduledScalingSuspended=boolean

       JSON Syntax:

          {
            "DynamicScalingInSuspended": true|false,
            "DynamicScalingOutSuspended": true|false,
            "ScheduledScalingSuspended": true|false
          }

       --tags (map)
          Assigns one or more tags to the scalable target. Use this  parameter
          to  tag  the  scalable target when it is created. To tag an existing
          scalable target, use the  TagResource operation.

          Each tag consists of a tag key and a tag value. Both the tag key and
          the  tag  value are required. You cannot have more than one tag on a
          scalable target with the same tag key.

          Use tags to control access to a scalable target. For  more  informa-
          tion, see Tagging support for Application Auto Scaling in the Appli-
          cation Auto Scaling User Guide .

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --cli-input-json (string) Performs service operation based on the  JSON
       string  provided. The JSON string follows the format provided by --gen-
       erate-cli-skeleton. If other arguments  are  provided  on  the  command
       line,  the CLI values will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. If provided with the value output,  it  validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By  default, the AWS CLI uses SSL when communicating with AWS services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do  not  sign requests. Credentials will not be loaded if this argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The  maximum socket read time in seconds. If the value is set to 0, the
       socket read will be blocking and not timeout. The default value  is  60
       seconds.

       --cli-connect-timeout (int)

       The  maximum  socket connect time in seconds. If the value is set to 0,
       the socket connect will be blocking and not timeout. The default  value
       is 60 seconds.

EXAMPLES
       NOTE:
          To  use  the following examples, you must have the AWS CLI installed
          and configured. See the Getting started guide in the  AWS  CLI  User
          Guide for more information.

          Unless  otherwise  stated,  all  examples  have  unix-like quotation
          rules. These examples will need to be  adapted  to  your  terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       Example 1: To register a new scalable target for Amazon ECS

       The following register-scalable-target  example  registers  a  scalable
       target for an Amazon ECS service called web-app, running on the default
       cluster, with a minimum desired count of 1 task and a  maximum  desired
       count of 10 tasks.

          aws application-autoscaling register-scalable-target \
              --service-namespace ecs \
              --scalable-dimension ecs:service:DesiredCount \
              --resource-id service/default/web-app \
              --min-capacity 1 \
              --max-capacity 10

       Example 2: To register a new scalable target for a Spot Fleet

       The following register-scalable-target example registers the target ca-
       pacity of an Amazon EC2 Spot Fleet request using its request ID, with a
       minimum capacity of 2 instances and a maximum capacity of 10 instances.

          aws application-autoscaling register-scalable-target \
              --service-namespace ec2 \
              --scalable-dimension ec2:spot-fleet-request:TargetCapacity \
              --resource-id spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE \
              --min-capacity 2 \
              --max-capacity 10

       Example 3: To register a new scalable target for AppStream 2.0

       The  following  register-scalable-target  example registers the desired
       capacity of an AppStream 2.0 fleet called sample-fleet, with a  minimum
       capacity  of  1  fleet  instance  and a maximum capacity of 5 fleet in-
       stances.

          aws application-autoscaling register-scalable-target \
              --service-namespace appstream \
              --scalable-dimension appstream:fleet:DesiredCapacity \
              --resource-id fleet/sample-fleet \
              --min-capacity 1 \
              --max-capacity 5

       Example 4: To register a new scalable target for a DynamoDB table

       The following register-scalable-target  example  registers  the  provi-
       sioned write capacity of a DynamoDB table called my-table, with a mini-
       mum capacity of 5 write capacity units and a  maximum  capacity  of  10
       write capacity units.

          aws application-autoscaling register-scalable-target \
              --service-namespace dynamodb \
              --scalable-dimension dynamodb:table:WriteCapacityUnits \
              --resource-id table/my-table \
              --min-capacity 5 \
              --max-capacity 10

       Example 5: To register a new scalable target for a DynamoDB global sec-
       ondary index

       The following register-scalable-target  example  registers  the  provi-
       sioned  write  capacity  of  a  DynamoDB  global secondary index called
       my-table-index, with a minimum capacity of 5 write capacity units and a
       maximum capacity of 10 write capacity units.

          aws application-autoscaling register-scalable-target \
              --service-namespace dynamodb \
              --scalable-dimension dynamodb:index:WriteCapacityUnits \
              --resource-id table/my-table/index/my-table-index \
              --min-capacity 5 \
              --max-capacity 10

       Example 6: To register a new scalable target for Aurora DB

       The  following  register-scalable-target example registers the count of
       Aurora Replicas in an Aurora DB cluster called  my-db-cluster,  with  a
       minimum capacity of 1 Aurora Replica and a maximum capacity of 8 Aurora
       Replicas.

          aws application-autoscaling register-scalable-target \
              --service-namespace rds \
              --scalable-dimension rds:cluster:ReadReplicaCount \
              --resource-id cluster:my-db-cluster \
              --min-capacity 1 \
              --max-capacity 8

       Example 7: To register a new scalable target for Amazon Sagemaker

       The following register-scalable-target example  registers  the  desired
       EC2  instance  count  for  an  Amazon  Sagemaker product variant called
       my-variant, running on the my-endpoint endpoint, with a minimum  capac-
       ity of 1 instance and a maximum capacity of 8 instances.

          aws application-autoscaling register-scalable-target \
              --service-namespace sagemaker \
              --scalable-dimension sagemaker:variant:DesiredInstanceCount \
              --resource-id endpoint/my-endpoint/variant/my-variant \
              --min-capacity 1 \
              --max-capacity 8

       Example 8: To register a new scalable target for a custom resource

       The  following  register-scalable-target example registers a custom re-
       source as a scalable target, with a minimum desired count of 1 capacity
       unit  and  a maximum desired count of 10 capacity units. The custom-re-
       source-id.txt file contains a string that identifies the  Resource  ID,
       which  for a custom resource is the path to the custom resource through
       your Amazon API Gateway endpoint.

          aws application-autoscaling register-scalable-target \
              --service-namespace custom-resource \
              --scalable-dimension custom-resource:ResourceType:Property \
              --resource-id file://~/custom-resource-id.txt \
              --min-capacity 1 \
              --max-capacity 10

       Contents of custom-resource-id.txt:

          https://example.execute-api.us-west-2.amazonaws.com/prod/scalableTargetDimensions/1-23456789

       Example 9: To register a new scalable target for Amazon Comprehend

       The following register-scalable-target example  registers  the  desired
       number of inference units to be used by the model for an Amazon Compre-
       hend document classifier endpoint using the endpoint's ARN, with a min-
       imum capacity of 1 inference unit and a maximum capacity of 3 inference
       units. Each inference unit represents a throughput  of  100  characters
       per second.

          aws application-autoscaling register-scalable-target \
              --service-namespace comprehend \
              --scalable-dimension comprehend:document-classifier-endpoint:DesiredInferenceUnits \
              --resource-id arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE \
              --min-capacity 1 \
              --max-capacity 3

       Example 10: To register a new scalable target for AWS Lambda

       The  following  register-scalable-target  example  registers the provi-
       sioned concurrency for an alias called BLUE  for  the  Lambda  function
       called my-function, with a minimum capacity of 0 and a maximum capacity
       of 100.

          aws application-autoscaling register-scalable-target \
              --service-namespace lambda \
              --scalable-dimension lambda:function:ProvisionedConcurrency \
              --resource-id function:my-function:BLUE \
              --min-capacity 0 \
              --max-capacity 100

       For more information, see the Application Auto Scaling User Guide.

OUTPUT
       ScalableTargetARN -> (string)
          The ARN of the scalable target.



                                                    REGISTER-SCALABLE-TARGET()
