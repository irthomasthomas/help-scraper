CREATE-ROBOT-APPLICATION()                          CREATE-ROBOT-APPLICATION()



NAME
       create-robot-application -

DESCRIPTION
       Creates a robot application.

       See also: AWS API Documentation

SYNOPSIS
            create-robot-application
          --name <value>
          [--sources <value>]
          --robot-software-suite <value>
          [--tags <value>]
          [--environment <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]
          [--debug]
          [--endpoint-url <value>]
          [--no-verify-ssl]
          [--no-paginate]
          [--output <value>]
          [--query <value>]
          [--profile <value>]
          [--region <value>]
          [--version <value>]
          [--color <value>]
          [--no-sign-request]
          [--ca-bundle <value>]
          [--cli-read-timeout <value>]
          [--cli-connect-timeout <value>]

OPTIONS
       --name (string)
          The name of the robot application.

       --sources (list)
          The sources of the robot application.

          (structure)
              Information about a source configuration.

              s3Bucket -> (string)
                 The Amazon S3 bucket name.

              s3Key -> (string)
                 The s3 object key.

              architecture -> (string)
                 The target processor architecture for the application.

       Shorthand Syntax:

          s3Bucket=string,s3Key=string,architecture=string ...

       JSON Syntax:

          [
            {
              "s3Bucket": "string",
              "s3Key": "string",
              "architecture": "X86_64"|"ARM64"|"ARMHF"
            }
            ...
          ]

       --robot-software-suite (structure)
          The  robot  software suite (ROS distribuition) used by the robot ap-
          plication.

          name -> (string)
              The name of the robot software suite (ROS distribution).

          version -> (string)
              The version of the robot software suite (ROS distribution).

       Shorthand Syntax:

          name=string,version=string

       JSON Syntax:

          {
            "name": "ROS"|"ROS2"|"General",
            "version": "Kinetic"|"Melodic"|"Dashing"|"Foxy"
          }

       --tags (map)
          A map that contains tag keys and tag values that are attached to the
          robot application.

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --environment (structure)
          The  object  that contains that URI of the Docker image that you use
          for your robot application.

          uri -> (string)
              The Docker image URI for either your robot or simulation  appli-
              cations.

       Shorthand Syntax:

          uri=string

       JSON Syntax:

          {
            "uri": "string"
          }

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

GLOBAL OPTIONS
       --debug (boolean)

       Turn on debug logging.

       --endpoint-url (string)

       Override command's default URL with the given URL.

       --no-verify-ssl (boolean)

       By default, the AWS CLI uses SSL when communicating with AWS  services.
       For each SSL connection, the AWS CLI will verify SSL certificates. This
       option overrides the default behavior of verifying SSL certificates.

       --no-paginate (boolean)

       Disable automatic pagination.

       --output (string)

       The formatting style for command output.

       o json

       o text

       o table

       --query (string)

       A JMESPath query to use in filtering the response data.

       --profile (string)

       Use a specific profile from your credential file.

       --region (string)

       The region to use. Overrides config/env settings.

       --version (string)

       Display the version of this tool.

       --color (string)

       Turn on/off color output.

       o on

       o off

       o auto

       --no-sign-request (boolean)

       Do not sign requests. Credentials will not be loaded if  this  argument
       is provided.

       --ca-bundle (string)

       The CA certificate bundle to use when verifying SSL certificates. Over-
       rides config/env settings.

       --cli-read-timeout (int)

       The maximum socket read time in seconds. If the value is set to 0,  the
       socket  read  will be blocking and not timeout. The default value is 60
       seconds.

       --cli-connect-timeout (int)

       The maximum socket connect time in seconds. If the value is set  to  0,
       the  socket connect will be blocking and not timeout. The default value
       is 60 seconds.

EXAMPLES
       NOTE:
          To use the following examples, you must have the AWS  CLI  installed
          and  configured.  See  the Getting started guide in the AWS CLI User
          Guide for more information.

          Unless otherwise  stated,  all  examples  have  unix-like  quotation
          rules.  These  examples  will  need to be adapted to your terminal's
          quoting rules. See Using quotation marks with strings in the AWS CLI
          User Guide .

       To create a robot application

       This example creates a robot application.

       Command:

          aws robomaker create-robot-application --name MyRobotApplication --sources s3Bucket=my-bucket,s3Key=my-robot-application.tar.gz,architecture=X86_64 --robot-software-suite name=ROS,version=Kinetic

       Output:

          {
            "arn": "arn:aws:robomaker:us-west-2:111111111111:robot-application/MyRobotApplication/1551201873931",
            "name": "MyRobotApplication",
            "version": "$LATEST",
            "sources": [
                {
                    "s3Bucket": "my-bucket",
                    "s3Key": "my-robot-application.tar.gz",
                    "architecture": "ARMHF"
                }
            ],
            "robotSoftwareSuite": {
                "name": "ROS",
                "version": "Kinetic"
            },
            "lastUpdatedAt": 1551201873.0,
            "revisionId": "1f3cb539-9239-4841-a656-d3efcffa07e1",
            "tags": {}
          }

OUTPUT
       arn -> (string)
          The Amazon Resource Name (ARN) of the robot application.

       name -> (string)
          The name of the robot application.

       version -> (string)
          The version of the robot application.

       sources -> (list)
          The sources of the robot application.

          (structure)
              Information about a source.

              s3Bucket -> (string)
                 The s3 bucket name.

              s3Key -> (string)
                 The s3 object key.

              etag -> (string)
                 A hash of the object specified by s3Bucket and s3Key .

              architecture -> (string)
                 The taget processor architecture for the application.

       robotSoftwareSuite -> (structure)
          The robot software suite (ROS distribution) used by the robot appli-
          cation.

          name -> (string)
              The name of the robot software suite (ROS distribution).

          version -> (string)
              The version of the robot software suite (ROS distribution).

       lastUpdatedAt -> (timestamp)
          The time, in milliseconds since the epoch, when the  robot  applica-
          tion was last updated.

       revisionId -> (string)
          The revision id of the robot application.

       tags -> (map)
          The list of all tags added to the robot application.

          key -> (string)

          value -> (string)

       environment -> (structure)
          An  object  that contains the Docker image URI used to a create your
          robot application.

          uri -> (string)
              The Docker image URI for either your robot or simulation  appli-
              cations.



                                                    CREATE-ROBOT-APPLICATION()
