CREATE-TABLE()                                                  CREATE-TABLE()



NAME
       create-table -

DESCRIPTION
       The  CreateTable  operation adds a new table to the specified keyspace.
       Within a keyspace, table names must be unique.
          CreateTable is an asynchronous operation. When the  request  is  re-
          ceived, the status of the table is set to CREATING . You can monitor
          the creation status of the new table by using  the  GetTable  opera-
          tion,  which  returns the current status of the table. You can start
          using a table when the status is ACTIVE .

       For more information, see Creating tables in the Amazon  Keyspaces  De-
       veloper Guide .

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            create-table
          --keyspace-name <value>
          --table-name <value>
          --schema-definition <value>
          [--comment <value>]
          [--capacity-specification <value>]
          [--encryption-specification <value>]
          [--point-in-time-recovery <value>]
          [--ttl <value>]
          [--default-time-to-live <value>]
          [--tags <value>]
          [--cli-input-json <value>]
          [--generate-cli-skeleton <value>]

OPTIONS
       --keyspace-name (string)
          The name of the keyspace that the table is going to be created in.

       --table-name (string)
          The name of the table.

       --schema-definition (structure)
          The schemaDefinition consists of the following parameters.

          For each column to be created:

          o

            *
            name * - The name of the column.

          System Message: WARNING/2 (<string>:, line 88)
            Inline emphasis start-string without end-string.

          o

            ``
            type `` - An Amazon Keyspaces data type. For more information, see
            Data types in the Amazon Keyspaces Developer Guide .

          System Message: WARNING/2 (<string>:, line 90)
            Inline literal start-string without end-string.
              <p>The primary key of the table consists of the  following  col-
              umns:</p>  <ul> <li> <p> <code>partitionKeys</code> - The parti-
              tion key can be a single column, or it can be a  compound  value
              composed  of  two  or more columns. The partition key portion of
              the primary key is required and determines how Amazon  Keyspaces
              stores your data.</p> <ul> <li> <p> <i> <code>name</code> </i> -
              The name of each partition key  column.</p>  </li>  </ul>  </li>
              <li>  <p>  <code>clusteringKeys</code> - The optional clustering
              column portion of your primary key determines how  the  data  is
              clustered  and  sorted  within each partition.</p> <ul> <li> <p>
              <i> <code>name</code> </i> - The name of the clustering  column.
              </p> </li> <li> <p> <i> <code>orderBy</code> </i> - Sets the as-
              cendant (<code>ASC</code>) or descendant (<code>DESC</code>) or-
              der  modifier.</p> </li> </ul> </li> </ul> <p>To define a column
              as static use <code> <i>staticColumns</i> </code> - Static  col-
              umns store values that are shared by all rows in the same parti-
              tion:</p> <ul> <li> <p> <i> <code>name</code> </i> - The name of
              the  column.</p>  </li> <li> <p> <code> <i>type</i> </code> - An
              Amazon Keyspaces data type.</p> </li> </ul> allColumns -> (list)
                 The regular columns of the table.

                 (structure)
                     The names and data types of regular columns.

                     name -> (string)
                        The name of the column.

                     type -> (string)
                        The data type of the column. For a list  of  available
                        data types, see Data types in the Amazon Keyspaces De-
                        veloper Guide .

          partitionKeys -> (list)
              The columns that are part of the partition key of the table .

              (structure)
                 The partition key portion of the primary key is required  and
                 determines  how  Amazon Keyspaces stores the data. The parti-
                 tion key can be a single column, or  it  can  be  a  compound
                 value composed of two or more columns.

                 name -> (string)
                     The name(s) of the partition key column(s).

          clusteringKeys -> (list)
              The columns that are part of the clustering key of the table.

              (structure)
                 The  optional  clustering  column portion of your primary key
                 determines how the data is clustered and sorted  within  each
                 partition.

                 name -> (string)
                     The name(s) of the clustering column(s).

                 orderBy -> (string)
                     Sets  the  ascendant  (ASC  ) or descendant (DESC ) order
                     modifier.

          staticColumns -> (list)
              The columns that have been defined as STATIC  .  Static  columns
              store values that are shared by all rows in the same partition.

              (structure)
                 The  static columns of the table. Static columns store values
                 that are shared by all rows in the same partition.

                 name -> (string)
                     The name of the static column.

       Shorthand Syntax:

          allColumns=[{name=string,type=string},{name=string,type=string}],partitionKeys=[{name=string},{name=string}],clusteringKeys=[{name=string,orderBy=string},{name=string,orderBy=string}],staticColumns=[{name=string},{name=string}]

       JSON Syntax:

          {
            "allColumns": [
              {
                "name": "string",
                "type": "string"
              }
              ...
            ],
            "partitionKeys": [
              {
                "name": "string"
              }
              ...
            ],
            "clusteringKeys": [
              {
                "name": "string",
                "orderBy": "ASC"|"DESC"
              }
              ...
            ],
            "staticColumns": [
              {
                "name": "string"
              }
              ...
            ]
          }

       --comment (structure)
          This parameter allows to enter a description of the table.

          message -> (string)
              An optional description of the table.

       Shorthand Syntax:

          message=string

       JSON Syntax:

          {
            "message": "string"
          }

       --capacity-specification (structure)
          Specifies the read/write throughput capacity mode for the table. The
          options are:

          o throughputMode:PAY_PER_REQUEST and

          o throughputMode:PROVISIONED  .  The  provisioned  capacity mode re-
            quires readCapacityUnits and writeCapacityUnits as inputs.

          The default is throughput_mode:PAY_PER_REQUEST .

          For more information, see Read/write capacity modes  in  the  Amazon
          Keyspaces Developer Guide .

          throughputMode -> (string)
              The read/write throughput capacity mode for a table. The options
              are:

              o throughputMode:PAY_PER_REQUEST and

              o throughputMode:PROVISIONED . The provisioned capacity mode re-
                quires readCapacityUnits and writeCapacityUnits as inputs.

              The default is throughput_mode:PAY_PER_REQUEST .

              For  more information, see Read/write capacity modes in the Ama-
              zon Keyspaces Developer Guide .

          readCapacityUnits -> (long)
              The throughput capacity specified for read operations defined in
              read capacity units  (RCUs) .

          writeCapacityUnits -> (long)
              The  throughput  capacity specified for write operations defined
              in write capacity units  (WCUs) .

       Shorthand Syntax:

          throughputMode=string,readCapacityUnits=long,writeCapacityUnits=long

       JSON Syntax:

          {
            "throughputMode": "PAY_PER_REQUEST"|"PROVISIONED",
            "readCapacityUnits": long,
            "writeCapacityUnits": long
          }

       --encryption-specification (structure)
          Specifies how the encryption key for encryption at rest  is  managed
          for  the  table.  You  can  choose one of the following KMS key (KMS
          key):
              <ul> <li> <p> <code>type:AWS_OWNED_KMS_KEY</code> - This key  is
              owned  by  Amazon Keyspaces. </p> </li> <li> <p> <code>type:CUS-
              TOMER_MANAGED_KMS_KEY</code> - This key is stored  in  your  ac-
              count and is created, owned, and managed by you. This option re-
              quires the <code>kms_key_identifier</code> of  the  KMS  key  in
              Amazon  Resource  Name  (ARN)  format as input. </p> </li> </ul>
              <p>The  default  is  <code>type:AWS_OWNED_KMS_KEY</code>.   </p>
              <p>For  more  information,  see  <a  href="https://docs.aws.ama-
              zon.com/keyspaces/latest/devguide/EncryptionAtRest.html">Encryp-
              tion   at   rest</a>   in   the  <i>Amazon  Keyspaces  Developer
              Guide</i>.</p> type -> (string)
                 The encryption option specified for the table. You can choose
                 one of the following KMS keys (KMS keys):

                 o type:AWS_OWNED_KMS_KEY  -  This  key  is  owned  by  Amazon
                   Keyspaces.

                 o type:CUSTOMER_MANAGED_KMS_KEY - This key is stored in  your
                   account and is created, owned, and managed by you. This op-
                   tion requires the kms_key_identifier of the KMS key in Ama-
                   zon Resource Name (ARN) format as input.

                 The default is type:AWS_OWNED_KMS_KEY .

                 For  more  information,  see Encryption at rest in the Amazon
                 Keyspaces Developer Guide .

          kmsKeyIdentifier -> (string)
              The Amazon Resource Name (ARN) of the customer managed KMS  key,
              for example kms_key_identifier:ARN .

       Shorthand Syntax:

          type=string,kmsKeyIdentifier=string

       JSON Syntax:

          {
            "type": "CUSTOMER_MANAGED_KMS_KEY"|"AWS_OWNED_KMS_KEY",
            "kmsKeyIdentifier": "string"
          }

       --point-in-time-recovery (structure)
          Specifies  if pointInTimeRecovery is enabled or disabled for the ta-
          ble. The options are:

          o ENABLED

          o DISABLED

          If it's not specified, the default is DISABLED .

          For more information,  see  Point-in-time  recovery  in  the  Amazon
          Keyspaces Developer Guide .

          status -> (string)
              The options are:

              o ENABLED

              o DISABLED

       Shorthand Syntax:

          status=string

       JSON Syntax:

          {
            "status": "ENABLED"|"DISABLED"
          }

       --ttl (structure)
          Enables Time to Live custom settings for the table. The options are:

          o status:enabled

          o status:disabled

          The  default  is  status:disabled  . After ttl is enabled, you can't
          disable it for the table.

          For more information, see Expiring data by  using  Amazon  Keyspaces
          Time to Live (TTL) in the Amazon Keyspaces Developer Guide .

          status -> (string)
              Shows  how  to enable custom Time to Live (TTL) settings for the
              specified table.

       Shorthand Syntax:

          status=string

       JSON Syntax:

          {
            "status": "ENABLED"
          }

       --default-time-to-live (integer)
          The default Time to Live setting in seconds for the table.

          For more information, see Setting the default TTL value for a  table
          in the Amazon Keyspaces Developer Guide .

       --tags (list)
          A list of key-value pair tags to be attached to the resource.

          For more information, see Adding tags and labels to Amazon Keyspaces
          resources in the Amazon Keyspaces Developer Guide .

          (structure)
              Describes a tag. A tag is a key-value pair. You can add up to 50
              tags to a single Amazon Keyspaces resource.

              Amazon  Web Services-assigned tag names and values are automati-
              cally assigned the aws: prefix, which the  user  cannot  assign.
              Amazon  Web Services-assigned tag names do not count towards the
              tag limit of 50. User-assigned tag names have the  prefix  user:
              in  the Cost Allocation Report. You cannot backdate the applica-
              tion of a tag.

              For more information, see  Adding  tags  and  labels  to  Amazon
              Keyspaces resources in the Amazon Keyspaces Developer Guide .

              key -> (string)
                 The  key of the tag. Tag keys are case sensitive. Each Amazon
                 Keyspaces resource can only have up to one tag with the  same
                 key. If you try to add an existing tag (same key), the exist-
                 ing tag value will be updated to the new value.

              value -> (string)
                 The value of the tag. Tag values are case-sensitive  and  can
                 be null.

       Shorthand Syntax:

          key=string,value=string ...

       JSON Syntax:

          [
            {
              "key": "string",
              "value": "string"
            }
            ...
          ]

       --cli-input-json  (string) Performs service operation based on the JSON
       string provided. The JSON string follows the format provided by  --gen-
       erate-cli-skeleton.  If  other  arguments  are  provided on the command
       line, the CLI values will override the JSON-provided values. It is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for  --cli-input-json.  If provided with the value output, it validates
       the command inputs and returns a sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       resourceArn -> (string)
          The unique identifier of the table in the format of  an  Amazon  Re-
          source Name (ARN).



                                                                CREATE-TABLE()
